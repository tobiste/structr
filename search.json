[{"path":"https://tobiste.github.io/structr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 structR authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://tobiste.github.io/structr/articles/A_Basics.html","id":"import","dir":"Articles","previous_headings":"","what":"Import","title":"1. Basics","text":"Strabospot project, download json file import using read_strabo_JSON() function. returns list contains information metadata (including coordinates, descriptions etc) extracted Strabospot project list element data, tags used project list element tags, linear planar orientation measurements list elements lines planes, respectively.","code":""},{"path":"https://tobiste.github.io/structr/articles/A_Basics.html","id":"data-conversion-to-spherical-objects","dir":"Articles","previous_headings":"","what":"Data conversion to spherical objects","title":"1. Basics","text":"Usually orientation data stored table containing column dip direction (strike) dip angle measured plane… trend (azimuth) plunge (inclination) measured line… convert data frames spherical objects, use Plane() Line() functions structr package. functions take dip direction dip angle planes, trend plunge lines arguments. raw data imported using read_strabo_JSON() step necessary data come already correct format. spherical objects can easily converted Cartesian coordinate vectors using function Vec3(): Convert pole plane Line:","code":"data(example_planes_df) head(example_planes_df) #> # A tibble: 6 × 4 #>   dipdir   dip quality feature_type #>    <dbl> <dbl>   <dbl> <chr>        #> 1    142    52       3 foliation    #> 2    135    43       3 foliation    #> 3    148    42       3 foliation    #> 4    150    46       3 foliation    #> 5    139    51       3 foliation    #> 6    158    51       3 foliation data(example_lines_df) head(example_lines_df) #> # A tibble: 6 × 4 #>   trend plunge quality feature_type #>   <dbl>  <dbl>   <dbl> <chr>        #> 1    54     13       3 stretching   #> 2    61     15       3 stretching   #> 3    74     14      NA stretching   #> 4    80     19      NA stretching   #> 5    63     17      NA stretching   #> 6    76     10      NA stretching data(example_planes) planes <- Plane(example_planes_df$dipdir, example_planes_df$dip) lines <- Line(example_lines_df$trend, example_lines_df$plunge) lines_vector <- Vec3(lines) head(lines_vector) #> Vector (Vec3) object (n = 6): #>              x         y         z #> [1,] 0.5727204 0.7882819 0.2249511 #> [2,] 0.4682901 0.8448178 0.2588190 #> [3,] 0.2674497 0.9327081 0.2419219 #> [4,] 0.1641876 0.9311540 0.3255682 #> [5,] 0.4341533 0.8520738 0.2923717 #> [6,] 0.2382466 0.9555548 0.1736482 planes_as_line <- Line(planes) head(planes_as_line) #> Line object (n = 6): #>      azimuth plunge #> [1,]     322     38 #> [2,]     315     47 #> [3,]     328     48 #> [4,]     330     44 #> [5,]     319     39 #> [6,]     338     39"},{"path":"https://tobiste.github.io/structr/articles/A_Basics.html","id":"some-helpers","dir":"Articles","previous_headings":"","what":"Some helpers","title":"1. Basics","text":"Converts strike dip direction using right-hand rule","code":"rhr2dd(271) #> [1] 1 dd2rhr(1) #> [1] 271"},{"path":"https://tobiste.github.io/structr/articles/A_Basics.html","id":"vector-operations","dir":"Articles","previous_headings":"","what":"Vector operations","title":"1. Basics","text":"Since spherical vector objects easily convertible, can used sort vector operations, magnitude (length), angle vectors, dot product, cross product, projection rotation. Define example vectors: vector length (magnitude): Orientation vectors definition unit vectors, .e. length equal 1. angle two vectors dot product (scalar product) two vectors Intuitively, dot product tells us much two vectors point direction. cross product two vectors: gives vector perpendicular plane spanned two vectors. projection vector another vector: vectors unit vectors, projected vector equal second vector. rotation vector another vector (rotation axis) specified rotation angle: Linear transformation transforms vectors using transformation matrix (second-order tensor).","code":"line1 <- Line(120, 50) line2 <- Line(10, 30) vector_length(line1) #> [1] 1 angle(line1, line2) #> [1] 78.89371 dotprod(line1, line2) #> [1] 0.1926297 crossprod(line1, line2) #> Line object (n = 1): #>   azimuth    plunge  #> 258.66786  32.21399 project(line1, line2) #> Line object (n = 1): #> azimuth  plunge  #>      10      30 rotate(line1, rotaxis = line2, rotangle = 45) #> Line object (n = 1): #>   azimuth    plunge  #> 210.50391  70.01332 trans_mat <- matrix(runif(9), 3, 3) transform_linear(line1, trans_mat) #> Vector (Vec3) object (n = 1): #>           x           y           z  #>  0.44288029 -0.04205583  0.62796680"},{"path":"https://tobiste.github.io/structr/articles/A_Basics.html","id":"cluster-vectors","dir":"Articles","previous_headings":"","what":"Cluster vectors","title":"1. Basics","text":"find k clusters orientation vectors:","code":"# generate some random vectors: set.seed(20250411) x1 <- rvmf(100, mu = Line(90, 0), k = 20) x2 <- rvmf(100, mu = Line(0, 0), k = 20) x3 <- rvmf(100, mu = Line(0, 90), k = 20) x123 <- rbind(x1, x2, x3)  # cluster the vectors: cl <- sph_cluster(x123, k = 3)  # visualize the result: plot(x123, col = assign_col_d(cl$cluster))  legend_d(assign_col_d(unique(cl$cluster)), title = \"Cluster\")"},{"path":"https://tobiste.github.io/structr/articles/B_Stereographic_projection.html","id":"stereographic-projection","dir":"Articles","previous_headings":"","what":"Stereographic projection","title":"2. Stereographic projections","text":"Lambert equal area, lower hemisphere projection default plotting setting.  change equal angle stereographic, upper hemisphere projection  Adding great circles:","code":"stereoplot() points(lines, col = \"#B63679\", pch = 19, cex = .5) points(planes, col = \"#000004\", pch = 1, cex = .5) legend(\"topright\", legend = c(\"Lines\", \"Planes\"), col = c(\"#B63679\", \"#000004\"), pch = c(19, 1), cex = 1) title(main = \"Example data\", sub = \"Lambert equal area, lower hemisphere projection\") stereoplot(earea = FALSE) points(lines, col = \"#B63679\", pch = 19, cex = .5, earea = FALSE, upper.hem = TRUE) points(planes, col = \"#000004\", pch = 1, cex = .5, earea = FALSE, upper.hem = TRUE) legend(\"topright\", legend = c(\"Lines\", \"Planes\"), col = c(\"#B63679\", \"#000004\"), pch = c(19, 1), cex = 1) title(main = \"Example data\", sub = \"Equal angle stereographic, upper hemisphere projection\") stereoplot(guides = FALSE) lines(planes, col = \"lightgrey\", lty = 1) points(planes, col = \"#000004\", pch = 1, cex = .5)"},{"path":"https://tobiste.github.io/structr/articles/B_Stereographic_projection.html","id":"statistics","dir":"Articles","previous_headings":"","what":"Statistics","title":"2. Stereographic projections","text":"Define weights lines based quality reported measurements: (weighted) arithmetic mean orientation (weighted) arithmetic variance (weighted) standard deviation (.e. 63% cone around mean) 95% confidence cone around mean: Taken together, prints Summary stats can also retrieved Plotting summary stats equal-area projection:","code":"example_lines_df$quality <- ifelse(is.na(example_lines_df$quality), 6, example_lines_df$quality) # replacing NA values with 6 line_weightings <- 6 / example_lines_df$quality lines_mean <- sph_mean(lines, w = line_weightings) lines_variance <- sph_var(lines, w = line_weightings) lines_delta <- delta(lines, w = line_weightings) lines_confangle <- sph_confidence_angle(lines, w = line_weightings) c(   \"Variance\" = lines_variance,   \"63% cone\" = lines_delta,   \"Confidence angle\" = lines_confangle ) #>         Variance         63% cone Confidence angle  #>        0.1938084       36.2745102        6.9017035 summary(lines) #>         azimuth          plunge        variance        68% cone confidence cone  #>      68.5127690      20.4958671       0.2168518      38.4502642       4.7492331 stereoplot(guides = FALSE) points(lines, col = \"lightgrey\", pch = 1, cex = .5) points(lines_mean, col = \"#B63679\", pch = 19, cex = 1) lines(lines_mean, ang = lines_confangle, col = \"#E65164FF\") lines(lines_mean, ang = lines_delta, col = \"#FB8861FF\") legend(\"topright\", legend = c(\"Mean line\", \"95% confidence cone\", \"63% data cone\"), col = c(\"#B63679\", \"#E65164FF\", \"#FB8861FF\"), pch = c(19, NA, NA), lty = c(NA, 1, 1), cex = .75)"},{"path":"https://tobiste.github.io/structr/articles/B_Stereographic_projection.html","id":"variance-plot","dir":"Articles","previous_headings":"Statistics","what":"Variance plot","title":"2. Stereographic projections","text":"","code":"variance_plot(lines, y = lines[1, ])"},{"path":"https://tobiste.github.io/structr/articles/B_Stereographic_projection.html","id":"geodesic-mean-and-variance","dir":"Articles","previous_headings":"Statistics","what":"Geodesic mean and variance","title":"2. Stereographic projections","text":"Frechet (geodesic L2) mean iteratively finds vector minimizes distances points.","code":"# Mean geodesic_mean(lines) #> Line object (n = 1): #>  azimuth   plunge  #> 69.64018 14.87713  # Variance geodesic_var(lines) #> [1] 0.06118261"},{"path":"https://tobiste.github.io/structr/articles/B_Stereographic_projection.html","id":"hypothesis-testing","dir":"Articles","previous_headings":"Statistics","what":"Hypothesis testing","title":"2. Stereographic projections","text":"test line represents population mean given set lineations, need calculate confidence region population. Let’s test hypothesis horizontal lineation trending towards 70° mean lineations. 95% confidence interval (10,000 bootstrap samples): visualize confidence region lines:  p-value hypothesis line: (95% confidence) rejected Null Hypothesis given line represents population mean p-value smaller 5%.","code":"line_NULL <- Line(70, 0) ce <- confidence_ellipse(lines, n = 10000, alpha = 0.05) plot(lines, col = 'grey') stereo_confidence(ce, col = \"#B63679FF\") points(line_NULL, col = \"#000004\", pch = 16) ce$pvalue.line.FUN(line_NULL) #> [1] 0"},{"path":[]},{"path":"https://tobiste.github.io/structr/articles/B_Stereographic_projection.html","id":"eigenvectors","dir":"Articles","previous_headings":"Orientation tensor","what":"Eigenvectors","title":"2. Stereographic projections","text":"orientation tensor (Scheidegger 1965) matrix comprising mean direction cosines orientation vectors. case Bingham distribution, Eigenvectors tensor describe orientation dense, intermediate least dense orientation, thus, used determine orientation girdle-distributed vectors (e.g. folded planes).","code":"planes_eigen <- ot_eigen(planes)  stereoplot(guides = FALSE) points(planes, col = \"lightgrey\", pch = 1, cex = .5) lines(planes_eigen$vectors, col = viridis::magma(3), lty = 1) points(planes_eigen$vectors, col = viridis::magma(3), pch = 19, cex = 1) legend(\"topright\", legend = c(\"Eigenvectors 1\", \"Eigenvectors 2\", \"Eigenvectors 3\"), col = viridis::magma(3), pch = 19, cex = .75)"},{"path":"https://tobiste.github.io/structr/articles/B_Stereographic_projection.html","id":"projected-mean","dir":"Articles","previous_headings":"Orientation tensor","what":"Projected mean","title":"2. Stereographic projections","text":"Eigenvector largest Eigenvalue represents vector parallel highest concentration population. vector can also described projected mean. shortcut function :","code":"projected_mean(example_lines) #> Line object (n = 1): #>  azimuth   plunge  #> 69.09796 14.82125"},{"path":"https://tobiste.github.io/structr/articles/B_Stereographic_projection.html","id":"eigenvalues","dir":"Articles","previous_headings":"Orientation tensor","what":"Eigenvalues","title":"2. Stereographic projections","text":"Eigenvalues orientation tensor describe shape distribution vectors, clustered, cylindrical random vectors distributed. Fabric plot visualizes shape distribution plotting eigenvalues orientation tensor. Two different diagram provided {structr}, namely triangular Vollmer plot Vollmer (1990) logarithmic biplot (Woodcock plot) Woodcock (1977).","code":""},{"path":"https://tobiste.github.io/structr/articles/B_Stereographic_projection.html","id":"vollmer-plot","dir":"Articles","previous_headings":"Orientation tensor > Eigenvalues","what":"Vollmer plot","title":"2. Stereographic projections","text":"","code":"vollmer_plot(planes, col = \"#000004\", pch = 1, cex = 2) vollmer_plot(lines, add = TRUE, col = \"#B63679\", pch = 19, cex = 2) legend(\"topright\", legend = c(\"Lines\", \"Planes\"), col = c(\"#B63679\", \"#000004\"), pch = c(19, 1), cex = 1)"},{"path":"https://tobiste.github.io/structr/articles/B_Stereographic_projection.html","id":"woodcock-plot","dir":"Articles","previous_headings":"Orientation tensor > Eigenvalues","what":"Woodcock plot","title":"2. Stereographic projections","text":"","code":"woodcock_plot(planes, col = \"#000004\", pch = 1, cex = 2) woodcock_plot(lines, add = TRUE, col = \"#B63679\", pch = 19, cex = 2) legend(\"topright\", legend = c(\"Lines\", \"Planes\"), col = c(\"#B63679\", \"#000004\"), pch = c(19, 1), cex = 1)"},{"path":"https://tobiste.github.io/structr/articles/B_Stereographic_projection.html","id":"hsü-plot","dir":"Articles","previous_headings":"Orientation tensor > Eigenvalues","what":"Hsü plot","title":"2. Stereographic projections","text":"","code":"hsu_fabric_plot(planes, col = \"#000004\", pch = 1, cex = 2) hsu_fabric_plot(lines, add = TRUE, col = \"#B63679\", pch = 19, cex = 2) legend(\"topright\", legend = c(\"Lines\", \"Planes\"), col = c(\"#B63679\", \"#000004\"), pch = c(19, 1), cex = 1)"},{"path":"https://tobiste.github.io/structr/articles/B_Stereographic_projection.html","id":"shape-parameters","dir":"Articles","previous_headings":"Orientation tensor > Eigenvalues","what":"Shape parameters","title":"2. Stereographic projections","text":"shape parameters using different algorithms based orientation tensor:","code":"or_shape_params(planes) #> $stretch_ratios #>      Rxy      Ryz      Rxz  #> 1.478428 1.873104 2.769250  #>  #> $strain_ratios #>       e12       e13       e23  #> 0.3909795 1.0185765 0.6275970  #>  #> $Vollmer #>          P          G          R          B          C          I          D  #>  68.327769  82.400078  49.272153 150.727847   2.037153   1.147654 170.240224  #>  #> $Flinn #> $Flinn$k #> [1] 0.5479625 #>  #> $Flinn$d #> [1] 0.9955924 #>  #>  #> $Ramsay #> intensity  symmetry  #> 0.5467429 0.6229787  #>  #> $Woodcock #>  strength     shape  #> 1.0185765 0.6229787  #>  #> $Watterson_intensity #> [1] 2.351532 #>  #> $Lisle_intensity #> [1] 144908.7 #>  #> $Nadai #>      goct      eoct  #> 0.8391109 0.7266914  #>  #> $Lode #> [1] 0.2323021 #>  #> $kind #> [1] \"SSL\" #>  #> $MAD #> [1] 32.80303 #>  #> $US #> [1] 28981734 #>  #> $Jellinek #> [1] 2.794622"},{"path":"https://tobiste.github.io/structr/articles/B_Stereographic_projection.html","id":"density-plots","dir":"Articles","previous_headings":"","what":"Density plots","title":"2. Stereographic projections","text":"Densities estimated using Kamb contouring (Kamb, 1959) exponential (default), linear, square-inverse smoothing. Weighted densities can controlled weights argument useful orientation measurements different accuracies.","code":"example_planes_df$quality <- ifelse(is.na(example_planes_df$quality), 6, example_planes_df$quality) # replacing NA values with 6 plane_weightings <- 6 / example_planes_df$quality  fabric_p <- or_shape_params(planes)$Vollmer[\"D\"] fabric_l <- or_shape_params(lines)$Vollmer[\"D\"]  par(mfrow = c(1, 2)) stereoplot(guides = TRUE, col = \"grey96\") points(planes, col = \"grey\", pch = 16, cex = .5) contour(planes, add = TRUE, weights = plane_weightings) points(planes_eigen$vectors[3, ], col = \"black\", pch = 16) lines(planes_eigen$vectors[3, ], col = \"black\", pch = 16) title(   main = \"Planes\",   sub = paste0(     \"N: \", nrow(planes), \" | Fabric strength: \", round(fabric_p, 2),     \"\\nLambert equal area, lower hemisphere projection\"   ) )  stereoplot(guides = TRUE, col = \"grey96\") points(lines, col = \"grey\", pch = 16, cex = .5) contour(lines, add = TRUE, weights = line_weightings) points(lines_mean, col = \"black\", pch = 16) title(   main = \"Lines\",   sub = paste0(     \"N: \", nrow(lines), \" | Fabric strength: \", round(fabric_l, 2),     \"\\nLambert equal area, lower hemisphere projection\"   ) )"},{"path":"https://tobiste.github.io/structr/articles/B_Stereographic_projection.html","id":"fault-plots","dir":"Articles","previous_headings":"","what":"Fault plots","title":"2. Stereographic projections","text":"Fault objects consist planes (fault plane), lines (e.g. striae), sense movement. two ways combined features can visualized, namely Angelier Hoeppner plot.","code":""},{"path":"https://tobiste.github.io/structr/articles/B_Stereographic_projection.html","id":"angelier-plot","dir":"Articles","previous_headings":"Fault plots","what":"Angelier plot","title":"2. Stereographic projections","text":"Angelier plot shows planes great circles lineations points (Angelier , 1984). Fault striae plotted vectors top lineation pointing movement direction hanging wall. Easy read case homogeneous small datasets.","code":"f <- Fault(   c(\"a\" = 120, \"b\" = 125, \"c\" = 100),   c(60, 62, 50),   c(110, 25, 30),   c(58, 9, 23),   c(1, -1, 1) )  stereoplot(title = \"Angelier plot\") angelier(f, col = viridis::magma(nrow(f), end = .9))"},{"path":"https://tobiste.github.io/structr/articles/B_Stereographic_projection.html","id":"hoeppner-plot","dir":"Articles","previous_headings":"Fault plots","what":"Hoeppner plot","title":"2. Stereographic projections","text":"Hoeppner plot shows planes poles lineations shown (Hoeppner, 1955). Instead, fault striae plotted vectors top poles pointing movement direction hanging wall. Useful case large heterogeneous datasets.","code":"stereoplot(title = \"Hoeppner plot\") hoeppner(f, col = viridis::magma(nrow(f), end = .9))"},{"path":"https://tobiste.github.io/structr/articles/C_Stereographic_projection_ggplot.html","id":"stereographic-projection","dir":"Articles","previous_headings":"","what":"Stereographic projection","title":"3. Stereographic projections with ggplot","text":"Adding great circles:","code":"ggstereo() +   geom_point(data = gg(planes), aes(x, y, color = \"planes\")) +   geom_point(data = gg(lines), aes(x, y, color = \"lines\")) +   labs(title = \"Example data\", color = NULL) ggstereo() +   geom_path(data = ggl(planes), aes(x, y, color = \"planes\"), lwd = .1) +   geom_point(data = gg(lines), aes(x, y, color = \"lines\")) +   labs(title = \"Example data\", color = NULL)"},{"path":"https://tobiste.github.io/structr/articles/C_Stereographic_projection_ggplot.html","id":"statistics","dir":"Articles","previous_headings":"","what":"Statistics","title":"3. Stereographic projections with ggplot","text":"","code":"quality <- runif(nrow(lines), min = 1, max = 45) # assigning a random quality score to the data (can be replaced with real data)  lines_mean <- sph_mean(lines, w = 1 / quality) lines_delta <- delta(lines, w = 1 / quality)  ggstereo() +   geom_point(data = gg(lines, quality), aes(x, y, size = quality)) +   scale_size(\"Quality\", range = c(3, .1)) +   geom_path(data = ggl(lines_mean, d = lines_delta), aes(x, y, color = \"Std\"), lwd = .1) +   geom_point(data = gg(lines_mean), aes(x, y, color = \"Mean\"), size = 5, shape = 17) +   labs(title = \"Example data\", color = NULL)"},{"path":"https://tobiste.github.io/structr/articles/C_Stereographic_projection_ggplot.html","id":"density-plots","dir":"Articles","previous_headings":"","what":"Density plots","title":"3. Stereographic projections with ggplot","text":"","code":"ggstereo() +   geom_contourf_stereo(gg(planes), show.legend = TRUE, norm = TRUE) +   scale_fill_viridis_d(\"Density\") +   geom_point(data = gg(planes), aes(x, y)) +   labs(title = \"Example data\", color = NULL)"},{"path":"https://tobiste.github.io/structr/articles/C_Stereographic_projection_ggplot.html","id":"facets","dir":"Articles","previous_headings":"","what":"Facets","title":"3. Stereographic projections with ggplot","text":"","code":"area_l <- LETTERS[sample.int(3, nrow(lines), replace = TRUE)] area_p <- LETTERS[sample.int(3, nrow(planes), replace = TRUE)]  lines_df <- gg(lines, area = area_l) planes_df <- ggl(planes, area = area_p)  ggstereo(data = lines_df, aes(x = x, y = y, color = area)) +   geom_path(data = planes_df, aes(x = x, y = y, group = group), alpha = .25, color = \"grey\") +   geom_point() +   facet_wrap(vars(area)) +   labs(title = \"Example data\", color = NULL)"},{"path":"https://tobiste.github.io/structr/articles/D_Faults.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"4. Faults","text":"fault given orientation plane (dip direction dip angle), orientation slip (e.g. measured striae, given azimuth plunge angles), sense displacement: Sense fault displacement 1 -1 normal thrust offset, respectively. Rake fault, .e. angle fault slip vector fault strike: Define fault just knowing orientation fault plane, sense, rake Often measured orientation angles can (slightly) imprecise subjected random noise. Thus slip vector lie (perfectly) fault plane, judging measurements. correct measurements case: \"Pair\" object container associated plane line measurements. Basically like fault wihtout sense displacement.","code":"my_fault <- Fault(120, 50, 60, 110, sense = -1) Fault_rake(my_fault) ## [1] -107.2294 fault_plane <- Plane(c(120, 120, 100), c(60, 60, 50)) # dip direction, dip angle Fault_from_rake(fault_plane, rake = c(84.7202, -10, 30)) ## Fault object (n = 3): ##      dip_direction dip   azimuth    plunge sense ## [1,]           120  60 109.52858 59.581591     1 ## [2,]           120  60 204.96163  8.649165    -1 ## [3,]           100  50  30.36057 22.521012     1 p <- Pair(120, 60, 110, 58) misfit_pair(p) ## $fvec ## Vector (Vec3) object (n = 1): ##          x          y          z  ##  0.4306074 -0.7432627  0.5119940  ##  ## $lvec ## Vector (Vec3) object (n = 1): ##          x          y          z  ## -0.1752467  0.4876291  0.8552815  ##  ## $misfit ## [1] 0.02793105 correct_pair(p) ## Pair object (n = 1): ## dip_direction           dip       azimuth        plunge  ##     120.08575      59.20326     109.76769      58.79085"},{"path":"https://tobiste.github.io/structr/articles/D_Faults.html","id":"fault-stress-analysis","dir":"Articles","previous_headings":"","what":"Fault stress analysis","title":"4. Faults","text":"Calculates PT-axes, kinematic plane (M), dihedra separation plane (d):","code":"my_fault2 <- Fault(c(120, 120, 100), c(60, 60, 50), c(110, 25, 30), c(58, 9, 23), c(1, -1, 1)) print(my_fault2) ## Fault object (n = 3): ##      dip_direction dip azimuth plunge sense ## [1,]           120  60     110     58     1 ## [2,]           120  60      25      9    -1 ## [3,]           100  50      30     23     1 fault_analysis(my_fault2) ## $p ## Line object (n = 3): ##       azimuth   plunge ## [1,] 314.9694 75.19695 ## [2,] 248.4032 15.30354 ## [3,] 342.4517 46.65113 ##  ## $t ## Line object (n = 3): ##       azimuth   plunge ## [1,] 116.2068 14.04837 ## [2,] 345.9417 25.61490 ## [3,] 241.3308 10.31892 ##  ## $m ## Plane object (n = 3): ##      dip_direction      dip ## [1,]      27.35344 85.42739 ## [2,]     310.64119 30.43222 ## [3,]     322.06010 48.49732 ##  ## $d ## Plane object (n = 3): ##      dip_direction      dip ## [1,]      289.7677 31.20915 ## [2,]      208.8622 83.16168 ## [3,]      210.2233 67.19865"},{"path":"https://tobiste.github.io/structr/articles/D_Faults.html","id":"sec-offset","dir":"Articles","previous_headings":"","what":"Fault offsets","title":"4. Faults","text":"offset along fault can factorized several components.","code":""},{"path":[]},{"path":"https://tobiste.github.io/structr/articles/D_Faults.html","id":"sec-offset-1","dir":"Articles","previous_headings":"Fault offsets > Get different components with trigonometry","what":"1. Input: Fault orientation (dip angle, dip direction), shorteninig direction, and horizontal throw","title":"4. Faults","text":"Knowing horizontal throw (e.g. plate motion parameters), remaining components displacements along given fault follows. δ=|σHmax−(dip direction+90∘)|\\begin{equation}\\delta = |\\sigma_{\\textrm{Hmax}} - (\\textrm{dip direction}+90^{\\circ})|\\end{equation} Slip components horizontal plane: fstrike slip=|cosδ*fhorizontal throw|fheave=fhorizontal throw2−fstrike slip2\\begin{equation}\\begin{split}   f_\\textrm{strike slip} & = |\\cos{\\delta} * f_\\textrm{horizontal throw}|\\\\   f_\\textrm{heave} & = \\sqrt{f_\\textrm{horizontal throw}^2 - f_\\textrm{strike slip}^2}   \\end{split}\\end{equation} Slip components vertical plane perpendicular strike fault: fdip slip=fheavecos(dip)fvertical throw=fdip slip2−fheave2\\begin{equation}\\begin{split}   f_\\textrm{dip slip} &=  \\frac{f_\\textrm{heave}}{cos{(\\textrm{dip})}}\\\\   f_\\textrm{vertical throw} &= \\sqrt{f_\\textrm{dip slip}^2 - f_\\textrm{heave}^2}   \\end{split}\\end{equation} Slip components fault plane plane: fnet slip=fstrike slip2+fdip slip2rake=arctan(fdip slipfstrike slip)\\begin{equation}\\begin{split}   f_\\textrm{net slip} &= \\sqrt{f_\\textrm{strike slip}^2 + f_\\textrm{dip slip}^2}\\\\   \\textrm{rake} &= \\arctan{\\left(\\frac{f_\\textrm{dip slip}}{f_\\textrm{strike slip}}\\right)}   \\end{split}\\end{equation} Thus, rake angle describes ratio dip slip strike slip component. Knowing vertical throw (e.g. thermochronology petrology), fault dip (?assumption), direction amount horizontal offset, strike fault follows: fheave=fvertical throw*tan(dip)δ=arcsin(fheavefhorizontal throw)strike=|σHmax−δ|\\begin{equation}\\begin{split} f_\\textrm{heave} &= f_\\textrm{vertical throw} * \\tan{(\\textrm{dip})}\\\\ \\delta &= \\arcsin{\\left(\\frac{f_\\textrm{heave}}{f_\\textrm{horizontal throw}}\\right)}\\\\ \\textrm{strike} &= |\\sigma_{\\textrm{Hmax}} - \\delta| \\end{split}\\end{equation} Knowing vertical throw (e.g. thermochronology petrology), fault strike (geomorphology), direction amount horizontal offset, dip fault follows: δ=|σHmax−strike|fheave=fhorizontal throw*sinδdip=arctan(fheavefvertical throw)\\begin{equation}\\begin{split} \\delta &= |\\sigma_{\\textrm{Hmax}} - \\textrm{strike}|\\\\ f_\\textrm{heave} &= f_\\textrm{horizontal throw} * \\sin{\\delta} \\\\ \\textrm{dip} &= \\arctan{\\left(\\frac{f_\\textrm{heave}}{f_\\textrm{vertical throw}}\\right)}  \\end{split}\\end{equation} Knowing vertical throw (e.g. thermochronology petrology) fault’s dip rake, horizontal offset, horizontal throw, net-slip follows:","code":""},{"path":"https://tobiste.github.io/structr/articles/D_Faults.html","id":"sec-tensors","dir":"Articles","previous_headings":"","what":"Fault displacement tensors","title":"4. Faults","text":"fault component vector describing direction length. instance, vector strike slip : fstrike slip→=(∥fstrike-slip∥00)\\begin{equation}   \\vec{f_\\text{strike slip}} = \\begin{pmatrix} \\lVert f_\\textrm{strike-slip}\\rVert \\\\ 0 \\\\ 0 \\end{pmatrix} \\end{equation}","code":""},{"path":"https://tobiste.github.io/structr/articles/D_Faults.html","id":"sec-tensors-netslip","dir":"Articles","previous_headings":"Fault displacement tensors","what":"Net slip vector","title":"4. Faults","text":"Net slip vector fnet→=(∥fstrike-slip∥∥fheave∥∥fvertical throw∥)\\begin{equation}   \\vec{f_\\text{net}} = \\begin{pmatrix} \\lVert f_\\textrm{strike-slip}\\rVert \\\\ \\lVert f_\\textrm{heave}\\rVert \\\\ \\lVert f_\\textrm{vertical throw}\\rVert \\end{pmatrix} \\end{equation}","code":"fault_displacements(strikeslip = 2, verticalthrow = -5, heave = 3)"},{"path":"https://tobiste.github.io/structr/articles/D_Faults.html","id":"sec-tensors-principal","dir":"Articles","previous_headings":"Fault displacement tensors","what":"Principal displacement tensor","title":"4. Faults","text":"Eigen values 𝖥ij\\mathsf{F}_{ij}; represented {f1→,f2→,f3→}\\{ \\vec{f_1}, \\vec{f_2}, \\vec{f_3} \\} referred heave, strike slip, vertical throw component, respectively. orthonormal vectors define orthogonal matrix, .e. principal displacement tensor 𝖥𝔽\\mathsf{F}_\\mathbb{F}: 𝖥𝔽=[∥fheave∥000∥fstrike-slip∥000∥fvertical throw∥]\\begin{equation}\\mathsf{F}_{\\mathbb{F}} = {\\begin{bmatrix} \\lVert f_\\textrm{heave}\\rVert & 0 & 0\\\\ 0 & \\lVert f_\\textrm{strike-slip}\\rVert & 0\\\\ 0 & 0 & \\lVert f_\\textrm{vertical throw}\\rVert\\end{bmatrix}}\\end{equation} tensor 𝖥\\mathsf{F} can also defined magnitudes fault displacements:","code":"Fu <- fault_tensor(s = 2, v = -5, h = 3) print(Fu) ##      [,1] [,2] [,3] ## [1,]    3    0    0 ## [2,]    0    2    0 ## [3,]    0    0   -5 ## attr(,\"class\") ## [1] \"matrix\"  \"array\"   \"ftensor\""},{"path":"https://tobiste.github.io/structr/articles/D_Faults.html","id":"sec-tensors-orientation","dir":"Articles","previous_headings":"Fault displacement tensors","what":"Orientation tensor","title":"4. Faults","text":"Fault orientation tensor defined fault plane’s location, orientation (dip direction dip angle), fault’s slip (direction magnitude): 𝖥ij=[f11f12f13f21f22f23f31f32f33]\\begin{equation}\\mathsf{F}_{ij} = {\\begin{bmatrix}f_{11} & f_{12} & f_{13}\\\\ f_{21} & f_{22} & f_{23}\\\\ f_{31} & f_{32} & f_{33}\\end{bmatrix}}\\end{equation}","code":"Fg <- fault_tensor(s = 2, v = -5, h = 3, dip_direction = 45) print(Fg) ##         [,1]      [,2] [,3] ## [1,] 2.12132  1.414214    0 ## [2,] 2.12132 -1.414214    0 ## [3,] 0.00000  0.000000   -5 ## attr(,\"class\") ## [1] \"matrix\"  \"array\"   \"ftensor\""},{"path":"https://tobiste.github.io/structr/articles/D_Faults.html","id":"from-principal-displacement-tensor-to-orientation-tensor","dir":"Articles","previous_headings":"Fault displacement tensors > Orientation tensor","what":"From Principal displacement tensor to Orientation tensor","title":"4. Faults","text":"Translation point origin 𝖥𝔽\\mathsf{F_\\mathbb{F}} point measurement rotate fault orientation 𝖥𝔽𝔾\\mathsf{F}_\\mathbb{FG}","code":"fault_tensor_decomposition(Fg, dip_direction = 45) ## $displacements ##           dip    delta     rake verticalthrow horizontalthrow heave  dipslip ## [1,] 300.9638 56.30993 71.06818            -5        3.605551     3 5.830952 ##      strikeslip  netslip ## [1,]          2 6.164414 ##  ## $fault ## Fault object (n = 1): ## dip_direction           dip       azimuth        plunge         sense  ##      45.00000     300.96376     258.69007      54.20424      -1.00000  ##  ## $strain_tensor ##      [,1] [,2] [,3] ## [1,]  3.0 -1.5 -1.5 ## [2,] -1.0  1.0 -1.0 ## [3,]  2.5  2.5 15.0 ##  ## $volumetric_strain ## [1] 19 ##  ## $shear_strain ## [1] 5.196152"},{"path":"https://tobiste.github.io/structr/articles/D_Faults.html","id":"stress-tensor","dir":"Articles","previous_headings":"Fault displacement tensors","what":"Stress tensor","title":"4. Faults","text":"continuum mechanics, Cauchy stress tensor σ\\sigma, true stress tensor, simply called stress tensor second order tensor named Augustin-Louis Cauchy. tensor consists nine components σij\\sigma_{ij} completely define state stress point inside material deformed state, placement, configuration. tensor relates unit-length direction vector n traction vector T(n)T^{(n)} across imaginary surface perpendicular n: T(n)=n*σ\\begin{equation} T^{(n)} = n * \\sigma \\end{equation} Tj(n)=ni*σij\\begin{equation} T^{(n)}_j = n_{}*\\sigma_{ij}\\end{equation}","code":""},{"path":"https://tobiste.github.io/structr/articles/D_Faults.html","id":"transformation-of-the-stress-tensor","dir":"Articles","previous_headings":"","what":"Transformation of the stress tensor","title":"4. Faults","text":"can shown stress tensor contravariant second order tensor, statement transforms change coordinate system. xix_i-system xi′x_i'-system, components σij\\sigma_{ij} initial system transformed components σij′\\sigma_{ij}' new system according tensor transformation rule (see Figure 2): σ=aimajnσmn\\sigma = a_{im} a_{jn} \\sigma_{mn} σ′=𝖠σ𝖠T\\sigma' = \\mathsf{} \\sigma \\mathsf{}^{T}, 𝖠\\mathsf{} rotation matrix components aija_{ij}. matrix form [σ′11σ′12σ′13σ′21σ′22σ′23σ′31σ′32σ′33]=[a11a12a13a21a22a23a31a32a33][σ11σ12σ13σ21σ22σ23σ31σ32σ33][a11a12a13a21a22a23a31a32a33]\\begin{equation} \\begin{bmatrix}  \\sigma'_{11} & \\sigma'_{12} & \\sigma'_{13} \\\\ \\sigma'_{21} & \\sigma'_{22} & \\sigma'_{23} \\\\ \\sigma'_{31} & \\sigma'_{32} & \\sigma'_{33} \\end{bmatrix} = \\begin{bmatrix}  a_{11} & a_{12} & a_{13} \\\\ a_{21} & a_{22} & a_{23} \\\\ a_{31} & a_{32} & a_{33} \\end{bmatrix} \\begin{bmatrix}  \\sigma_{11} & \\sigma_{12} & \\sigma_{13} \\\\ \\sigma_{21} & \\sigma_{22} & \\sigma_{23} \\\\ \\sigma_{31} & \\sigma_{32} & \\sigma_{33} \\end{bmatrix} \\begin{bmatrix}  a_{11} & a_{12} & a_{13} \\\\ a_{21} & a_{22} & a_{23} \\\\ a_{31} & a_{32} & a_{33} \\end{bmatrix} \\end{equation} Expanding matrix operation, simplifying terms using symmetry stress tensor, gives σ11′=a112σ11+a122σ22+a132σ33+2a11a12σ12+2a11a13σ13+2a12a13σ23\\sigma_{11}' = a_{11}^{2}\\sigma_{11} + a_{12}^{2}\\sigma_{22} + a_{13}^{2}\\sigma_{33} + 2a_{11}a_{12}\\sigma_{12} + 2a_{11}a_{13}\\sigma_{13} + 2a_{12}a_{13}\\sigma_{23}, σ22′=a212σ11+a222σ22+a232σ33+2a21a22σ12+2a21a23σ13+2a22a23σ23\\sigma _{22}'=a_{21}^{2}\\sigma _{11}+a_{22}^{2}\\sigma _{22}+a_{23}^{2}\\sigma _{33}+2a_{21}a_{22}\\sigma _{12}+2a_{21}a_{23}\\sigma _{13}+2a_{22}a_{23}\\sigma _{23}, σ33′=a312σ11+a322σ22+a332σ33+2a31a32σ12+2a31a33σ13+2a32a33σ23\\sigma _{33}'=a_{31}^{2}\\sigma _{11}+a_{32}^{2}\\sigma _{22}+a_{33}^{2}\\sigma _{33}+2a_{31}a_{32}\\sigma _{12}+2a_{31}a_{33}\\sigma _{13}+2a_{32}a_{33}\\sigma _{23}, σ12′=a11a21σ11+a12a22σ22+a13a23σ33+(a11a22+a12a21)σ12+(a12a23+a13a22)σ23+(a11a23+a13a21)σ13\\sigma _{12}'=a_{11}a_{21}\\sigma _{11}+a_{12}a_{22}\\sigma _{22}+a_{13}a_{23}\\sigma _{33}+(a_{11}a_{22}+a_{12}a_{21})\\sigma _{12}+(a_{12}a_{23}+a_{13}a_{22})\\sigma _{23}+(a_{11}a_{23}+a_{13}a_{21})\\sigma _{13}, σ23′=a21a31σ11+a22a32σ22+a23a33σ33+(a21a32+a22a31)σ12+(a22a33+a23a32)σ23+(a21a33+a23a31)σ13\\sigma _{23}'=a_{21}a_{31}\\sigma _{11}+a_{22}a_{32}\\sigma _{22}+a_{23}a_{33}\\sigma _{33}+(a_{21}a_{32}+a_{22}a_{31})\\sigma _{12}+(a_{22}a_{33}+a_{23}a_{32})\\sigma _{23}+(a_{21}a_{33}+a_{23}a_{31})\\sigma _{13}, σ13′=a11a31σ11+a12a32σ22+a13a33σ33+(a11a32+a12a31)σ12+(a12a33+a13a32)σ23+(a11a33+a13a31)σ13\\sigma _{13}'=a_{11}a_{31}\\sigma _{11}+a_{12}a_{32}\\sigma _{22}+a_{13}a_{33}\\sigma _{33}+(a_{11}a_{32}+a_{12}a_{31})\\sigma _{12}+(a_{12}a_{33}+a_{13}a_{32})\\sigma _{23}+(a_{11}a_{33}+a_{13}a_{31})\\sigma _{13}. Mohr circle stress graphical representation transformation stresses.","code":""},{"path":"https://tobiste.github.io/structr/articles/D_Faults.html","id":"normal-and-shear-stresses","dir":"Articles","previous_headings":"Transformation of the stress tensor","what":"Normal and shear stresses","title":"4. Faults","text":"magnitude normal stress component σn stress vector T(n)T(n) acting arbitrary plane normal unit vector n given point, terms components σij\\sigma_{ij} stress tensor σ\\sigma, dot product stress vector normal unit vector: σn→=𝐓(n)⋅n→=Ti(n)ni=σijninj.\\begin{equation} \\begin{split} \\sigma_\\vec{n} & = \\mathbf{T}^{(n)}\\cdot \\vec{n} \\\\  & = T^{(n)}_i n_i \\\\  & =\\sigma_{ij} n_i n_j. \\end{split} \\end{equation} magnitude shear stress component τn\\tau_n, acting orthogonal vector n, can found using Pythagorean theorem: τn=(T(𝐧))2−σn2=Ti(𝐧)Ti(𝐧)−σn2,\\begin{equation} \\begin{split} \\tau_{\\mathrm {n} }&={\\sqrt{\\left(T^{(\\mathbf{n})}\\right)^{2} - \\sigma_{\\mathrm{n}}^{2}}}\\\\ &={\\sqrt{T_{}^{(\\mathbf{n})}T_{}^{(\\mathbf{n})} - \\sigma_{\\mathrm{n}}^{2}}}, \\end{split} \\end{equation} (T(𝐧))2=Ti(𝐧)Ti(𝐧)=(σijnj)(σiknk)=σijσiknjnk.\\begin{equation}{\\displaystyle \\left(T^{(\\mathbf {n} )}\\right)^{2}=T_{}^{(\\mathbf {n} )}T_{}^{(\\mathbf {n} )}=\\left(\\sigma _{ij}n_{j}\\right)\\left(\\sigma _{ik}n_{k}\\right)=\\sigma _{ij}\\sigma _{ik}n_{j}n_{k}}.\\end{equation}","code":""},{"path":"https://tobiste.github.io/structr/articles/D_Faults.html","id":"principal-stress","dir":"Articles","previous_headings":"Transformation of the stress tensor","what":"Principal stress","title":"4. Faults","text":"every point stressed body least three planes, called principal planes, normal vectors n→\\vec{n}, called principal directions, corresponding stress vector perpendicular plane, .e., parallel direction normal vector n→\\vec{n}, normal shear stressesτn→{\\displaystyle \\tau _{\\vec{n}}}. three stresses normal principal planes called principal stresses. components σij\\sigma _{ij} stress tensor depend orientation coordinate system point consideration. However, stress tensor physical quantity , independent coordinate system chosen represent . certain invariants associated every tensor also independent coordinate system. example, vector simple tensor rank one. three dimensions, three components. value components depend coordinate system chosen represent vector, magnitude vector physical quantity (scalar) independent Cartesian coordinate system chosen represent vector (long normal). Similarly, every second rank tensor (stress strain tensors) three independent invariant quantities associated . One set invariants principal stresses stress tensor, just eigenvalues stress tensor. direction vectors principal directions eigenvectors. stress vector parallel normal unit vector n→\\vec{n} given : 𝐓(n)=λn→=𝛔nn→\\begin{equation}   \\mathbf{T}^{(n)} = \\lambda \\vec{n} = \\mathbf{\\sigma}_{n}\\vec{n} \\end{equation} λ\\lambda constant proportionality, particular case corresponds magnitudes σn\\sigma_{n} normal stress vectors principal stresses. coordinate system axes oriented principal directions implies normal stresses principal stresses stress tensor represented diagonal matrix: σij=[σ1000σ2000σ3]\\begin{equation}   \\sigma_{ij}={\\begin{bmatrix}\\sigma_{1}&0&0\\\\0&\\sigma_{2}&0\\\\0&0&\\sigma_{3}\\end{bmatrix}} \\end{equation} principal stresses can combined form stress invariants, I1I_{1}, I2I_{2}, I3I_{3}. first third invariant trace determinant respectively, stress tensor. Thus, I1=σ1+σ2+σ3I2=σ1σ2+σ2σ3+σ3σ1I3=σ1σ2σ3\\begin{equation}  \\begin{split}   I_{1} & = \\sigma_{1}+\\sigma_{2}+\\sigma_{3}\\\\   I_{2} & = \\sigma_{1}\\sigma_{2}+\\sigma_{2}\\sigma_{3}+\\sigma_{3}\\sigma_{1}\\\\   I_{3} & = \\sigma_{1}\\sigma_{2}\\sigma_{3}   \\end{split} \\end{equation} simplicity, principal coordinate system often useful considering state elastic medium particular point. Principal stresses often expressed following equation evaluating stresses x y directions axial bending stresses part. principal normal stresses can used calculate von Mises stress ultimately safety factor margin safety. σ1,σ2=σx+σy2±(σx−σy2)2+τxy2\\begin{equation}   \\sigma_{1},\\sigma_{2}={\\frac {\\sigma_{x}+\\sigma_{y}}{2}}\\pm {\\sqrt {\\left({\\frac {\\sigma_{x}-\\sigma_{y}}{2}}\\right)^{2}+\\tau_{xy}^{2}}} \\end{equation} Using just part equation square root equal maximum minimum shear stress plus minus. shown : τmax,τmin=±(σx−σy2)2+τxy2\\begin{equation}   \\tau_{\\max },\\tau_{\\min }=\\pm {\\sqrt {\\left({\\frac {\\sigma_{x}-\\sigma_{y}}{2}}\\right)^{2}+\\tau_{xy}^{2}}} \\end{equation}","code":""},{"path":"https://tobiste.github.io/structr/articles/D_Faults.html","id":"stress-deviator-tensor","dir":"Articles","previous_headings":"Transformation of the stress tensor","what":"Stress deviator tensor","title":"4. Faults","text":"stress tensor σij\\sigma_{ij} can expressed sum two stress tensors: mean hydrostatic stress tensor volumetric stress tensor mean normal stress tensor, πδij\\pi \\delta_{ij}, tends change volume stressed body; deviatoric component called stress deviator tensor, sijs_{ij}, tends distort . σij=sij+πδij,\\begin{equation}   \\sigma_{ij} = s_{ij} + \\pi \\delta_{ij}, \\end{equation} π\\pi mean stress given π=σkk3=σ11+σ22+σ333=13I1,\\begin{equation} \\pi ={\\frac {\\sigma_{kk}}{3}}={\\frac{\\sigma_{11}+\\sigma _{22}+\\sigma_{33}}{3}}={\\frac {1}{3}}I_{1}, \\end{equation} Pressure (pp) generally defined negative one-third trace stress tensor minus stress divergence velocity contributes , .e. p=λ∇⋅u→−π=λ∂uk∂xk−π=∑kλ∂uk∂xk−π,\\begin{equation} p=\\lambda \\,\\nabla \\cdot {\\vec {u}}-\\pi =\\lambda \\,{\\frac {\\partial u_{k}}{\\partial x_{k}}}-\\pi =\\sum_{k}\\lambda \\,{\\frac {\\partial u_{k}}{\\partial x_{k}}}-\\pi, \\end{equation} λ\\lambda proportionality constant, ∇\\nabla divergence operator, xkx_{k} k:th Cartesian coordinate, u→\\vec{u} velocity uku_{k} k:th Cartesian component u→\\vec{u}. deviatoric stress tensor can obtained subtracting hydrostatic stress tensor Cauchy stress tensor: sij=σij−σkk3δij,[s11s12s13s21s22s23s31s32s33]=[σ11σ12σ13σ21σ22σ23σ31σ32σ33]−[π000π000π]=[σ11−πσ12σ13σ21σ22−πσ23σ31σ32σ33−π].\\begin{equation} \\begin{split}  s_{ij} & = \\sigma_{ij} - {\\frac {\\sigma_{kk}}{3}}\\delta_{ij},\\\\  \\begin{bmatrix}s_{11}&s_{12}&s_{13}\\\\s_{21}&s_{22}&s_{23}\\\\s_{31}&s_{32}&s_{33}\\end{bmatrix} & = \\begin{bmatrix}\\sigma_{11}&\\sigma_{12}&\\sigma_{13}\\\\\\sigma_{21}&\\sigma_{22}&\\sigma_{23}\\\\\\sigma_{31}&\\sigma_{32}&\\sigma_{33}\\end{bmatrix} - \\begin{bmatrix}\\pi &0&0\\\\0&\\pi &0\\\\0&0&\\pi \\end{bmatrix}\\\\ & = \\begin{bmatrix}\\sigma_{11}-\\pi &\\sigma_{12}&\\sigma_{13}\\\\\\sigma_{21}&\\sigma_{22}-\\pi &\\sigma_{23}\\\\\\sigma_{31}&\\sigma_{32}&\\sigma_{33}-\\pi \\end{bmatrix}. \\end{split} \\end{equation}","code":""},{"path":"https://tobiste.github.io/structr/articles/D_Faults.html","id":"maximum-horizontal-stressref2","dir":"Articles","previous_headings":"Transformation of the stress tensor","what":"Maximum horizontal stress1","title":"4. Faults","text":"de fine vertical plane geographic coordinate system, 𝔾\\mathbb{G}, using unit normal vector, n→𝔾T=(nN,nE,nD)=(cosα,sinα,0)\\vec{n}^T_\\mathbb{G} = (n_N, n_E, n_D) = (\\cos\\alpha, \\sin\\alpha, 0), α\\alpha normal’s trend angle measured clockwise north plane’s strike α+π/2\\alpha+\\pi/2. represent n→\\vec{n} respect principal stress coordinate system using transformation matrix 𝖠𝕊𝔾=(σ→1g→1σ→1g→2σ→1g→3σ→2g→1σ→2g→2σ→2g→3σ→3g→1σ→3g→2σ→3g→3)\\begin{equation} \\mathsf{}_{\\mathbb{S}\\mathbb{G}} = \\begin{pmatrix} \\vec{\\sigma}_1 \\vec{g}_1 & \\vec{\\sigma}_1 \\vec{g}_2 & \\vec{\\sigma}_1 \\vec{g}_3 \\\\ \\vec{\\sigma}_2 \\vec{g}_1 & \\vec{\\sigma}_2 \\vec{g}_2 & \\vec{\\sigma}_2 \\vec{g}_3 \\\\ \\vec{\\sigma}_3 \\vec{g}_1 & \\vec{\\sigma}_3 \\vec{g}_2 & \\vec{\\sigma}_3 \\vec{g}_3 \\\\ \\end{pmatrix} \\end{equation} (.e. aij=σigja_{ij} = \\sigma_i g_j). σi=(σiN,σiE,σiD)\\sigma_i = (\\sigma_{}, \\sigma_{iE}, \\sigma_{iD}) unit vectors principal stress directions (principal stress coordinate system 𝕊\\mathbb{S} unit vectors {𝛔𝟏→,𝛔𝟐→,𝛔𝟑→}\\{ \\mathbf{\\vec{\\sigma_1}}, \\mathbf{\\vec{\\sigma_2}}, \\mathbf{\\vec{\\sigma_3}} \\}) respect geographic coordinate system (𝔾\\mathbb{G}), g1→=(1,0,0)\\vec{g_1} = (1,0,0), g2→=(0,1,0)\\vec{g_2} =(0,1,0) g3→=(0,0,1)\\vec{g_3} = (0,0,1) basis vectors geographic coordinate system. normal vector expressed respect principal stress system 𝐧→𝕊=𝖠𝕊𝔾𝐧→𝔾=(σ1NnN+σ1EnEσ2NnN+σ2EnEσ3NnN+σ3EnE),\\begin{equation} \\vec{\\mathbf{n}}_\\mathbb{S} = \\mathsf{}_{\\mathbb{S}\\mathbb{G}}\\vec{\\mathbf{n}}_\\mathbb{G} = \\begin{pmatrix} \\sigma_{1N}n_N + \\sigma_{1E}n_E\\\\ \\sigma_{2N}n_N + \\sigma_{2E}n_E\\\\ \\sigma_{3N}n_N + \\sigma_{3E}n_E \\end{pmatrix}, \\end{equation} , example, σ1N\\sigma_{1N} north component σ→1\\vec{\\sigma}_1 unit vector. principal coordinate system, stress tensor diagonal 𝖲𝕊=(∥σ1∥000∥σ2∥000∥σ3∥)\\begin{equation} \\mathsf{S}_\\mathbb{S} =  \\begin{pmatrix}  \\lVert \\sigma_1 \\rVert & 0 & 0 \\\\ 0 & \\lVert\\sigma_2\\rVert & 0 \\\\ 0 & 0 & \\lVert\\sigma_3\\rVert \\end{pmatrix} \\end{equation} normal stress acting vertical plane interest σn=(𝐧→𝕊T𝖲𝕊𝐧→𝕊)=[∥σ1∥(σ1NnN+σ1EnE)2+∥σ2∥(σ2NnN+σ2EnE)2+∥σ3∥(σ3NnN+σ3EnE)2]𝐧→𝕊=∥σn∥𝐧→𝕊.\\begin{equation} \\begin{split} \\sigma_n &= \\left( \\mathbf{\\vec{n}}^T_\\mathbb{S} \\mathsf{S}_\\mathbb{S} \\mathbf{\\vec{n}}_\\mathbb{S} \\right)\\\\  &= \\left[    \\lVert\\sigma_1\\rVert ( \\sigma_{1N}n_N + \\sigma_{1E}n_E )^2 +   \\lVert\\sigma_2\\rVert ( \\sigma_{2N}n_N + \\sigma_{2E}n_E )^2 +  \\lVert\\sigma_3\\rVert (\\sigma_{3N}n_N + \\sigma_{3E}n_E)^2   \\right] \\mathbf{\\vec{n}}_{\\mathbb{S}}\\\\  &= \\lVert\\sigma_n\\rVert \\mathbf{\\vec{n}}_\\mathbb{S}. \\end{split} \\end{equation} normal stress corresponds horizontal stress direction 𝐧→\\mathbf{\\vec{n}}. can find direction maximum horizontal stress analytically differentiating last equation respect α\\alpha. dσndα=[∥σ1∥(σ1E2−σ1N2)+∥σ2∥(σ2E2−σ2N2)+∥σ3∥(σ3E2−σ3N2)]sin2α+2[∥σ1∥σ1Nσ1E+∥σ2∥σ2Nσ2E+∥σ3∥σ3Nσ3E]cos2α.\\begin{equation} \\frac{d\\sigma_n}{d\\alpha} = \\left[ \\lVert\\sigma_1\\rVert ( \\sigma_{1E}^2 - \\sigma_{1N}^2 ) +  \\lVert\\sigma_2\\rVert ( \\sigma_{2E}^2 - \\sigma_{2N}^2 ) + \\lVert\\sigma_3\\rVert ( \\sigma_{3E}^2 - \\sigma_{3N}^2 ) \\right] \\sin{2\\alpha} +  2 \\left[\\lVert\\sigma_1\\rVert \\sigma_{1N} \\sigma_{1E} + \\lVert\\sigma_2\\rVert \\sigma_{2N} \\sigma_{2E} + \\lVert\\sigma_3\\rVert \\sigma_{3N} \\sigma_{3E} \\right] \\cos{2\\alpha}. \\end{equation} Table 1 Summary conditions denominator eq. (11) equals zero. αH\\alpha_H α1\\alpha_1 denote trends axis maximum horizontal stress, σH\\sigma_H, principal axis maximum compressive stress, 𝛔𝟏→\\mathbf{\\vec{\\sigma_1}}, respectively. general (cf. Table 1), σn\\sigma_n one maximum one minimum interval 0≤α≤π0 \\leq \\alpha \\leq \\pi setting derivative last equation zero, find stationary points: tan2α=2(∥σ1∥σ1Nσ1E+∥σ2∥σ2Nσ2E+∥σ3∥σ3Nσ3E)∥σ1∥(σ1E2−σ1N2)+∥σ2∥(σ2E2−σ2N2)+∥σ3∥(σ3E2−σ3N2).\\begin{equation} \\tan{2\\alpha} = \\frac{ 2 ( \\lVert\\sigma_1\\rVert \\sigma_{1N} \\sigma_{1E} + \\lVert\\sigma_2\\rVert \\sigma_{2N} \\sigma_{2E} + \\lVert\\sigma_3\\rVert \\sigma_{3N} \\sigma_{3E} )}{\\lVert\\sigma_1\\rVert ( \\sigma_{1E}^2 - \\sigma_{1N}^2 ) +  \\lVert\\sigma_2\\rVert ( \\sigma_{2E}^2 - \\sigma_{2N}^2 ) + \\lVert\\sigma_3\\rVert ( \\sigma_{3E}^2 - \\sigma_{3N}^2 )}. \\end{equation} Using second derivative σn\\sigma_n respect α\\alpha can determine whether σn(α)\\sigma_n (\\alpha) yields maximum minimum value, identify σH\\sigma_H trend (αH\\alpha_H) accordingly: αH={αif ∥σn(α)∥ maximumα+π/2if ∥σn(α)∥ minimum.\\begin{equation} \\alpha_H =  \\begin{cases} \\alpha & \\text{$\\lVert\\sigma_n (\\alpha)\\rVert$ maximum} \\\\ \\alpha + \\pi/2 & \\text{$\\lVert\\sigma_n (\\alpha)\\rVert$ minimum}  \\end{cases}. \\end{equation}","code":""},{"path":"https://tobiste.github.io/structr/articles/D_Faults.html","id":"code","dir":"Articles","previous_headings":"Transformation of the stress tensor > Maximum horizontal stress1","what":"Code","title":"4. Faults","text":"Define orientation principle stress axes: get S2 - perpendicular S1 S3, calculate cross-product two vectors: azimuth SHmax given stress ratio R = 1: several stress ratios:","code":"S1 <- Line(250.89, 70.07) S3 <- Line(103.01, 17.07) S2 <- crossprod(S3, S1) SH(S1, S2, S3, R = 1) # in degrees ## [1] 70.89 R <- seq(0, 1, .1) cbind(R, SH = SH(S1, S2, S3, R = R)) ##         R       SH ##  [1,] 0.0 13.01021 ##  [2,] 0.1 13.37695 ##  [3,] 0.2 13.84162 ##  [4,] 0.3 14.44908 ##  [5,] 0.4 15.27621 ##  [6,] 0.5 16.46586 ##  [7,] 0.6 18.31445 ##  [8,] 0.7 21.53704 ##  [9,] 0.8 28.23884 ## [10,] 0.9 45.01043 ## [11,] 1.0 70.89000"},{"path":"https://tobiste.github.io/structr/articles/D_Faults.html","id":"mountain-building-and-earthquakes-some-simple-geometrical-calculations","dir":"Articles","previous_headings":"","what":"Mountain building and earthquakes: Some simple geometrical calculations","title":"4. Faults","text":"Suppose wish compute long take 3000 meters (roughly 10,000 feet) uplift occur. Clearly, time requires equal uplift (v=fvertical throwv=f_{\\text{vertical throw}}) divided rate uplift occurs v̇=δfvertical throw)δt\\dot{v} = \\frac{\\delta f_{\\text{vertical throw})}}{\\delta t}. tv=|v|v̇\\begin{equation} t_{\\text{v}} = \\frac{|v|}{\\dot{v}} \\end{equation} compute horizontal strain ε\\varepsilon accumulates known rate (ε̇=5m/200ys\\dot{\\varepsilon} = 5\\,\\text{m} / 200\\,\\text{ys} example) translates vertical uplift rate v̇\\dot{v}, note related tangent dip fault (β\\beta) follows v̇=ḣ*tanβ\\begin{equation}   \\dot{v} = \\dot{h} * \\tan{\\beta} \\end{equation} ḣ=dearthquakeΔtearthquake\\begin{equation}  \\dot{h} = \\frac{d_\\text{earthquake}}{\\Delta t_\\text{earthquake}} \\end{equation} dearthquaked_\\text{earthquake} slip average earthquake; Δtearthquake\\Delta t_\\text{earthquake} earthquake recurrence interval. Suppose uplift occurs along shallow fault dipping 10 degrees horizontal. , tv=3000m5m/200yr*tan10∘=680000yr\\begin{equation}  t_{v} = \\frac{3\\,000\\,\\text{m}}{5\\,\\text{m} / 200\\,\\text{yr}} * \\tan{10^{\\circ}} = 680\\,000\\,\\text{yr} \\end{equation} steeper fault (30∘30^{\\circ}), uplift 3000m3\\,000 \\text{m} occurs even rapidly, 210000yr210\\,000\\,\\text{yr}. Thus, rapid convergence rates even shallow fault dips, significant topographic relief can appear several hundred thousand years - geological instant! course, calculations ignore important effects erosion downward flexure lithosphere load growing mountain, slow rate mountain can grow. shall consider effects future lectures.","code":""},{"path":"https://tobiste.github.io/structr/articles/D_Faults.html","id":"abbreviations-and-symbols","dir":"Articles","previous_headings":"","what":"Abbreviations and symbols","title":"4. Faults","text":"Two coordinate systems importance : principal stress coordinate system, 𝕊\\mathbb{S}, unit vectors {σ1→,σ2→,σ3→}\\{ \\vec{\\sigma_1},\\vec{\\sigma_2},\\vec{\\sigma_3} \\} aligned along eigenvectors whose eigenvalues {∥σ1∥,∥σ2∥,∥σ3∥}\\{ \\lVert\\sigma_1\\rVert,\\lVert\\sigma_2\\rVert, \\lVert\\sigma_3\\rVert  \\}, respectively; geographic coordinate system, 𝔾\\mathbb{G}, unit vectors {g1→,g2→,g3→}\\{\\vec{g_1}, \\vec{g_2}, \\vec{g_3} \\} aligned north, east directions, respectively. paper, matrices represented sans serif upper-case letters (e.g. 𝖲\\mathsf{S}), vectors bold lower-case letters (e.g. 𝐧\\mathbf{n}), vector magnitudes upper-case italics (e.g. Sn=∥𝐬n∥S_n = \\lVert \\mathbf{s}_n \\rVert; Table 2). components matrices vectors represented, example, sijs_{ij} nin_i, respectively, caret subscript (e.g. 𝐬𝐢→\\mathbf{\\vec{s_i}} ) used together denote ith unit basis vector coordinate system (=1,2,3i = 1, 2, 3). Vector orientations expressed terms trend plunge angles trend/plunge (e.g. 135/25). convenience, use upper-case bold symbols two frequently used parameters, namely vectors maximum horizontal stress SHS_H proxy SPS_P. Table 2 Mathematical symbols. Indices ii jj span range 1, 2, 3, arrow (.→\\vec{.}) denotes unit vector.","code":""},{"path":[]},{"path":"https://tobiste.github.io/structr/articles/G_Strain_Analysis.html","id":"strain-analysis-fabric-analysis","dir":"Articles","previous_headings":"","what":"Strain analysis (fabric analysis)","title":"7. Strain and Vorticity Analysis","text":"Import R-phi data elliptical strain markers mean mean strain ellipse (shape orientation) deformed elliptical objects strain markers can calculated using mean shape matrix eigenvalues (Shimamoto Ikeda, 1976): {structr} algorithm also calculates bootstrapped 95% confidence interval. visualize distribution strain values, can calculate densities Rf-Phi space plot Rf/phi diagram:  Equidistant polar plot:","code":"data(ramsay) head(ramsay) #>         R   phi #> [1,] 1.24 35.96 #> [2,] 1.52 27.59 #> [3,] 1.33 36.91 #> [4,] 1.78 27.31 #> [5,] 1.51 17.73 #> [6,] 1.70 24.45 ramsay_mean <- mean_strain_ellipse(r = ramsay[, 1], phi = ramsay[, 2]) print(ramsay_mean) #> $R #> [1] 1.628138 #>  #> $phi #> [1] 25.73632 #>  #> $R_CI #> [1] 1.59275 1.66359 #>  #> $phi_CI #> [1] 24.71905 26.75180 Rphi_plot(r = ramsay[, 1], phi = ramsay[, 2]) Rphi_polar_plot(ramsay[, 1], ramsay[, 2], proj = \"eqd\")"},{"path":"https://tobiste.github.io/structr/articles/G_Strain_Analysis.html","id":"d-strain","dir":"Articles","previous_headings":"","what":"3D Strain","title":"7. Strain and Vorticity Analysis","text":"Three-dimensional strain data expressed ratio magnitudes 3 principal strain axes strain ellipsoid, X≥Y≥ZX \\geq Y \\geq Z. can represented Flinn diagram (linear logarithmic axes)…  Hsü diagram using natural octahedral unit strain ϵ‾s\\bar{\\epsilon}_s Lode parameter ν\\nu","code":"data(\"holst\") R_XY <- holst[, \"R_XY\"] R_YZ <- holst[, \"R_YZ\"]  flinn_plot(R_XY, R_YZ, log = TRUE, col = \"#B63679\", pch = 16) hsu_plot(R_XY, R_YZ, col = \"#B63679\", pch = 16)"},{"path":"https://tobiste.github.io/structr/articles/G_Strain_Analysis.html","id":"vorticity-analysis","dir":"Articles","previous_headings":"","what":"Vorticity analysis","title":"7. Strain and Vorticity Analysis","text":"rigid grain net (Jessup et al. 2007) plots distribution strain ratio (R) orientation (phi) porphyroclast theoretical distribution tailless clasts. plot estimates critical threshold Rc marking transition stable-sink position infinitely rotating porphyroclasts. threshold can interpreted mean kinematic vorticity number. Rc estimated using bootstrap method described Stephan et al. (2025).","code":"# assuming the mean orientation resembles the foliation theta <- tectonicr::circular_mean(ramsay[, 2]) - ramsay[, 2]  RGN_plot(r = ramsay[, 1], theta = theta, col = \"#B63679\") title(main = \"Rigid Grain Net\")"},{"path":"https://tobiste.github.io/structr/articles/H_Import.html","id":"general","dir":"Articles","previous_headings":"","what":"General","title":"8. Import data","text":"Data can imported already R implemented functions read.table(), read.csv() packages functions (e.g. {readr} {data.table}). Just make sure import produces matrix data.frame like object measurement stored row, columns representing dip directions, dip angles, plunge, etc. example .txt file tab-separated may look like : import file like imports tab-separated file \"data.frame\" object first column representing row names, two columns headers table. Say measurements represent plane measurements (e.g. bedding fault plane orientation), just need coerce data.frame \"Plane\" object: want \"Line\" object, coerce data.frame using .Line(). \"Pair\" (line--plane) \"Fault\" (line--plane sense motion) objects, ’ll need four five-column table, respectively, representing dip directions, dip angle, trend, plunge sense measurements. use .Pair() .Fault() parse object {structr}. Note dip direction preferred notation plane measurements {structr}. convert right-hand-rule strike measurements dip directions, can simply use rhr2dd() function column:","code":"imported_data <- read.table(   \"path/to/my/file.xt\",   header = TRUE,   sep = \"\",   row.names = 1 ) my_planes <- as.Plane(imported_data) imported_data[, 1] <- rhr2dd(imported_data[, 1]) as.Plane(imported_data)"},{"path":"https://tobiste.github.io/structr/articles/H_Import.html","id":"strabospot","dir":"Articles","previous_headings":"","what":"StraboSpot","title":"8. Import data","text":"package {structr} can import collected field data Strabospot project. best way import .json file database StraboSpot project. Go field data StraboField Data > scroll project > click Options… > Download Project Strabo JSON Format Now can import downloaded file via read_strabo_JSON(): import function produces list object meta data (data), geographic locations (spots), used tags (tags), plane (planes) line measurements (lines) already converted {structr} data objects. Additional descriptions comments, meta data (data) also contains information dataset name time measurement. IMPORTANT: meta data plane line measurements share row indices. Thus, planes lines identical row indices measured simultaneously (e.g. fault). import allows connection simultaneously measured plane lines (faults striae) preserved. Unfortunately, export StraboSpot field data .csv .xls file, connection lost… Alternatively, function read_strabo_xls() read_strabo_mobile() provide import .xls character-separated table files (e.g. .csv .txt).","code":"strabo_data <- read_strabo_JSON(\"path/to/my/file.json\")"},{"path":"https://tobiste.github.io/structr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Tobias Stephan. Author, maintainer.","code":""},{"path":"https://tobiste.github.io/structr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Stephan T (2025). structr: Structural Geology R. R package version 0.2.2, https://tobiste.github.io/structr/.","code":"@Manual{,   title = {structr: Structural Geology in R},   author = {Tobias Stephan},   year = {2025},   note = {R package version 0.2.2},   url = {https://tobiste.github.io/structr/}, }"},{"path":"https://tobiste.github.io/structr/index.html","id":"structr","dir":"","previous_headings":"","what":"Structural Geology in R","title":"Structural Geology in R","text":"structr free open-source package R provides tools structural geology. can analyze visualize orientation data structural geology (including, stereographic projections, contouring, fabric plots, statistics), cluster analysis orientation data, analyze stress (including visualization magnitudes stress Mohr circle extracting maximum horizontal stress 3D stress tensor), reconstruct orientation structures oriented drillcores transforming α, β, γ angles, calculate fault displacement components, reconstruct orientation magnitudes using fault-slip inversion (Paleostress analysis), strain analysis (Rf/ϕ), contouring unit hyperboloid, Fry plots Hsu plots perform vorticity analysis using Rigid Grain Net method, directly import field data StraboSpot. {structr} package structures 3D. analyzing orientations 2D (statistics, rose diagrams, etc.), check tectonicr package!","code":""},{"path":"https://tobiste.github.io/structr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Structural Geology in R","text":"can install development version structr GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"tobiste/structr\")"},{"path":"https://tobiste.github.io/structr/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Structural Geology in R","text":"basic example shows import data plot stereographic equal-area projections.","code":"library(structr) library(ggplot2) library(mapproj)  data(example_planes_df) planes <- Plane(example_planes_df$dipdir, example_planes_df$dip)  fabric <- or_shape_params(planes)$Vollmer[\"D\"]  ggstereo() +   geom_contourf_stereo(gg(planes)) +   geom_point(data = gg(planes), aes(x, y), color = \"grey\", shape = 21) +   scale_fill_viridis_d(option = \"F\") +   labs(     subtitle = \"Example data\",     title = \"Density contour plot\",     fill = \"Multiples of\\nvon Mises-Fisher\\ndistribution\",     caption = paste0(\"Equal area, lower hemisphere projection | N: \", nrow(planes), \" | Fabric strength: \", round(fabric, 2))   )"},{"path":"https://tobiste.github.io/structr/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Structural Geology in R","text":"detailed documentation can found https://tobiste.github.io/structr/","code":""},{"path":"https://tobiste.github.io/structr/index.html","id":"author","dir":"","previous_headings":"","what":"Author","title":"Structural Geology in R","text":"Tobias Stephan (tstephan@lakeheadu.ca)","code":""},{"path":"https://tobiste.github.io/structr/index.html","id":"feedback-issues-and-contributions","dir":"","previous_headings":"","what":"Feedback, issues, and contributions","title":"Structural Geology in R","text":"welcome feedback, suggestions, issues, contributions! found bug, please file minimal code reproduce issue.","code":""},{"path":"https://tobiste.github.io/structr/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Structural Geology in R","text":"MIT License","code":""},{"path":"https://tobiste.github.io/structr/reference/Fault_components.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract components of fault object — Fault_components","title":"Extract components of fault object — Fault_components","text":"Fault_plane() extracts orientation fault plane, Fault_slip() extracts orientation slip vector, Fault_rake() extracts rake fault, .e. angle fault slip vector fault strike.","code":""},{"path":"https://tobiste.github.io/structr/reference/Fault_components.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract components of fault object — Fault_components","text":"","code":"Fault_rake(x)  Fault_slip(x)  Fault_plane(x)"},{"path":"https://tobiste.github.io/structr/reference/Fault_components.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract components of fault object — Fault_components","text":"x object class \"Fault\"","code":""},{"path":"https://tobiste.github.io/structr/reference/Fault_components.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract components of fault object — Fault_components","text":"numeric. plane, line angle degrees, respectively","code":""},{"path":"https://tobiste.github.io/structr/reference/Fault_components.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract components of fault object — Fault_components","text":"","code":"f <- Fault(c(120, 120, 100), c(60, 60, 50), c(110, 25, 30), c(58, 9, 23), c(1, -1, 1)) Fault_plane(f) #> Plane object (n = 3): #>      dip_direction dip #> [1,]           120  60 #> [2,]           120  60 #> [3,]           100  50 Fault_slip(f) #> Line object (n = 3): #>      azimuth plunge #> [1,]     110     58 #> [2,]      25      9 #> [3,]      30     23 Fault_rake(f) #> [1]  84.72020 -10.28562  30.11825"},{"path":"https://tobiste.github.io/structr/reference/Mohr_calc.html","id":null,"dir":"Reference","previous_headings":"","what":"Mohr circle parameters — Mohr_calc","title":"Mohr circle parameters — Mohr_calc","text":"calculates parameters Mohr circle","code":""},{"path":"https://tobiste.github.io/structr/reference/Mohr_calc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mohr circle parameters — Mohr_calc","text":"","code":"Mohr_calc(   sigma_x = NA,   sigma_z = NA,   tau_xz = NA,   sigma1 = NA,   sigma3 = NA,   theta = seq(from = 0, to = 180, by = 1) )"},{"path":"https://tobiste.github.io/structr/reference/Mohr_calc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mohr circle parameters — Mohr_calc","text":"sigma_x numeric. Magnitude normal stress acting horizontal direction sigma_z numeric. Magnitude normal stress acting vertical direction tau_xz numeric. Magnitude shear stress acting plane \"sigma_x\" sigma1 numeric. Magnitude major principal stress sigma3 numeric. Magnitude minor principal stress theta numeric. Angles (degrees); defaults 0-180 increments 1","code":""},{"path":"https://tobiste.github.io/structr/reference/Mohr_calc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mohr circle parameters — Mohr_calc","text":"five-element list containing \"mean\" center Mohr circle, .e. mean stress \"deviatoric\" radius Mohr circle, .e. deviatoric stress \"sigma\" vector normal stresses Mohr circle \"tau\" vector shear stresses Mohr circle \"theta\" vector angles (degrees)","code":""},{"path":"https://tobiste.github.io/structr/reference/Mohr_calc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Mohr circle parameters — Mohr_calc","text":"theta entered conjunction \"sigma_x\", \"sigma_z\", \"tau_xz\", interpreted angle inclination horizontal.  \"theta\" entered conjunction principal stresses, interpreted angle inclination major principal plane.","code":""},{"path":"https://tobiste.github.io/structr/reference/Mohr_calc.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Mohr circle parameters — Mohr_calc","text":"One following two sets data must entered \"sigma_x\", \"sigma_z\", \"tau_xz\" \"sigma1\", \"sigma3\"","code":""},{"path":[]},{"path":"https://tobiste.github.io/structr/reference/Mohr_calc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Mohr circle parameters — Mohr_calc","text":"Kyle Elmy Jim Kaklamanos","code":""},{"path":"https://tobiste.github.io/structr/reference/Mohr_calc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mohr circle parameters — Mohr_calc","text":"","code":"Mohr_calc(sigma_x = 80, sigma_z = 120, tau_xz = 20) #> $mean #> [1] 100 #>  #> $deviatoric #> [1] 28.28427 #>  #> $normal #>   [1] 120.00000 120.68581 121.34641 121.98101 122.58882 123.16912 123.72119 #>   [8] 124.24435 124.73798 125.20147 125.63426 126.03581 126.40564 126.74330 #>  [15] 127.04838 127.32051 127.55935 127.76461 127.93604 128.07344 128.17664 #>  [22] 128.24551 128.27996 128.27996 128.24551 128.17664 128.07344 127.93604 #>  [29] 127.76461 127.55935 127.32051 127.04838 126.74330 126.40564 126.03581 #>  [36] 125.63426 125.20147 124.73798 124.24435 123.72119 123.16912 122.58882 #>  [43] 121.98101 121.34641 120.68581 120.00000 119.28983 118.55615 117.79987 #>  [50] 117.02190 116.22319 115.40472 114.56748 113.71249 112.84079 111.95345 #>  [57] 111.05155 110.13618 109.20846 108.26952 107.32051 106.36258 105.39689 #>  [64] 104.42463 103.44699 102.46514 101.48028 100.49363  99.50637  98.51972 #>  [71]  97.53486  96.55301  95.57537  94.60311  93.63742  92.67949  91.73048 #>  [78]  90.79154  89.86382  88.94845  88.04655  87.15921  86.28751  85.43252 #>  [85]  84.59528  83.77681  82.97810  82.20013  81.44385  80.71017  80.00000 #>  [92]  79.31419  78.65359  78.01899  77.41118  76.83088  76.27881  75.75565 #>  [99]  75.26202  74.79853  74.36574  73.96419  73.59436  73.25670  72.95162 #> [106]  72.67949  72.44065  72.23539  72.06396  71.92656  71.82336  71.75449 #> [113]  71.72004  71.72004  71.75449  71.82336  71.92656  72.06396  72.23539 #> [120]  72.44065  72.67949  72.95162  73.25670  73.59436  73.96419  74.36574 #> [127]  74.79853  75.26202  75.75565  76.27881  76.83088  77.41118  78.01899 #> [134]  78.65359  79.31419  80.00000  80.71017  81.44385  82.20013  82.97810 #> [141]  83.77681  84.59528  85.43252  86.28751  87.15921  88.04655  88.94845 #> [148]  89.86382  90.79154  91.73048  92.67949  93.63742  94.60311  95.57537 #> [155]  96.55301  97.53486  98.51972  99.50637 100.49363 101.48028 102.46514 #> [162] 103.44699 104.42463 105.39689 106.36258 107.32051 108.26952 109.20846 #> [169] 110.13618 111.05155 111.95345 112.84079 113.71249 114.56748 115.40472 #> [176] 116.22319 117.02190 117.79987 118.55615 119.28983 120.00000 #>  #> $shear #>   [1] -20.0000000 -19.2898266 -18.5561515 -17.7998686 -17.0218994 -16.2231915 #>   [7] -15.4047182 -14.5674766 -13.7124868 -12.8407904 -11.9534495 -11.0515452 #>  [13] -10.1361763  -9.2084580  -8.2695206  -7.3205081  -6.3625766  -5.3968934 #>  [19]  -4.4246348  -3.4469856  -2.4651367  -1.4802844  -0.4936286   0.4936286 #>  [25]   1.4802844   2.4651367   3.4469856   4.4246348   5.3968934   6.3625766 #>  [31]   7.3205081   8.2695206   9.2084580  10.1361763  11.0515452  11.9534495 #>  [37]  12.8407904  13.7124868  14.5674766  15.4047182  16.2231915  17.0218994 #>  [43]  17.7998686  18.5561515  19.2898266  20.0000000  20.6858065  21.3464105 #>  [49]  21.9810072  22.5888234  23.1691186  23.7211858  24.2443524  24.7379810 #>  [55]  25.2014702  25.6342553  26.0358090  26.4056420  26.7433039  27.0483831 #>  [61]  27.3205081  27.5593472  27.7646095  27.9360449  28.0734446  28.1766411 #>  [67]  28.2455086  28.2799634  28.2799634  28.2455086  28.1766411  28.0734446 #>  [73]  27.9360449  27.7646095  27.5593472  27.3205081  27.0483831  26.7433039 #>  [79]  26.4056420  26.0358090  25.6342553  25.2014702  24.7379810  24.2443524 #>  [85]  23.7211858  23.1691186  22.5888234  21.9810072  21.3464105  20.6858065 #>  [91]  20.0000000  19.2898266  18.5561515  17.7998686  17.0218994  16.2231915 #>  [97]  15.4047182  14.5674766  13.7124868  12.8407904  11.9534495  11.0515452 #> [103]  10.1361763   9.2084580   8.2695206   7.3205081   6.3625766   5.3968934 #> [109]   4.4246348   3.4469856   2.4651367   1.4802844   0.4936286  -0.4936286 #> [115]  -1.4802844  -2.4651367  -3.4469856  -4.4246348  -5.3968934  -6.3625766 #> [121]  -7.3205081  -8.2695206  -9.2084580 -10.1361763 -11.0515452 -11.9534495 #> [127] -12.8407904 -13.7124868 -14.5674766 -15.4047182 -16.2231915 -17.0218994 #> [133] -17.7998686 -18.5561515 -19.2898266 -20.0000000 -20.6858065 -21.3464105 #> [139] -21.9810072 -22.5888234 -23.1691186 -23.7211858 -24.2443524 -24.7379810 #> [145] -25.2014702 -25.6342553 -26.0358090 -26.4056420 -26.7433039 -27.0483831 #> [151] -27.3205081 -27.5593472 -27.7646095 -27.9360449 -28.0734446 -28.1766411 #> [157] -28.2455086 -28.2799634 -28.2799634 -28.2455086 -28.1766411 -28.0734446 #> [163] -27.9360449 -27.7646095 -27.5593472 -27.3205081 -27.0483831 -26.7433039 #> [169] -26.4056420 -26.0358090 -25.6342553 -25.2014702 -24.7379810 -24.2443524 #> [175] -23.7211858 -23.1691186 -22.5888234 -21.9810072 -21.3464105 -20.6858065 #> [181] -20.0000000 #>  #> $theta #>   [1]   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17 #>  [19]  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35 #>  [37]  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53 #>  [55]  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71 #>  [73]  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89 #>  [91]  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 106 107 #> [109] 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 #> [127] 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 #> [145] 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 #> [163] 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 #> [181] 180 #>"},{"path":"https://tobiste.github.io/structr/reference/Mohr_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Mohr Circle plot — Mohr_plot","title":"Mohr Circle plot — Mohr_plot","text":"plots Mohr Circle","code":""},{"path":"https://tobiste.github.io/structr/reference/Mohr_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mohr Circle plot — Mohr_plot","text":"","code":"Mohr_plot(   sigma_x = NA,   sigma_z = NA,   tau_xz = NA,   sigma1 = NA,   sigma3 = NA,   unit = \"MPa\",   col = \"black\",   n = 512,   ... )"},{"path":"https://tobiste.github.io/structr/reference/Mohr_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mohr Circle plot — Mohr_plot","text":"sigma_x numeric. Magnitude normal stress acting horizontal direction sigma_z numeric. Magnitude normal stress acting vertical direction tau_xz numeric. Magnitude shear stress acting plane \"sigma_x\" sigma1 numeric. Magnitude major principal stress sigma3 numeric. Magnitude minor principal stress unit character. unit used magnitude stress (\"MPa\" default). col color Mohr circle. n integer. Resolution given amount points along generated path representing full Mohr circle (512 default). ... optional graphical parameters.","code":""},{"path":"https://tobiste.github.io/structr/reference/Mohr_plot.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Mohr Circle plot — Mohr_plot","text":"One following two sets data must entered \"sigma_x\", \"sigma_z\", \"tau_xz\" \"sigma1\", \"sigma3\"","code":""},{"path":[]},{"path":"https://tobiste.github.io/structr/reference/Mohr_plot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Mohr Circle plot — Mohr_plot","text":"Kyle Elmy Jim Kaklamanos","code":""},{"path":"https://tobiste.github.io/structr/reference/Mohr_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mohr Circle plot — Mohr_plot","text":"","code":"Mohr_plot(sigma_x = 80, sigma_z = 120, unit = \"kPa\", tau_xz = 20, col = \"#B63679\", lwd = 2)  Mohr_plot(sigma1 = 1025, sigma3 = 250, col = \"#B63679\", lwd = 2)"},{"path":"https://tobiste.github.io/structr/reference/PR_stress.html","id":null,"dir":"Reference","previous_headings":"","what":"Principal stresses from 2D stress components — PR_stress","title":"Principal stresses from 2D stress components — PR_stress","text":"Determines principal stresses orientations stress components $$sigma_x$$, $$\\sigma_y$$, $$\\tau_{xy}$$.","code":""},{"path":"https://tobiste.github.io/structr/reference/PR_stress.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Principal stresses from 2D stress components — PR_stress","text":"","code":"PR_stress(sigma_x, sigma_y, tau_xy)"},{"path":"https://tobiste.github.io/structr/reference/PR_stress.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Principal stresses from 2D stress components — PR_stress","text":"sigma_x numeric. Magnitude normal stress acting horizontal direction sigma_y numeric. Magnitude normal stress acting plane facing Y direction ($$\\sigma_y$$). tau_xy numeric. Magnitude shear stress acting planes facing X Y ($$\\tau_{xy}$$).","code":""},{"path":"https://tobiste.github.io/structr/reference/PR_stress.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Principal stresses from 2D stress components — PR_stress","text":"angle degrees","code":""},{"path":"https://tobiste.github.io/structr/reference/PR_stress.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Principal stresses from 2D stress components — PR_stress","text":"Richard J. Lisle (1999)","code":""},{"path":"https://tobiste.github.io/structr/reference/PR_stress.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Principal stresses from 2D stress components — PR_stress","text":"","code":"PR_stress(sigma_x = 80, sigma_y = 120, tau_xy = 20) #>     sigma1   sigma2 theta #> 1 128.2843 71.71573  67.5"},{"path":"https://tobiste.github.io/structr/reference/Plane_from_apparent_dips.html","id":null,"dir":"Reference","previous_headings":"","what":"Apparent dip direction — Plane_from_apparent_dips","title":"Apparent dip direction — Plane_from_apparent_dips","text":"Apparent dip direction","code":""},{"path":"https://tobiste.github.io/structr/reference/Plane_from_apparent_dips.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apparent dip direction — Plane_from_apparent_dips","text":"","code":"Plane_from_apparent_dips(a1, a2)"},{"path":"https://tobiste.github.io/structr/reference/Plane_from_apparent_dips.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apparent dip direction — Plane_from_apparent_dips","text":"a1, a2 \"Line\" objects containing apparent dips dip directions","code":""},{"path":"https://tobiste.github.io/structr/reference/Plane_from_apparent_dips.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apparent dip direction — Plane_from_apparent_dips","text":"\"Plane\" object","code":""},{"path":"https://tobiste.github.io/structr/reference/Plane_from_apparent_dips.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apparent dip direction — Plane_from_apparent_dips","text":"","code":"a1 <- Line(45, 22) a2 <- Line(352, 10) res <- Plane_from_apparent_dips(a1, a2)  stereoplot() points(rbind(a1, a2)) lines(res, lty = 2)"},{"path":"https://tobiste.github.io/structr/reference/Plane_pitch.html","id":null,"dir":"Reference","previous_headings":"","what":"Pitch of a line of a plane — Plane_pitch","title":"Pitch of a line of a plane — Plane_pitch","text":"Pitch line plane","code":""},{"path":"https://tobiste.github.io/structr/reference/Plane_pitch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pitch of a line of a plane — Plane_pitch","text":"","code":"Plane_pitch(p, l)"},{"path":"https://tobiste.github.io/structr/reference/Plane_pitch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pitch of a line of a plane — Plane_pitch","text":"p object class \"Plane\" l object class \"Line\"","code":""},{"path":"https://tobiste.github.io/structr/reference/Plane_pitch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pitch of a line of a plane — Plane_pitch","text":"Pitch angle degrees","code":""},{"path":"https://tobiste.github.io/structr/reference/Plane_pitch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pitch of a line of a plane — Plane_pitch","text":"","code":"Plane_pitch(Plane(90, 70), Line(175, 13)) # 13.9 #> [1] 13.91292"},{"path":"https://tobiste.github.io/structr/reference/RGN_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Rigid Grain Net (RGN) — RGN_plot","title":"Rigid Grain Net (RGN) — RGN_plot","text":"rigid grain net (Jessup et al. 2007) plots distribution strain ratio (R) orientation (phi) porphyroclast theoretical distribution tailless clasts. plot estimates critical shape factor Rc marking transition stable-sink position infinitely rotating porphyroclasts. critical shape factor can interpreted mean kinmatic vorticity number. Rc estimated using bootstrap method described Stephan et al. (2025).","code":""},{"path":"https://tobiste.github.io/structr/reference/RGN_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rigid Grain Net (RGN) — RGN_plot","text":"","code":"RGN_plot(   r,   theta,   angle_error = 3,   boot = 100L,   probs = 0.972,   grid = 0.05,   main = \"Rigid-Grain-Net\",   ... )"},{"path":"https://tobiste.github.io/structr/reference/RGN_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rigid Grain Net (RGN) — RGN_plot","text":"r numeric. porphyroclast aspect ratio (long axis/short axis) theta numeric. Angle long axis foliation (degrees) angle_error numeric. Uncertainty angle measurement. 3 default. boot integer. Number bootstrap resamples probs integer. Probability values \\([0, 1]\\) estimate critical shape factor, .e. largest shape factor measurements outside critical hyperbole. grid numeric. Spacing hyperboles. main character. main title (top). ... plotting arguments passed graphics::points()","code":""},{"path":"https://tobiste.github.io/structr/reference/RGN_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rigid Grain Net (RGN) — RGN_plot","text":"plot list calculated B (shape factor) theta values, bootstrapped confidence interval critical B value (Rc_CI).","code":""},{"path":"https://tobiste.github.io/structr/reference/RGN_plot.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Rigid Grain Net (RGN) — RGN_plot","text":"Jessup, Micah J., Richard D. Law, Chiara Frassi. \"rigid grain net (RGN): alternative method estimating mean kinematic vorticity number (Wm).\" Journal Structural Geology 29.3 (2007): 411-421. doi: 10.1016/j.jsg.2006.11.003 Stephan, Tobias, et al. \"Going flow—Changes vorticity control gold enrichment Archean shear zones (Shebandowan Greenstone Belt, Superior Province, Canada).\" Journal Structural Geology (2025): 105542. doi: 10.1016/j.jsg.2025.105542","code":""},{"path":"https://tobiste.github.io/structr/reference/RGN_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rigid Grain Net (RGN) — RGN_plot","text":"","code":"data(ramsay) set.seed(20250411)  # assuming the mean orientation is the foliation: theta <- tectonicr::circular_mean(ramsay[, 2]) - ramsay[, 2]  RGN_plot(ramsay[, \"R\"], theta, col = \"darkred\") #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced"},{"path":"https://tobiste.github.io/structr/reference/Rphi_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"R/phi plot — Rphi_plot","title":"R/phi plot — Rphi_plot","text":"R/phi plot","code":""},{"path":"https://tobiste.github.io/structr/reference/Rphi_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R/phi plot — Rphi_plot","text":"","code":"Rphi_plot(   r,   phi,   contour = TRUE,   image = FALSE,   n = 10L,   contour.lines = TRUE,   contour.lines.params = list(lwd = 0.5, col = par(\"col\")),   contour.col = viridis,   contour.col.params = list(),   mean.ellipse = TRUE,   mean.ellipse.method = \"eigen\",   mean.ellipse.params = list(border = \"red\", lwd = 2),   point.params = list(col = \"grey\", pch = 16, cex = 0.5),   rmax = NULL,   at.x = seq(-90, 90, 30),   at.y = NULL,   main = \"Rf/phi plot\",   ... )"},{"path":"https://tobiste.github.io/structr/reference/Rphi_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R/phi plot — Rphi_plot","text":"r numeric. Aspect ratio deformed object (long axis / short axis) phi numeric. Orientation long axis deformed object (degrees) contour logical. Whether grid densities drawn background. image logical. Whether raster image filled contour lines drawn density grid. Ignored contour=FALSE n integer. Grid resolution number filled contours contour.lines logical. Whether contour lines added. contour.lines.params list plotting arguments passed graphics::contour() contour.col function produce color palette used contouring contour.col.params list plotting arguments passed col.palette mean.ellipse logical. Whether mean ellipse plotted mean.ellipse.method character. Whether mean ellipse determined using eigenvector method Shimamoto Ikeda, 1976 (\"eigen\", default), Ramsay's method using geometric mean min max Rf values (\"ramsay\"). mean.ellipse.params list plotting arguments passed ellipse() point.params list plotting arguments passed graphics::points() rmax maximum R value (NULL, computed automatically) .x, .y points tick-marks labels x y axes drawn. main character. main title (top). ... optional arguments passed hypercontour()","code":""},{"path":"https://tobiste.github.io/structr/reference/Rphi_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"R/phi plot — Rphi_plot","text":"plot","code":""},{"path":[]},{"path":"https://tobiste.github.io/structr/reference/Rphi_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"R/phi plot — Rphi_plot","text":"","code":"data(ramsay) Rphi_plot(ramsay[, 1], ramsay[, 2])"},{"path":"https://tobiste.github.io/structr/reference/Rphi_polar_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Polar R/phi plot — Rphi_polar_plot","title":"Polar R/phi plot — Rphi_polar_plot","text":"Plots R/phi fabric plot polar coordinates","code":""},{"path":"https://tobiste.github.io/structr/reference/Rphi_polar_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Polar R/phi plot — Rphi_polar_plot","text":"","code":"Rphi_polar_plot(   r,   phi,   proj = c(\"eqd\", \"eqa\", \"stg\", \"ort\", \"gno\", \"lin\", \"rdl\"),   contour = TRUE,   image = FALSE,   n = 10L,   contour.lines = TRUE,   contour.lines.params = list(lwd = 0.5, col = par(\"col\")),   contour.col = viridis,   contour.col.params = list(),   mean.ellipse = TRUE,   mean.ellipse.params = list(col = \"red\", lwd = 2),   point.params = list(col = \"grey\", pch = 16, cex = 0.5),   main = \"Polar Rf/phi plot\",   ... )"},{"path":"https://tobiste.github.io/structr/reference/Rphi_polar_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Polar R/phi plot — Rphi_polar_plot","text":"r numeric. Aspect ratio deformed object (long axis / short axis) phi numeric. Orientation long axis deformed object (degrees) proj character. contour logical. Whether grid densities drawn background. image logical. Whether raster image filled contour lines drawn density grid. Ignored contour=FALSE n integer. Grid resolution number filled contours contour.lines logical. Whether contour lines added. contour.lines.params list plotting arguments passed graphics::contour() contour.col function produce color palette used contouring contour.col.params list plotting arguments passed col.palette mean.ellipse logical. Whether mean ellipse plotted mean.ellipse.params list plotting arguments passed ellipse() point.params list plotting arguments passed graphics::points() main character. main title (top). ... optional arguments passed hypercontour()","code":""},{"path":"https://tobiste.github.io/structr/reference/Rphi_polar_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Polar R/phi plot — Rphi_polar_plot","text":"plot","code":""},{"path":[]},{"path":"https://tobiste.github.io/structr/reference/Rphi_polar_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Polar R/phi plot — Rphi_polar_plot","text":"","code":"Rphi_polar_plot(ramsay[, 1], ramsay[, 2], proj = \"eqa\")"},{"path":"https://tobiste.github.io/structr/reference/SH.html","id":null,"dir":"Reference","previous_headings":"","what":"Direction of maximum horizontal stress from the stress tensor — SH","title":"Direction of maximum horizontal stress from the stress tensor — SH","text":"Calculates direction maximum horizontal stress using directions principal stress \\(R = \\frac{S1 - S2}{S1 - S3}\\). function Equations 11 10 Lund Townend (2007).","code":""},{"path":"https://tobiste.github.io/structr/reference/SH.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Direction of maximum horizontal stress from the stress tensor — SH","text":"","code":"SH(S1, S2, S3, R, tol = .Machine$double.eps^0.5, ortho.tol = 0.005)"},{"path":"https://tobiste.github.io/structr/reference/SH.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Direction of maximum horizontal stress from the stress tensor — SH","text":"S1, S2, S3 principal stress orientations. variables hold coordinates North, East geographical coordinate system, e.g. S1 = c(s1N,s1E,s1D). Given object class \"Vec3\" \"Line\" R numeric. Relative magnitude S2 respect S1 S3: \\(R = \\frac{S1 - S2}{S1 - S3}\\). Values ranging 0 1, 0 S1==S2 1 S2==S3. tol Tolerance comparison. ortho.tol tolerance angle (degree) orthogonality check three principal stress vectors.","code":""},{"path":"https://tobiste.github.io/structr/reference/SH.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Direction of maximum horizontal stress from the stress tensor — SH","text":"direction SH North numeric angle degrees (radians principal stress axes given \"Vec3\" objects).","code":""},{"path":"https://tobiste.github.io/structr/reference/SH.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Direction of maximum horizontal stress from the stress tensor — SH","text":"Lund Townend, (2007). Calculating horizontal stress orientations full partial knowledge tectonic stress tensor, Geophys. J. Int., doi:doi:10.1111/j.1365-246X.2007.03468.x .","code":""},{"path":"https://tobiste.github.io/structr/reference/SH.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Direction of maximum horizontal stress from the stress tensor — SH","text":"","code":"# first example from https://www.snsn.se/SH/SHcode/benchmark.out S1 <- Line(250.89, 70.07) S3 <- Line(103.01, 17.07) S2 <- crossprod(S3, S1) SH(S1, S2, S3, R = 1) #  70.89 #> [1] 70.89  R <- seq(0, 1, .05) cbind(R, SH = SH(S1, S2, S3, R = R)) #>          R       SH #>  [1,] 0.00 13.01021 #>  [2,] 0.05 13.18337 #>  [3,] 0.10 13.37695 #>  [4,] 0.15 13.59476 #>  [5,] 0.20 13.84162 #>  [6,] 0.25 14.12371 #>  [7,] 0.30 14.44908 #>  [8,] 0.35 14.82843 #>  [9,] 0.40 15.27621 #> [10,] 0.45 15.81249 #> [11,] 0.50 16.46586 #> [12,] 0.55 17.27842 #> [13,] 0.60 18.31445 #> [14,] 0.65 19.67656 #> [15,] 0.70 21.53704 #> [16,] 0.75 24.20154 #> [17,] 0.80 28.23884 #> [18,] 0.85 34.69668 #> [19,] 0.90 45.01043 #> [20,] 0.95 58.66746 #> [21,] 1.00 70.89000"},{"path":"https://tobiste.github.io/structr/reference/SH_from_tensor.html","id":null,"dir":"Reference","previous_headings":"","what":"Direction of maximum horizontal stress from the stress tensor (full knowledge) — SH_from_tensor","title":"Direction of maximum horizontal stress from the stress tensor (full knowledge) — SH_from_tensor","text":"Direction maximum horizontal stress stress tensor (full knowledge)","code":""},{"path":"https://tobiste.github.io/structr/reference/SH_from_tensor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Direction of maximum horizontal stress from the stress tensor (full knowledge) — SH_from_tensor","text":"","code":"SH_from_tensor(S)"},{"path":"https://tobiste.github.io/structr/reference/SH_from_tensor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Direction of maximum horizontal stress from the stress tensor (full knowledge) — SH_from_tensor","text":"S 3x3 matrix","code":""},{"path":"https://tobiste.github.io/structr/reference/SH_from_tensor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Direction of maximum horizontal stress from the stress tensor (full knowledge) — SH_from_tensor","text":"numeric angle degrees. direction SH North.","code":""},{"path":"https://tobiste.github.io/structr/reference/SH_from_tensor.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Direction of maximum horizontal stress from the stress tensor (full knowledge) — SH_from_tensor","text":"Lund Townend, (2007). Calculating horizontal stress orientations full partial knowledge tectonic stress tensor, Geophys. J. Int., doi:doi:10.1111/j.1365-246X.2007.03468.x .","code":""},{"path":"https://tobiste.github.io/structr/reference/SH_from_tensor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Direction of maximum horizontal stress from the stress tensor (full knowledge) — SH_from_tensor","text":"","code":"S1 <- c(-0.11163471165673433, -0.32215903156083286, 0.94008044843891103) S2 <- c(0.97015303285724142, 0.16959307992318776, 0.17332420511879815) S3 <- c(-0.21526909669344957, 0.93137089584437482, 0.29361108695489119)  S <- cbind(S1, S2, S3) * cbind(rep(3, 3), rep(2, 3), rep(1, 3)) / 3 SH_from_tensor(S) #> [1] 18.95383"},{"path":"https://tobiste.github.io/structr/reference/apparent_dip_direction.html","id":null,"dir":"Reference","previous_headings":"","what":"Apparent dip direction — apparent_dip_direction","title":"Apparent dip direction — apparent_dip_direction","text":"Apparent dip direction","code":""},{"path":"https://tobiste.github.io/structr/reference/apparent_dip_direction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apparent dip direction — apparent_dip_direction","text":"","code":"apparent_dip_direction(p, apparent_dip)"},{"path":"https://tobiste.github.io/structr/reference/apparent_dip_direction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apparent dip direction — apparent_dip_direction","text":"p object class \"Plane\" apparent_dip angle degrees","code":""},{"path":"https://tobiste.github.io/structr/reference/apparent_dip_direction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apparent dip direction — apparent_dip_direction","text":"Azimuth degrees","code":""},{"path":"https://tobiste.github.io/structr/reference/apparent_dip_direction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apparent dip direction — apparent_dip_direction","text":"","code":"apparent_dip_direction(Plane(63, 45), 10) #> [1] 145.8929"},{"path":"https://tobiste.github.io/structr/reference/azimuth_to_cardinal.html","id":null,"dir":"Reference","previous_headings":"","what":"Converts azimuth angles into Cardinal directions — azimuth_to_cardinal","title":"Converts azimuth angles into Cardinal directions — azimuth_to_cardinal","text":"Converts azimuth angles Cardinal directions","code":""},{"path":"https://tobiste.github.io/structr/reference/azimuth_to_cardinal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converts azimuth angles into Cardinal directions — azimuth_to_cardinal","text":"","code":"azimuth_to_cardinal(x, n_directions = 8)"},{"path":"https://tobiste.github.io/structr/reference/azimuth_to_cardinal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converts azimuth angles into Cardinal directions — azimuth_to_cardinal","text":"x angles degree. n_directions either 8 8-point (N, NE, E, …) 6 16-point (N, NNE, NE, …) cardinal version.","code":""},{"path":"https://tobiste.github.io/structr/reference/azimuth_to_cardinal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Converts azimuth angles into Cardinal directions — azimuth_to_cardinal","text":"character vector","code":""},{"path":"https://tobiste.github.io/structr/reference/azimuth_to_cardinal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Converts azimuth angles into Cardinal directions — azimuth_to_cardinal","text":"","code":"azimuth_to_cardinal(c(0, 23, 45, 100, 190, 270, 350)) # 8-point compass #> [1] \"N\"  \"NE\" \"NE\" \"E\"  \"S\"  \"W\"  \"N\"  azimuth_to_cardinal(c(0, 23, 45, 100, 190, 270, 350), 16) # 16-point compass #> [1] \"N\"   \"NNE\" \"NE\"  \"E\"   \"S\"   \"W\"   \"N\""},{"path":"https://tobiste.github.io/structr/reference/best_fit_plane.html","id":null,"dir":"Reference","previous_headings":"","what":"Least-square fit of small and great circles to spherically projected data — best_fit_plane","title":"Least-square fit of small and great circles to spherically projected data — best_fit_plane","text":"Finds best small great circles using algorithm Gray et al. (1980)","code":""},{"path":"https://tobiste.github.io/structr/reference/best_fit_plane.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Least-square fit of small and great circles to spherically projected data — best_fit_plane","text":"","code":"best_fit_plane(x)"},{"path":"https://tobiste.github.io/structr/reference/best_fit_plane.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Least-square fit of small and great circles to spherically projected data — best_fit_plane","text":"x object class \"Vec3\", \"Line\", \"Plane\".","code":""},{"path":"https://tobiste.github.io/structr/reference/best_fit_plane.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Least-square fit of small and great circles to spherically projected data — best_fit_plane","text":"list","code":""},{"path":"https://tobiste.github.io/structr/reference/best_fit_plane.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Least-square fit of small and great circles to spherically projected data — best_fit_plane","text":"Gray, N.H., Geiser, P.., Geiser, J.R. (1980). least-square fit small great circles spherically projected data. Mathematical Geology, Vol. 12, . 3, 1980.","code":""},{"path":"https://tobiste.github.io/structr/reference/best_fit_plane.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Least-square fit of small and great circles to spherically projected data — best_fit_plane","text":"","code":"data(\"gray_example\") gray_example1 <- gray_example |>   dplyr::mutate(     dipdir = Strike + 90,     dip = Dip,     id = seq_along(dip)   ) gray_cleavage <- dplyr::filter(gray_example1, Type == \"Cleavage\") gray_bedding <- dplyr::filter(gray_example1, Type == \"Bedding\") test_clea <- Plane(gray_cleavage$dipdir, gray_cleavage$dip) test_bedd <- Plane(gray_bedding$dipdir, gray_bedding$dip) best_clea <- best_fit_plane(test_clea) best_bedd <- best_fit_plane(test_bedd)  stereoplot() points(test_clea, col = \"blue\") points(test_bedd, col = \"red\") lines(best_clea$axis_c, best_clea$cone_angle, col = \"lightblue\") lines(best_clea$axis_g, 90, lty = 2, col = \"blue\") lines(best_bedd$axis_c, best_bedd$cone_angle, col = \"sienna\") lines(best_bedd$axis_g, 90, lty = 2, col = \"red\")"},{"path":"https://tobiste.github.io/structr/reference/best_pole.html","id":null,"dir":"Reference","previous_headings":"","what":"The cone or plane best fit of conically or cylindrical disposed s-plane poles — best_pole","title":"The cone or plane best fit of conically or cylindrical disposed s-plane poles — best_pole","text":"Finding best fit pole rotation given set points assumed lie mutual small great circle circle","code":""},{"path":"https://tobiste.github.io/structr/reference/best_pole.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The cone or plane best fit of conically or cylindrical disposed s-plane poles — best_pole","text":"","code":"best_cone_ramsay(x)  best_cone_ramsay2(x)"},{"path":"https://tobiste.github.io/structr/reference/best_pole.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The cone or plane best fit of conically or cylindrical disposed s-plane poles — best_pole","text":"x matrix. Cartesian coordinates points","code":""},{"path":"https://tobiste.github.io/structr/reference/best_pole.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The cone or plane best fit of conically or cylindrical disposed s-plane poles — best_pole","text":"numeric vector x,y,z Cartesian coordinates best fit pole plane cone axis, e residual sum square deviations observed poles planes best fit pole, K (cones) half apical angle best fit cone (radians).","code":""},{"path":"https://tobiste.github.io/structr/reference/best_pole.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The cone or plane best fit of conically or cylindrical disposed s-plane poles — best_pole","text":"Ramsay, 1967, p. 18-21","code":""},{"path":"https://tobiste.github.io/structr/reference/best_pole.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The cone or plane best fit of conically or cylindrical disposed s-plane poles — best_pole","text":"","code":"if (FALSE) { # \\dontrun{ # example from Ramsay, 1967, p. 20 x <- rbind(   c(-67, -31, -71),   c(-62, -53, -50),   c(-62, -75, -34),   c(-58, 85, -34),   c(-79, 40, -52),   c(90, 14, -75),   c(80, 10, 90) ) |> acoscartesian_to_cartesian() best_cone_ramsay(x) # expect: c(0.856, -0.157, -0.492, NA, 1.56207) best_plane_ramsay(x) # expect: c(0.852, -0.154, -0.502, 1-1.002) } # }"},{"path":"https://tobiste.github.io/structr/reference/bingham_statistics.html","id":null,"dir":"Reference","previous_headings":"","what":"Elliptical concentration and confidence cone estimation — bingham_statistics","title":"Elliptical concentration and confidence cone estimation — bingham_statistics","text":"Elliptical concentration confidence cone estimation","code":""},{"path":"https://tobiste.github.io/structr/reference/bingham_statistics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Elliptical concentration and confidence cone estimation — bingham_statistics","text":"","code":"bingham_statistics(x, w = NULL, na.rm = TRUE)"},{"path":"https://tobiste.github.io/structr/reference/bingham_statistics.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Elliptical concentration and confidence cone estimation — bingham_statistics","text":"Borradaile, G. (2003). Spherical-Orientation Data. : Statistics Earth Science Data. Springer, Berlin, Heidelberg. https://doi.org/10.1007/978-3-662-05223-5_10","code":""},{"path":"https://tobiste.github.io/structr/reference/bingham_statistics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Elliptical concentration and confidence cone estimation — bingham_statistics","text":"x object class \"Vec3\", \"Line\", \"Plane\". w numeric. Optional weights observation. na.rm logical. Whether NA values removed computation proceeds.","code":""},{"path":"https://tobiste.github.io/structr/reference/bingham_statistics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Elliptical concentration and confidence cone estimation — bingham_statistics","text":"list k two-column vector containing estimates minimum (\\(k_\\text{min}\\)) maximum concentration (\\(k_\\text{max}\\)). a95 two-column vector containing estimates minimum maximum 95% confidence cone. beta shape factor distribution given ratio \\(\\frac{k_\\text{min}}{k_\\text{max}}\\).","code":""},{"path":[]},{"path":"https://tobiste.github.io/structr/reference/bingham_statistics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Elliptical concentration and confidence cone estimation — bingham_statistics","text":"","code":"set.seed(1234) x <- rfb(100, mu = Line(120, 50), k = 15, A = diag(c(-5, 0, 5)))  stereoplot() stereo_point(x)   bingham_statistics(x) #> $k #> [1] 2.597601 4.434183 #>  #> $a95 #> [1] 8.686439 6.648463 #>  #> $beta #> [1] 0.5858129 #>"},{"path":"https://tobiste.github.io/structr/reference/center.html","id":null,"dir":"Reference","previous_headings":"","what":"Centering vectors — center","title":"Centering vectors — center","text":"Rotate vector object position eigenvectors parallel axes coordinate system: E3||X (north-south), E2||X(east-west), E1||X(vertical)","code":""},{"path":"https://tobiste.github.io/structr/reference/center.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Centering vectors — center","text":"","code":"center(x, max_vertical = FALSE)"},{"path":"https://tobiste.github.io/structr/reference/center.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Centering vectors — center","text":"x Object class \"Vec3\", \"Line\" \"Plane\" max_vertical Whether maximum von Mises-Fisher distribution already vertical .","code":""},{"path":"https://tobiste.github.io/structr/reference/center.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Centering vectors — center","text":"Object class x","code":""},{"path":[]},{"path":"https://tobiste.github.io/structr/reference/center.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Centering vectors — center","text":"","code":"set.seed(1) mu <- Line(120, 50) x <- rvmf(100, mu = mu, k = 20) x_centered <- center(x)  # plot results plot(x, col = \"grey\") points(x_centered, col = \"black\") legend(\"topright\", legend = c(\"original\", \"centered\"), col = c(\"grey\", \"black\"), pch = 16)"},{"path":"https://tobiste.github.io/structr/reference/classes.html","id":null,"dir":"Reference","previous_headings":"","what":"Structure classes — classes","title":"Structure classes — classes","text":"Vec3, Line, Plane, \"Pair\" Fault create convert \"Vec3\", \"Line\", \"Plane\", \"Pair\", \"Fault\" S3 class object, respectively, given set values. .Vec3, .Line, .Plane, .Pair, .Fault attempt coearce argument \"Vec3\", \"Line\", \"Plane\",  \"Pair\", \"Fault\" S3 class object, respectively. .Line, .Plane, .Pair, .Fault test argument \"Line\", \"Plane\",  \"Pair\", \"Fault\" S3 class object, respectively.","code":""},{"path":"https://tobiste.github.io/structr/reference/classes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Structure classes — classes","text":"","code":"is.spherical(x)  is.Vec3(x)  is.Line(x)  is.Plane(x)  is.Pair(x)  is.Fault(x)  as.spherical(x)  as.Vec3(x)  as.Line(x)  as.Plane(x)  as.Pair(x)  as.Fault(x)  Vec3(x, y, z)  Line(x, plunge)  Plane(x, dip)  Pair(x, y, azimuth, plunge, correction = FALSE)  Fault(x, y, azimuth, plunge, sense, correction = FALSE)  Spherical(x, .class)"},{"path":"https://tobiste.github.io/structr/reference/classes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Structure classes — classes","text":"x, y object class \"Line\", \"Plane\",  \"Pair\", \"Fault\"  numeric vector array containing spherical coordinates azimuth, plunge, z, dip numeric vectors spherical coordinates correction logical. TRUE (default), fault plane slip vector rotated slip vector lies fault plane minimizing angle slip plane normal vector. See correct_pair() details. sense (optional) integer. Sense line fault plane. Either 1or -1 normal thrust offset, respectively. \"sense\" sign fault's rake (see Fault_from_rake() details). .class character. Spherical class object coerced .","code":""},{"path":"https://tobiste.github.io/structr/reference/classes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Structure classes — classes","text":".Vec3, .Line, .Plane, .Pair, .Fault return TRUE arguments object class  \"Vec3\", \"Line\", \"Plane\", \"Pair\" \"Fault\", respectively, FALSE otherwise. .spherical returns TRUE argument's class one \"Vec3()\", \"Line\", \"Plane\", \"Pair\", \"Fault\" FALSE otherwise .Vec3(), .Line, .Plane, .Pair, .Fault generic functions.","code":""},{"path":"https://tobiste.github.io/structr/reference/classes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Structure classes — classes","text":"","code":"x <- Line(120, 50) # create line is.Line(x) # test if line #> [1] TRUE Plane(x) # convert to plane #> Plane object (n = 1): #> dip_direction           dip  #>           300            40   Pair(c(120, 120, 100), c(60, 60, 50), c(110, 25, 30), c(58, 9, 23)) #> Pair object (n = 3): #>      dip_direction dip azimuth plunge #> [1,]           120  60     110     58 #> [2,]           120  60      25      9 #> [3,]           100  50      30     23 Fault(c(\"a\" = 120, \"b\" = 120, \"c\" = 100), c(60, 60, 50), c(110, 25, 30), c(58, 9, 23), c(1, -1, 1)) #> Fault object (n = 3): #>   dip_direction dip azimuth plunge sense #> a           120  60     110     58     1 #> b           120  60      25      9    -1 #> c           100  50      30     23     1"},{"path":"https://tobiste.github.io/structr/reference/colorize.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper functions for color assignment and legends — colorize","title":"Helper functions for color assignment and legends — colorize","text":"Helper functions color assignment legends","code":""},{"path":"https://tobiste.github.io/structr/reference/colorize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper functions for color assignment and legends — colorize","text":"","code":"assign_col_d(x, pal = viridis::viridis, ...)  assign_col(x, n = length(x), pal = viridis::viridis, ...)  assign_col_binned(x, breaks, pal = viridis::viridis, ...)  legend_c(breaks, title = NULL, pal = viridis::viridis, ...)  legend_d(fill, labels = names(fill), position = \"topright\", ...)"},{"path":"https://tobiste.github.io/structr/reference/colorize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper functions for color assignment and legends — colorize","text":"x vector colorize pal color function; Default viridis::viridis() ... arguments passed color function n integer. breaks numeric. title character. Legend title fill color vector labels character.vector. Names discrete colors. Can ignored cols named vector. position Legend position","code":""},{"path":"https://tobiste.github.io/structr/reference/colorize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper functions for color assignment and legends — colorize","text":".","code":""},{"path":"https://tobiste.github.io/structr/reference/colorize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper functions for color assignment and legends — colorize","text":"","code":"set.seed(1234)  # example for discrete colors x <- rvmf(5, mu = Line(120, 50), k = 5) key <- letters[round(runif(5, 1, 26))] plot(x, col = assign_col_d(key), grid.params = list(guides = FALSE)) legend_d(assign_col_d(key))   # example for continuous colors: x <- rvmf(100, mu = Line(120, 50), k = 5) plot(x, col = assign_col(runif(100)), grid.params = list(guides = FALSE)) legend_c(seq(0, 1, .1), title = \"test\")"},{"path":"https://tobiste.github.io/structr/reference/confidence_ellipse.html","id":null,"dir":"Reference","previous_headings":"","what":"Confidence ellipse — confidence_ellipse","title":"Confidence ellipse — confidence_ellipse","text":"Bootstrapped projected mean percentile confidence region hypothesis tests","code":""},{"path":"https://tobiste.github.io/structr/reference/confidence_ellipse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Confidence ellipse — confidence_ellipse","text":"","code":"confidence_ellipse(x, n = 10000L, alpha = 0.05, res = 512L, isotropic = FALSE)"},{"path":"https://tobiste.github.io/structr/reference/confidence_ellipse.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Confidence ellipse — confidence_ellipse","text":"geologyGeometry (J.R. Davis)","code":""},{"path":"https://tobiste.github.io/structr/reference/confidence_ellipse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Confidence ellipse — confidence_ellipse","text":"x object class \"Vec3\", \"Line\", \"Plane\" n integer (10000 default). alpha numeric (0.05 default). res integer. resolution sample boundary curve (1 - alpha) * 100% percentile region. isotropic logical. TRUE, forces inverse covariance identity matrix hence region circular.","code":""},{"path":"https://tobiste.github.io/structr/reference/confidence_ellipse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Confidence ellipse — confidence_ellipse","text":"list. center Projected mean x cov Inverse covariance matrix tangent space, identity isotropic TRUE rotation Rotation matrix used quantiles Quantiles Mahalanobis norm pvalue.ray rays: p-value ray x, .e. fraction x farther center given ray. pvalue.line lines: p-value line x, .e. fraction x farther center given line pvalue.line.FUN,pvalue.ray.FUN function calculate p-value given vector angles Angles semi-axis confidence ellipse (radians x \"Vec3\" object, degrees otherwise.) ellipse Confidence ellipse given \"Vec3\" object res vectors","code":""},{"path":"https://tobiste.github.io/structr/reference/confidence_ellipse.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Confidence ellipse — confidence_ellipse","text":"inference based percentiles Mahalanobis distance tangent space mean bootstrapped means. user check bootstrapped means form tight ellipsoidal cluster, taking region seriously.","code":""},{"path":"https://tobiste.github.io/structr/reference/confidence_ellipse.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Confidence ellipse — confidence_ellipse","text":"Davis, J. R., & Titus, S. J. (2017). Modern methods analysis three-dimensional orientational data. Journal Structural Geology, 96, 65–89. https://doi.org/10.1016/j.jsg.2017.01.002","code":""},{"path":"https://tobiste.github.io/structr/reference/confidence_ellipse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Confidence ellipse — confidence_ellipse","text":"","code":"set.seed(20250411) ce <- confidence_ellipse(example_lines, n = 1000, res = 10) print(ce) #> $center #> Line object (n = 1): #>  azimuth   plunge  #> 69.19989 14.80455  #>  #> $cov #>           [,1]      [,2] #> [1,] 1265.7702 -268.7996 #> [2,] -268.7996 1773.4826 #>  #> $rotation #>              [,1]       [,2]       [,3] #> center  0.3433202 0.90379175  0.2555225 #> perp   -0.6987677 0.42757927 -0.5734977 #>        -0.6275786 0.01834249  0.7783371 #> attr(,\"class\") #> [1] \"Rotation\" \"matrix\"   \"array\"    #>  #> $quantiles #>            q000      q025     q050     q075     q095     q099     q100 #> [1,] 0.01479835 0.7477178 1.148652 1.675819 2.489669 3.016634 4.225523 #>  #> $pvalue.ray.FUN #> function (u)  #> { #>     if (is.spherical(u))  #>         u <- unclass(Vec3(u)) #>     v <- rayTangentVectorFromPoint(u, rot) #>     1 - empiricalCDF(sqrt(v %*% covarInv %*% v)) #> } #> <bytecode: 0x561535bff608> #> <environment: 0x561535bfdb80> #>  #> $pvalue.ray #>    [1] 0.162 0.401 0.831 0.570 0.665 0.438 0.621 0.989 0.791 0.482 0.344 0.010 #>   [13] 0.058 0.101 0.446 0.427 0.884 0.171 0.644 0.060 0.190 0.321 0.947 0.152 #>   [25] 0.874 0.865 0.109 0.118 0.659 0.851 0.542 0.233 0.018 0.601 0.365 0.735 #>   [37] 0.766 0.129 0.454 0.398 0.368 0.683 0.607 0.950 0.155 0.626 0.272 0.337 #>   [49] 0.921 0.514 0.267 0.879 0.185 0.177 0.767 0.990 0.527 0.736 0.711 0.501 #>   [61] 0.551 0.513 0.705 0.964 0.372 0.289 0.237 0.071 0.404 0.074 0.132 0.658 #>   [73] 0.439 0.055 0.983 0.226 0.775 0.688 0.136 0.493 0.955 0.583 0.779 0.473 #>   [85] 0.214 0.842 0.232 0.843 0.145 0.378 0.746 0.941 0.785 0.351 0.783 0.862 #>   [97] 0.085 0.224 0.193 0.515 0.958 0.369 0.383 0.832 0.860 0.877 0.671 0.432 #>  [109] 0.306 0.778 0.708 0.603 0.636 0.772 0.824 0.952 0.739 0.646 0.488 0.093 #>  [121] 0.771 0.412 0.940 0.213 0.837 0.292 0.946 0.329 0.502 0.212 0.980 0.141 #>  [133] 0.235 0.078 0.814 0.263 0.800 0.134 0.324 0.889 0.684 0.539 0.925 0.420 #>  [145] 0.755 0.627 0.070 0.481 0.367 0.859 0.526 0.619 0.654 0.793 0.022 0.215 #>  [157] 0.593 0.901 0.002 0.080 0.787 0.032 0.031 0.945 0.460 0.552 0.682 0.571 #>  [169] 0.555 0.942 0.809 0.528 0.937 0.608 0.727 0.096 0.511 0.961 0.107 0.414 #>  [181] 0.305 0.547 0.323 0.935 0.686 0.221 0.931 0.722 0.186 0.700 0.105 0.153 #>  [193] 0.597 0.380 0.704 0.647 0.068 0.690 0.857 0.381 0.580 0.024 0.459 0.220 #>  [205] 0.794 0.948 0.668 0.194 0.490 0.680 0.795 0.312 0.805 0.142 0.852 0.765 #>  [217] 0.126 0.023 0.826 0.286 0.624 0.130 0.834 0.082 0.339 0.326 0.495 0.956 #>  [229] 0.576 0.335 0.057 0.652 0.334 0.676 0.716 0.276 0.531 0.199 0.089 0.349 #>  [241] 0.768 0.776 0.176 0.362 0.125 0.163 0.150 0.167 0.415 0.418 0.348 0.585 #>  [253] 0.284 0.434 0.356 0.385 0.744 0.435 0.474 0.503 0.914 0.005 0.781 0.029 #>  [265] 0.191 0.492 0.886 0.618 0.317 0.804 0.602 0.067 0.346 0.411 0.664 0.715 #>  [277] 0.737 0.475 0.866 0.604 0.748 0.160 0.366 0.149 0.308 0.828 0.541 0.059 #>  [289] 0.449 0.638 0.140 0.995 0.757 0.954 0.480 0.006 0.639 0.448 0.281 0.259 #>  [301] 0.403 0.616 0.165 0.230 0.077 0.393 0.003 0.559 0.613 0.634 0.588 0.379 #>  [313] 0.433 0.953 0.218 0.713 0.487 0.178 0.196 0.181 0.614 0.117 0.094 0.425 #>  [325] 0.903 0.734 0.529 0.016 0.764 0.965 0.370 0.525 0.421 0.115 0.536 0.885 #>  [337] 0.316 0.166 0.248 0.204 0.724 0.327 0.904 0.437 0.228 0.957 0.996 0.718 #>  [349] 0.173 0.825 0.044 0.615 0.081 0.717 0.236 0.573 0.817 0.251 0.894 0.761 #>  [361] 0.046 0.788 0.721 0.187 0.909 0.354 0.039 0.625 0.892 0.104 0.848 0.510 #>  [373] 0.978 0.699 0.919 0.358 0.698 0.100 0.750 0.428 0.537 0.898 0.975 0.069 #>  [385] 0.011 0.908 0.899 0.709 0.591 0.328 0.543 0.396 0.238 0.590 0.916 0.465 #>  [397] 0.279 0.461 0.269 0.436 0.315 0.628 0.304 0.314 0.938 0.747 0.623 0.972 #>  [409] 0.035 0.694 0.331 0.359 0.205 0.360 0.803 0.592 0.632 0.520 0.612 0.357 #>  [421] 0.034 0.810 0.470 0.936 0.882 0.164 0.929 0.198 0.182 0.774 0.458 0.217 #>  [433] 0.462 0.743 0.560 0.661 0.841 0.906 0.397 0.532 0.813 0.406 0.174 0.192 #>  [445] 0.984 0.920 0.299 0.066 0.361 0.728 0.250 0.657 0.062 0.268 0.498 0.666 #>  [457] 0.533 0.252 0.447 0.733 0.887 0.169 0.311 0.264 0.064 0.409 0.128 0.900 #>  [469] 0.451 0.753 0.210 0.796 0.287 0.867 0.322 0.855 0.225 0.040 0.245 0.981 #>  [481] 0.229 0.821 0.912 0.270 0.222 0.133 0.131 0.020 0.789 0.740 0.780 0.584 #>  [493] 0.333 0.239 0.076 0.387 0.924 0.838 0.522 0.274 0.509 0.594 0.719 0.600 #>  [505] 0.575 0.219 0.928 0.836 0.469 0.061 0.849 0.992 0.674 0.663 0.202 0.905 #>  [517] 0.569 0.696 0.792 0.745 0.758 0.336 0.564 0.389 0.243 0.786 0.120 0.726 #>  [529] 0.376 0.135 0.386 0.175 0.725 0.201 0.963 0.200 0.330 0.922 0.629 0.296 #>  [541] 0.122 0.518 0.959 0.206 0.041 0.244 0.463 0.103 0.188 0.987 0.998 0.402 #>  [553] 0.566 0.697 0.399 0.293 0.823 0.216 0.265 0.521 0.374 0.808 0.563 0.053 #>  [565] 0.318 0.507 0.485 0.209 0.648 0.504 0.442 0.662 0.283 0.681 0.907 0.723 #>  [577] 0.075 0.303 0.391 0.278 0.943 0.752 0.410 0.534 0.872 0.967 0.203 0.231 #>  [589] 0.464 0.524 0.782 0.030 0.962 0.911 0.806 0.424 0.013 0.530 0.609 0.025 #>  [601] 0.352 0.572 0.701 0.027 0.893 0.364 0.275 0.548 0.407 0.102 0.982 0.302 #>  [613] 0.620 0.516 0.499 0.240 0.693 0.091 0.083 0.241 0.065 0.582 0.147 0.720 #>  [625] 0.280 0.707 0.738 0.483 0.988 0.486 0.468 0.650 0.902 0.137 0.562 0.505 #>  [637] 0.635 0.072 0.567 0.557 0.189 0.431 0.976 0.986 0.417 0.784 0.373 0.999 #>  [649] 0.799 0.994 0.545 0.484 0.042 0.113 0.262 0.050 0.043 0.970 0.549 0.558 #>  [661] 0.496 0.815 0.384 0.054 0.161 0.926 0.883 0.291 0.589 0.660 0.847 0.606 #>  [673] 0.004 0.148 0.643 0.861 0.910 0.812 0.478 0.586 0.234 0.840 0.869 0.310 #>  [685] 0.110 0.816 0.341 0.494 0.112 0.556 0.692 0.088 0.732 0.021 0.049 0.026 #>  [697] 0.971 0.844 0.642 0.466 0.260 0.108 0.895 0.622 0.633 0.610 0.000 0.395 #>  [709] 0.144 0.345 0.710 0.340 0.208 0.598 0.008 0.157 0.871 0.760 0.319 0.687 #>  [721] 0.457 0.669 0.452 0.271 0.568 0.489 0.400 0.801 0.254 0.997 0.827 0.677 #>  [733] 0.811 0.819 0.645 0.540 0.114 0.993 0.672 0.290 0.807 0.123 0.881 0.332 #>  [745] 0.508 0.444 0.325 0.146 0.769 0.839 0.579 0.172 0.756 0.413 0.445 0.266 #>  [757] 0.875 0.544 0.298 0.001 0.119 0.301 0.870 0.116 0.467 0.179 0.651 0.691 #>  [769] 0.036 0.933 0.430 0.685 0.471 0.195 0.012 0.388 0.888 0.246 0.863 0.830 #>  [781] 0.864 0.295 0.183 0.553 0.731 0.655 0.673 0.675 0.282 0.342 0.455 0.932 #>  [793] 0.574 0.856 0.565 0.143 0.253 0.951 0.347 0.211 0.472 0.822 0.679 0.017 #>  [805] 0.850 0.073 0.695 0.702 0.009 0.377 0.798 0.138 0.223 0.587 0.158 0.052 #>  [817] 0.968 0.121 0.363 0.184 0.667 0.519 0.868 0.546 0.578 0.168 0.242 0.829 #>  [829] 0.802 0.450 0.390 0.985 0.151 0.063 0.441 0.535 0.561 0.977 0.641 0.277 #>  [841] 0.440 0.729 0.854 0.846 0.927 0.611 0.051 0.255 0.090 0.477 0.500 0.730 #>  [853] 0.678 0.759 0.258 0.124 0.712 0.285 0.419 0.878 0.084 0.300 0.749 0.033 #>  [865] 0.790 0.751 0.517 0.247 0.873 0.156 0.408 0.092 0.550 0.127 0.456 0.949 #>  [877] 0.880 0.512 0.858 0.375 0.353 0.453 0.918 0.382 0.637 0.087 0.915 0.991 #>  [889] 0.599 0.197 0.019 0.429 0.966 0.835 0.649 0.762 0.443 0.426 0.056 0.261 #>  [901] 0.670 0.405 0.538 0.714 0.876 0.079 0.689 0.577 0.960 0.479 0.111 0.741 #>  [913] 0.249 0.227 0.139 0.047 0.313 0.930 0.853 0.086 0.297 0.923 0.037 0.974 #>  [925] 0.095 0.098 0.845 0.703 0.416 0.770 0.595 0.392 0.497 0.288 0.097 0.754 #>  [937] 0.014 0.653 0.605 0.423 0.656 0.706 0.581 0.180 0.820 0.350 0.506 0.343 #>  [949] 0.106 0.007 0.338 0.640 0.028 0.045 0.048 0.309 0.099 0.038 0.934 0.890 #>  [961] 0.523 0.917 0.015 0.307 0.797 0.763 0.773 0.371 0.973 0.777 0.159 0.631 #>  [973] 0.833 0.944 0.257 0.476 0.554 0.913 0.596 0.294 0.939 0.256 0.630 0.891 #>  [985] 0.979 0.818 0.355 0.273 0.320 0.742 0.896 0.491 0.422 0.394 0.154 0.170 #>  [997] 0.617 0.969 0.897 0.207 #>  #> $pvalue.line.FUN #> function (l)  #> { #>     if (is.spherical(l))  #>         l <- unclass(Vec3(l)) #>     if (dot(l, inf$center) < 0) { #>         inf$pvalue(-l) #>     } #>     else { #>         inf$pvalue(l) #>     } #> } #> <bytecode: 0x5615347e2c38> #> <environment: 0x5615347e3ed0> #>  #> $pvalue.line #>    [1] 0.162 0.401 0.831 0.570 0.665 0.438 0.621 0.989 0.791 0.482 0.344 0.010 #>   [13] 0.058 0.101 0.446 0.427 0.884 0.171 0.644 0.060 0.190 0.321 0.947 0.152 #>   [25] 0.874 0.865 0.109 0.118 0.659 0.851 0.542 0.233 0.018 0.601 0.365 0.735 #>   [37] 0.766 0.129 0.454 0.398 0.368 0.683 0.607 0.950 0.155 0.626 0.272 0.337 #>   [49] 0.921 0.514 0.267 0.879 0.185 0.177 0.767 0.990 0.527 0.736 0.711 0.501 #>   [61] 0.551 0.513 0.705 0.964 0.372 0.289 0.237 0.071 0.404 0.074 0.132 0.658 #>   [73] 0.439 0.055 0.983 0.226 0.775 0.688 0.136 0.493 0.955 0.583 0.779 0.473 #>   [85] 0.214 0.842 0.232 0.843 0.145 0.378 0.746 0.941 0.785 0.351 0.783 0.862 #>   [97] 0.085 0.224 0.193 0.515 0.958 0.369 0.383 0.832 0.860 0.877 0.671 0.432 #>  [109] 0.306 0.778 0.708 0.603 0.636 0.772 0.824 0.952 0.739 0.646 0.488 0.093 #>  [121] 0.771 0.412 0.940 0.213 0.837 0.292 0.946 0.329 0.502 0.212 0.980 0.141 #>  [133] 0.235 0.078 0.814 0.263 0.800 0.134 0.324 0.889 0.684 0.539 0.925 0.420 #>  [145] 0.755 0.627 0.070 0.481 0.367 0.859 0.526 0.619 0.654 0.793 0.022 0.215 #>  [157] 0.593 0.901 0.002 0.080 0.787 0.032 0.031 0.945 0.460 0.552 0.682 0.571 #>  [169] 0.555 0.942 0.809 0.528 0.937 0.608 0.727 0.096 0.511 0.961 0.107 0.414 #>  [181] 0.305 0.547 0.323 0.935 0.686 0.221 0.931 0.722 0.186 0.700 0.105 0.153 #>  [193] 0.597 0.380 0.704 0.647 0.068 0.690 0.857 0.381 0.580 0.024 0.459 0.220 #>  [205] 0.794 0.948 0.668 0.194 0.490 0.680 0.795 0.312 0.805 0.142 0.852 0.765 #>  [217] 0.126 0.023 0.826 0.286 0.624 0.130 0.834 0.082 0.339 0.326 0.495 0.956 #>  [229] 0.576 0.335 0.057 0.652 0.334 0.676 0.716 0.276 0.531 0.199 0.089 0.349 #>  [241] 0.768 0.776 0.176 0.362 0.125 0.163 0.150 0.167 0.415 0.418 0.348 0.585 #>  [253] 0.284 0.434 0.356 0.385 0.744 0.435 0.474 0.503 0.914 0.005 0.781 0.029 #>  [265] 0.191 0.492 0.886 0.618 0.317 0.804 0.602 0.067 0.346 0.411 0.664 0.715 #>  [277] 0.737 0.475 0.866 0.604 0.748 0.160 0.366 0.149 0.308 0.828 0.541 0.059 #>  [289] 0.449 0.638 0.140 0.995 0.757 0.954 0.480 0.006 0.639 0.448 0.281 0.259 #>  [301] 0.403 0.616 0.165 0.230 0.077 0.393 0.003 0.559 0.613 0.634 0.588 0.379 #>  [313] 0.433 0.953 0.218 0.713 0.487 0.178 0.196 0.181 0.614 0.117 0.094 0.425 #>  [325] 0.903 0.734 0.529 0.016 0.764 0.965 0.370 0.525 0.421 0.115 0.536 0.885 #>  [337] 0.316 0.166 0.248 0.204 0.724 0.327 0.904 0.437 0.228 0.957 0.996 0.718 #>  [349] 0.173 0.825 0.044 0.615 0.081 0.717 0.236 0.573 0.817 0.251 0.894 0.761 #>  [361] 0.046 0.788 0.721 0.187 0.909 0.354 0.039 0.625 0.892 0.104 0.848 0.510 #>  [373] 0.978 0.699 0.919 0.358 0.698 0.100 0.750 0.428 0.537 0.898 0.975 0.069 #>  [385] 0.011 0.908 0.899 0.709 0.591 0.328 0.543 0.396 0.238 0.590 0.916 0.465 #>  [397] 0.279 0.461 0.269 0.436 0.315 0.628 0.304 0.314 0.938 0.747 0.623 0.972 #>  [409] 0.035 0.694 0.331 0.359 0.205 0.360 0.803 0.592 0.632 0.520 0.612 0.357 #>  [421] 0.034 0.810 0.470 0.936 0.882 0.164 0.929 0.198 0.182 0.774 0.458 0.217 #>  [433] 0.462 0.743 0.560 0.661 0.841 0.906 0.397 0.532 0.813 0.406 0.174 0.192 #>  [445] 0.984 0.920 0.299 0.066 0.361 0.728 0.250 0.657 0.062 0.268 0.498 0.666 #>  [457] 0.533 0.252 0.447 0.733 0.887 0.169 0.311 0.264 0.064 0.409 0.128 0.900 #>  [469] 0.451 0.753 0.210 0.796 0.287 0.867 0.322 0.855 0.225 0.040 0.245 0.981 #>  [481] 0.229 0.821 0.912 0.270 0.222 0.133 0.131 0.020 0.789 0.740 0.780 0.584 #>  [493] 0.333 0.239 0.076 0.387 0.924 0.838 0.522 0.274 0.509 0.594 0.719 0.600 #>  [505] 0.575 0.219 0.928 0.836 0.469 0.061 0.849 0.992 0.674 0.663 0.202 0.905 #>  [517] 0.569 0.696 0.792 0.745 0.758 0.336 0.564 0.389 0.243 0.786 0.120 0.726 #>  [529] 0.376 0.135 0.386 0.175 0.725 0.201 0.963 0.200 0.330 0.922 0.629 0.296 #>  [541] 0.122 0.518 0.959 0.206 0.041 0.244 0.463 0.103 0.188 0.987 0.998 0.402 #>  [553] 0.566 0.697 0.399 0.293 0.823 0.216 0.265 0.521 0.374 0.808 0.563 0.053 #>  [565] 0.318 0.507 0.485 0.209 0.648 0.504 0.442 0.662 0.283 0.681 0.907 0.723 #>  [577] 0.075 0.303 0.391 0.278 0.943 0.752 0.410 0.534 0.872 0.967 0.203 0.231 #>  [589] 0.464 0.524 0.782 0.030 0.962 0.911 0.806 0.424 0.013 0.530 0.609 0.025 #>  [601] 0.352 0.572 0.701 0.027 0.893 0.364 0.275 0.548 0.407 0.102 0.982 0.302 #>  [613] 0.620 0.516 0.499 0.240 0.693 0.091 0.083 0.241 0.065 0.582 0.147 0.720 #>  [625] 0.280 0.707 0.738 0.483 0.988 0.486 0.468 0.650 0.902 0.137 0.562 0.505 #>  [637] 0.635 0.072 0.567 0.557 0.189 0.431 0.976 0.986 0.417 0.784 0.373 0.999 #>  [649] 0.799 0.994 0.545 0.484 0.042 0.113 0.262 0.050 0.043 0.970 0.549 0.558 #>  [661] 0.496 0.815 0.384 0.054 0.161 0.926 0.883 0.291 0.589 0.660 0.847 0.606 #>  [673] 0.004 0.148 0.643 0.861 0.910 0.812 0.478 0.586 0.234 0.840 0.869 0.310 #>  [685] 0.110 0.816 0.341 0.494 0.112 0.556 0.692 0.088 0.732 0.021 0.049 0.026 #>  [697] 0.971 0.844 0.642 0.466 0.260 0.108 0.895 0.622 0.633 0.610 0.000 0.395 #>  [709] 0.144 0.345 0.710 0.340 0.208 0.598 0.008 0.157 0.871 0.760 0.319 0.687 #>  [721] 0.457 0.669 0.452 0.271 0.568 0.489 0.400 0.801 0.254 0.997 0.827 0.677 #>  [733] 0.811 0.819 0.645 0.540 0.114 0.993 0.672 0.290 0.807 0.123 0.881 0.332 #>  [745] 0.508 0.444 0.325 0.146 0.769 0.839 0.579 0.172 0.756 0.413 0.445 0.266 #>  [757] 0.875 0.544 0.298 0.001 0.119 0.301 0.870 0.116 0.467 0.179 0.651 0.691 #>  [769] 0.036 0.933 0.430 0.685 0.471 0.195 0.012 0.388 0.888 0.246 0.863 0.830 #>  [781] 0.864 0.295 0.183 0.553 0.731 0.655 0.673 0.675 0.282 0.342 0.455 0.932 #>  [793] 0.574 0.856 0.565 0.143 0.253 0.951 0.347 0.211 0.472 0.822 0.679 0.017 #>  [805] 0.850 0.073 0.695 0.702 0.009 0.377 0.798 0.138 0.223 0.587 0.158 0.052 #>  [817] 0.968 0.121 0.363 0.184 0.667 0.519 0.868 0.546 0.578 0.168 0.242 0.829 #>  [829] 0.802 0.450 0.390 0.985 0.151 0.063 0.441 0.535 0.561 0.977 0.641 0.277 #>  [841] 0.440 0.729 0.854 0.846 0.927 0.611 0.051 0.255 0.090 0.477 0.500 0.730 #>  [853] 0.678 0.759 0.258 0.124 0.712 0.285 0.419 0.878 0.084 0.300 0.749 0.033 #>  [865] 0.790 0.751 0.517 0.247 0.873 0.156 0.408 0.092 0.550 0.127 0.456 0.949 #>  [877] 0.880 0.512 0.858 0.375 0.353 0.453 0.918 0.382 0.637 0.087 0.915 0.991 #>  [889] 0.599 0.197 0.019 0.429 0.966 0.835 0.649 0.762 0.443 0.426 0.056 0.261 #>  [901] 0.670 0.405 0.538 0.714 0.876 0.079 0.689 0.577 0.960 0.479 0.111 0.741 #>  [913] 0.249 0.227 0.139 0.047 0.313 0.930 0.853 0.086 0.297 0.923 0.037 0.974 #>  [925] 0.095 0.098 0.845 0.703 0.416 0.770 0.595 0.392 0.497 0.288 0.097 0.754 #>  [937] 0.014 0.653 0.605 0.423 0.656 0.706 0.581 0.180 0.820 0.350 0.506 0.343 #>  [949] 0.106 0.007 0.338 0.640 0.028 0.045 0.048 0.309 0.099 0.038 0.934 0.890 #>  [961] 0.523 0.917 0.015 0.307 0.797 0.763 0.773 0.371 0.973 0.777 0.159 0.631 #>  [973] 0.833 0.944 0.257 0.476 0.554 0.913 0.596 0.294 0.939 0.256 0.630 0.891 #>  [985] 0.979 0.818 0.355 0.273 0.320 0.742 0.896 0.491 0.422 0.394 0.154 0.170 #>  [997] 0.617 0.969 0.897 0.207 #>  #> $angles #> [1] 3.281769 4.206626 #>  #> $ellipse #> Vector (Vec3) object (n = 11): #>               x         y         z #>  [1,] 0.3255999 0.8935846 0.3090167 #>  [2,] 0.3671404 0.8776759 0.3080470 #>  [3,] 0.3992291 0.8708523 0.2867619 #>  [4,] 0.4098296 0.8762430 0.2534522 #>  [5,] 0.3948981 0.8917916 0.2208240 #>  [6,] 0.3599145 0.9110346 0.2011901 #>  [7,] 0.3181238 0.9262850 0.2019737 #>  [8,] 0.2856305 0.9320435 0.2229577 #>  [9,] 0.2750301 0.9266528 0.2562674 #> [10,] 0.2903661 0.9121693 0.2891967 #> [11,] 0.3255999 0.8935846 0.3090167 #>   # Check how many vectors lie outside quantiles: quantile(ce$pvalue.line, probs=c(0.00, 0.05, 0.25, 0.50, 0.75, 1.00)) #>      0%      5%     25%     50%     75%    100%  #> 0.00000 0.04995 0.24975 0.49950 0.74925 0.99900   # Hypothesis testing (reject if p-value < alpha): ce$pvalue.line.FUN((Line(90, 0))) #> [1] 0"},{"path":"https://tobiste.github.io/structr/reference/count_points.html","id":null,"dir":"Reference","previous_headings":"","what":"Point density — count_points","title":"Point density — count_points","text":"function calculates point density input spherical points series counter stations. Creates gridsize regular grid counter stations, calculates distance input points counter station, calculates density using FUN.  input point weighted corresponding item weights. weights normalized 1 calculation.","code":""},{"path":"https://tobiste.github.io/structr/reference/count_points.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Point density — count_points","text":"","code":"count_points(azi, inc, FUN, sigma, ngrid, weights, r)"},{"path":"https://tobiste.github.io/structr/reference/count_points.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Point density — count_points","text":"azi, inc degree FUN method density estimation use. Defaults exponential_kamb(). sigma (optional) numeric. number standard deviations defining expected number standard deviations random sample uniform distribution points expected vary evenly distributed across hemisphere.  controls size counting circle, therefore degree smoothing.  Higher sigmas lead smoothing resulting density distribution. parameter applies Kamb-based methods.  Defaults 3. ngrid numeric. size grid density estimated . weights (optional) numeric vector length azi. relative weight applied input measurement. array normalized sum 1, absolute value weights affect result. Defaults NULL r numeric. radius stereonet circle","code":""},{"path":"https://tobiste.github.io/structr/reference/count_points.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Point density — count_points","text":"list","code":""},{"path":"https://tobiste.github.io/structr/reference/defgrad.html","id":null,"dir":"Reference","previous_headings":"","what":"Deformation Gradient Tensor — defgrad","title":"Deformation Gradient Tensor — defgrad","text":"Deformation Gradient Tensor","code":""},{"path":"https://tobiste.github.io/structr/reference/defgrad.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deformation Gradient Tensor — defgrad","text":"","code":"defgrad_from_ratio(Rxy = 1, Ryz = 1)  defgrad_from_pair(p)  defgrad_from_vectors(v1, v2)  defgrad_from_axisangle(axis, angle)  defgrad_from_comp(   xx = 1,   xy = 0,   xz = 0,   yx = 0,   yy = 1,   yz = 0,   zx = 0,   zy = 0,   zz = 1 )"},{"path":"https://tobiste.github.io/structr/reference/defgrad.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deformation Gradient Tensor — defgrad","text":"Rxy, Ryz numeric. XY YZ strain ratio create strain tensor axial stretches.Values must greater equal 1. p object class pair v1, v2 objects class \"spherical\" three-element vector. Deformation gradient results rotation around axis perpendicular vectors rotate v1 v2. axis, angle rotation axis angle, axis can object class \"spherical\" (incl. \"line\" \"plane\") three-element vector. Angle degrees axis object class \"spherical\", radians otherwise. xx, xy, xz, yx, yy, yz, zx, zy, zz numeric. Directly specify components tensor. Identity matrix default.","code":""},{"path":"https://tobiste.github.io/structr/reference/defgrad.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deformation Gradient Tensor — defgrad","text":"3x3 matrix.","code":""},{"path":"https://tobiste.github.io/structr/reference/defgrad.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Deformation Gradient Tensor — defgrad","text":"","code":"defgrad_from_ratio(2, 3) #>          [,1]     [,2]      [,3] #> [1,] 2.289428 0.000000 0.0000000 #> [2,] 0.000000 1.144714 0.0000000 #> [3,] 0.000000 0.000000 0.3815714 defgrad_from_axisangle(Line(120, 30), 45) #>            [,1]       [,2]      [,3] #> [1,]  0.7620243 -0.4486733 0.4669168 #> [2,]  0.2584335  0.8718592 0.4160212 #> [3,] -0.5937433 -0.1963513 0.7803301 defgrad_from_vectors(Line(120, 30), Line(210, 60)) #>             [,1]       [,2]       [,3] #> [1,]  0.96054327 -0.1753947  0.1017020 #> [2,]  0.19960527  0.9038650 -0.3286089 #> [3,] -0.03555755  0.3421443  0.9198776 defgrad_from_pair(Pair(40, 20, 75, 16)) #> Vector (Vec3) object (n = 3): #>           [,1]       [,2]       [,3] #> [1,] 0.2487928 -0.9331095 -0.2620026 #> [2,] 0.9285075  0.3060065 -0.2198463 #> [3,] 0.2756374 -0.1885752  0.9396926"},{"path":"https://tobiste.github.io/structr/reference/density-funs.html","id":null,"dir":"Reference","previous_headings":"","what":"Density estimation — density-funs","title":"Density estimation — density-funs","text":"methods density estimation stereonet.","code":""},{"path":"https://tobiste.github.io/structr/reference/density-funs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Density estimation — density-funs","text":"","code":"exponential_kamb(cos_dist, sigma = 3)  linear_inverse_kamb(cos_dist, sigma = 3)  square_inverse_kamb(cos_dist, sigma = 3)  kamb_count(cos_dist, sigma = 3)  schmidt_count(cos_dist, sigma = NULL)"},{"path":"https://tobiste.github.io/structr/reference/density-funs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Density estimation — density-funs","text":"cos_dist cosine distances sigma (optional) numeric. number standard deviations defining expected number standard deviations random sample uniform distribution points expected vary evenly distributed across hemisphere.  controls size counting circle, therefore degree smoothing.  Higher sigmas lead smoothing resulting density distribution. parameter applies Kamb-based methods.  Defaults 3.","code":""},{"path":"https://tobiste.github.io/structr/reference/density-funs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Density estimation — density-funs","text":"list","code":""},{"path":"https://tobiste.github.io/structr/reference/density-funs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Density estimation — density-funs","text":"exponential_kamb(): Kamb exponential smoothing modified Kamb method using exponential smoothing (ref1). Units numbers standard deviations density estimate differs uniform. linear_inverse_kamb(): Kamb linear smoothing modified Kamb method using linear smoothing (ref1).  Units numbers standard deviations density estimate differs uniform. square_inverse_kamb(): Kamb squared smoothing modified Kamb method using squared smoothing (ref1).  Units numbers standard deviations density estimate differs uniform. kamb_count(): Kamb smoothing Kamb's method (ref2) smoothing. Units numbers standard deviations density estimate differs uniform. schmidt_count(): 1% counts. traditional \"Schmidt\" (.k.. 1%) method. Counts points within counting circle comprising 1% total area hemisphere. take account sample size.  Units points per 1% area.","code":""},{"path":"https://tobiste.github.io/structr/reference/density-funs.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Density estimation — density-funs","text":"Vollmer, 1995. C Program Automatic Contouring Spherical Orientation Data Using Modified Kamb Method. Computers & Geosciences, Vol. 21, . 1, pp. 31–49. Kamb, 1959. Ice Petrofabric Observations Blue Glacier, Washington, Relation Theory Experiment. Journal Geophysical Research, Vol. 64, . 11, pp. 1891–1909.","code":""},{"path":"https://tobiste.github.io/structr/reference/density.html","id":null,"dir":"Reference","previous_headings":"","what":"Spherical density estimation — density","title":"Spherical density estimation — density","text":"Spherical density estimation","code":""},{"path":"https://tobiste.github.io/structr/reference/density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spherical density estimation — density","text":"","code":"# S3 method for class 'spherical' density(x, ...)  density_calc(   x,   FUN = exponential_kamb,   n = 128L,   sigma = 3,   weights = NULL,   upper.hem = FALSE,   r = 1 )"},{"path":"https://tobiste.github.io/structr/reference/density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spherical density estimation — density","text":"x object class \"Vec3()\", \"Line()\", \"Plane()\". ... arguments passed density_calc() FUN density estimation function kamb=TRUE; one exponential_kamb() (default), kamb_count, schmidt_count(). n integer. Gridzise. 128 default. sigma numeric. Radius Kamb circle used counting. 3 default. weights (optional) numeric vector length nrow(x). relative weight applied input measurement. array normalized sum 1, absolute value weights affect result. Defaults NULL upper.hem logical. Whether projection shown upper hemisphere (TRUE) lower hemisphere (FALSE, default). r numeric. radius stereonet circle","code":""},{"path":"https://tobiste.github.io/structr/reference/density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spherical density estimation — density","text":"","code":"set.seed(20250411) test <- rfb(100, mu = Line(120, 10), k = 5, A = diag(c(-1, 0, 1))) density(x = test, n = 100, sigma = 3, weights = runif(100)) #> $x #>   [1] -1.00000000 -0.97979798 -0.95959596 -0.93939394 -0.91919192 -0.89898990 #>   [7] -0.87878788 -0.85858586 -0.83838384 -0.81818182 -0.79797980 -0.77777778 #>  [13] -0.75757576 -0.73737374 -0.71717172 -0.69696970 -0.67676768 -0.65656566 #>  [19] -0.63636364 -0.61616162 -0.59595960 -0.57575758 -0.55555556 -0.53535354 #>  [25] -0.51515152 -0.49494949 -0.47474747 -0.45454545 -0.43434343 -0.41414141 #>  [31] -0.39393939 -0.37373737 -0.35353535 -0.33333333 -0.31313131 -0.29292929 #>  [37] -0.27272727 -0.25252525 -0.23232323 -0.21212121 -0.19191919 -0.17171717 #>  [43] -0.15151515 -0.13131313 -0.11111111 -0.09090909 -0.07070707 -0.05050505 #>  [49] -0.03030303 -0.01010101  0.01010101  0.03030303  0.05050505  0.07070707 #>  [55]  0.09090909  0.11111111  0.13131313  0.15151515  0.17171717  0.19191919 #>  [61]  0.21212121  0.23232323  0.25252525  0.27272727  0.29292929  0.31313131 #>  [67]  0.33333333  0.35353535  0.37373737  0.39393939  0.41414141  0.43434343 #>  [73]  0.45454545  0.47474747  0.49494949  0.51515152  0.53535354  0.55555556 #>  [79]  0.57575758  0.59595960  0.61616162  0.63636364  0.65656566  0.67676768 #>  [85]  0.69696970  0.71717172  0.73737374  0.75757576  0.77777778  0.79797980 #>  [91]  0.81818182  0.83838384  0.85858586  0.87878788  0.89898990  0.91919192 #>  [97]  0.93939394  0.95959596  0.97979798  1.00000000 #>  #> $y #>   [1] -1.00000000 -0.97979798 -0.95959596 -0.93939394 -0.91919192 -0.89898990 #>   [7] -0.87878788 -0.85858586 -0.83838384 -0.81818182 -0.79797980 -0.77777778 #>  [13] -0.75757576 -0.73737374 -0.71717172 -0.69696970 -0.67676768 -0.65656566 #>  [19] -0.63636364 -0.61616162 -0.59595960 -0.57575758 -0.55555556 -0.53535354 #>  [25] -0.51515152 -0.49494949 -0.47474747 -0.45454545 -0.43434343 -0.41414141 #>  [31] -0.39393939 -0.37373737 -0.35353535 -0.33333333 -0.31313131 -0.29292929 #>  [37] -0.27272727 -0.25252525 -0.23232323 -0.21212121 -0.19191919 -0.17171717 #>  [43] -0.15151515 -0.13131313 -0.11111111 -0.09090909 -0.07070707 -0.05050505 #>  [49] -0.03030303 -0.01010101  0.01010101  0.03030303  0.05050505  0.07070707 #>  [55]  0.09090909  0.11111111  0.13131313  0.15151515  0.17171717  0.19191919 #>  [61]  0.21212121  0.23232323  0.25252525  0.27272727  0.29292929  0.31313131 #>  [67]  0.33333333  0.35353535  0.37373737  0.39393939  0.41414141  0.43434343 #>  [73]  0.45454545  0.47474747  0.49494949  0.51515152  0.53535354  0.55555556 #>  [79]  0.57575758  0.59595960  0.61616162  0.63636364  0.65656566  0.67676768 #>  [85]  0.69696970  0.71717172  0.73737374  0.75757576  0.77777778  0.79797980 #>  [91]  0.81818182  0.83838384  0.85858586  0.87878788  0.89898990  0.91919192 #>  [97]  0.93939394  0.95959596  0.97979798  1.00000000 #>  #> $density #>        [,1]       [,2]       [,3]       [,4]       [,5]       [,6]       [,7] #>   [1,]   NA         NA         NA         NA         NA         NA         NA #>   [2,]   NA         NA         NA         NA         NA         NA         NA #>   [3,]   NA         NA         NA         NA         NA         NA         NA #>   [4,]   NA         NA         NA         NA         NA         NA         NA #>   [5,]   NA         NA         NA         NA         NA         NA         NA #>   [6,]   NA         NA         NA         NA         NA         NA         NA #>   [7,]   NA         NA         NA         NA         NA         NA         NA #>   [8,]   NA         NA         NA         NA         NA         NA         NA #>   [9,]   NA         NA         NA         NA         NA         NA         NA #>  [10,]   NA         NA         NA         NA         NA         NA         NA #>  [11,]   NA         NA         NA         NA         NA         NA         NA #>  [12,]   NA         NA         NA         NA         NA         NA         NA #>  [13,]   NA         NA         NA         NA         NA         NA         NA #>  [14,]   NA         NA         NA         NA         NA         NA         NA #>  [15,]   NA         NA         NA         NA         NA         NA         NA #>  [16,]   NA         NA         NA         NA         NA         NA         NA #>  [17,]   NA         NA         NA         NA         NA         NA         NA #>  [18,]   NA         NA         NA         NA         NA         NA         NA #>  [19,]   NA         NA         NA         NA         NA         NA         NA #>  [20,]   NA         NA         NA         NA         NA         NA         NA #>  [21,]   NA         NA         NA         NA         NA         NA         NA #>  [22,]   NA         NA         NA         NA         NA         NA         NA #>  [23,]   NA         NA         NA         NA         NA         NA         NA #>  [24,]   NA         NA         NA         NA         NA         NA         NA #>  [25,]   NA         NA         NA         NA         NA         NA         NA #>  [26,]   NA         NA         NA         NA         NA         NA         NA #>  [27,]   NA         NA         NA         NA         NA         NA 0.00000000 #>  [28,]   NA         NA         NA         NA         NA         NA 0.00000000 #>  [29,]   NA         NA         NA         NA         NA 0.00000000 0.00000000 #>  [30,]   NA         NA         NA         NA         NA 0.00000000 0.00000000 #>  [31,]   NA         NA         NA         NA         NA 0.00000000 0.00000000 #>  [32,]   NA         NA         NA         NA 0.00000000 0.00000000 0.00000000 #>  [33,]   NA         NA         NA         NA 0.00000000 0.00000000 0.00000000 #>  [34,]   NA         NA         NA 0.00000000 0.00000000 0.00000000 0.00000000 #>  [35,]   NA         NA         NA 0.00000000 0.00000000 0.00000000 0.00000000 #>  [36,]   NA         NA         NA 0.00000000 0.00000000 0.00000000 0.00000000 #>  [37,]   NA         NA 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [38,]   NA         NA 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [39,]   NA         NA 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [40,]   NA         NA 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [41,]   NA 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [42,]   NA 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [43,]   NA 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [44,]   NA 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [45,]   NA 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [46,]   NA 0.05987916 0.06147972 0.05694183 0.04737044 0.03463413 0.02113331 #>  [47,]   NA 0.13405079 0.13909802 0.13583679 0.12543837 0.10997806 0.09215166 #>  [48,]   NA 0.21946320 0.22848056 0.22675768 0.21551349 0.19702815 0.17430532 #>  [49,]   NA 0.31628662 0.32995626 0.33019720 0.31824953 0.29659089 0.26854235 #>  [50,]   NA 0.42441121 0.44358364 0.44639741 0.43407807 0.40928603 0.37566450 #>  [51,]   NA 0.54339390 0.56909207 0.57528661 0.56314216 0.53547779 0.49625633 #>  [52,]   NA 0.67241654 0.70583274 0.71642405 0.70523576 0.67520981 0.63061627 #>  [53,]   NA 0.81025996 0.85274419 0.86895760 0.85975419 0.82814926 0.77869506 #>  [54,]   NA 0.95529831 1.00833730 1.03159931 1.02566096 0.99354553 0.94004716 #>  [55,]   NA 1.10551691 1.17070319 1.20262319 1.20147540 1.17020839 1.11380024 #>  [56,]   NA 1.25855510 1.33754655 1.37988779 1.38528444 1.35650927 1.29864680 #>  [57,]   NA 1.41177400 1.50624449 1.56088486 1.57478012 1.55040770 1.49286018 #>  [58,]   NA 1.56234653 1.67392933 1.74281237 1.76732198 1.74950268 1.69433530 #>  [59,]   NA 1.70736516 1.83759081 1.92266872 1.96002125 1.95110639 1.90065197 #>  [60,]   NA 1.84396076 1.99419175 2.09736175 2.14984142 2.15233503 2.10915599 #>  [61,]   NA         NA 2.14078924 2.26382538 2.33370757 2.35020976 2.31705126 #>  [62,]   NA         NA 2.27465274 2.41913488 2.50861608 2.54175907 2.52149424 #>  [63,]   NA         NA 2.39337103 2.56061269 2.67173584 2.72411357 2.71968176 #>  [64,]   NA         NA 2.49494074 2.68591713 2.82049336 2.89458521 2.90892338 #>  [65,]   NA         NA         NA 2.79310932 2.95263655 3.05072493 3.08669189 #>  [66,]   NA         NA         NA 2.88069616 3.06627497 3.19035643 3.25064877 #>  [67,]   NA         NA         NA 2.94765080 3.15989846 3.31158774 3.39864575 #>  [68,]   NA         NA         NA         NA 3.23237947 3.41280667 3.52870880 #>  [69,]   NA         NA         NA         NA 3.28296731 3.49266990 3.63901517 #>  [70,]   NA         NA         NA         NA         NA 3.55009750 3.72787743 #>  [71,]   NA         NA         NA         NA         NA 3.58428441 3.79374935 #>  [72,]   NA         NA         NA         NA         NA 3.59473735 3.83526628 #>  [73,]   NA         NA         NA         NA         NA         NA 3.85132765 #>  [74,]   NA         NA         NA         NA         NA         NA 3.84122053 #>  [75,]   NA         NA         NA         NA         NA         NA         NA #>  [76,]   NA         NA         NA         NA         NA         NA         NA #>  [77,]   NA         NA         NA         NA         NA         NA         NA #>  [78,]   NA         NA         NA         NA         NA         NA         NA #>  [79,]   NA         NA         NA         NA         NA         NA         NA #>  [80,]   NA         NA         NA         NA         NA         NA         NA #>  [81,]   NA         NA         NA         NA         NA         NA         NA #>  [82,]   NA         NA         NA         NA         NA         NA         NA #>  [83,]   NA         NA         NA         NA         NA         NA         NA #>  [84,]   NA         NA         NA         NA         NA         NA         NA #>  [85,]   NA         NA         NA         NA         NA         NA         NA #>  [86,]   NA         NA         NA         NA         NA         NA         NA #>  [87,]   NA         NA         NA         NA         NA         NA         NA #>  [88,]   NA         NA         NA         NA         NA         NA         NA #>  [89,]   NA         NA         NA         NA         NA         NA         NA #>  [90,]   NA         NA         NA         NA         NA         NA         NA #>  [91,]   NA         NA         NA         NA         NA         NA         NA #>  [92,]   NA         NA         NA         NA         NA         NA         NA #>  [93,]   NA         NA         NA         NA         NA         NA         NA #>  [94,]   NA         NA         NA         NA         NA         NA         NA #>  [95,]   NA         NA         NA         NA         NA         NA         NA #>  [96,]   NA         NA         NA         NA         NA         NA         NA #>  [97,]   NA         NA         NA         NA         NA         NA         NA #>  [98,]   NA         NA         NA         NA         NA         NA         NA #>  [99,]   NA         NA         NA         NA         NA         NA         NA #> [100,]   NA         NA         NA         NA         NA         NA         NA #>               [,8]        [,9]       [,10]       [,11]      [,12]      [,13] #>   [1,]          NA          NA          NA          NA         NA         NA #>   [2,]          NA          NA          NA          NA         NA         NA #>   [3,]          NA          NA          NA          NA         NA         NA #>   [4,]          NA          NA          NA          NA         NA         NA #>   [5,]          NA          NA          NA          NA         NA         NA #>   [6,]          NA          NA          NA          NA         NA         NA #>   [7,]          NA          NA          NA          NA         NA         NA #>   [8,]          NA          NA          NA          NA         NA         NA #>   [9,]          NA          NA          NA          NA         NA         NA #>  [10,]          NA          NA          NA          NA         NA         NA #>  [11,]          NA          NA          NA          NA         NA         NA #>  [12,]          NA          NA          NA          NA         NA         NA #>  [13,]          NA          NA          NA          NA         NA         NA #>  [14,]          NA          NA          NA          NA         NA         NA #>  [15,]          NA          NA          NA          NA         NA         NA #>  [16,]          NA          NA          NA          NA         NA         NA #>  [17,]          NA          NA          NA          NA         NA         NA #>  [18,]          NA          NA          NA          NA         NA         NA #>  [19,]          NA          NA          NA          NA         NA 0.00000000 #>  [20,]          NA          NA          NA          NA 0.00000000 0.00000000 #>  [21,]          NA          NA          NA 0.000000000 0.00000000 0.00000000 #>  [22,]          NA          NA          NA 0.000000000 0.00000000 0.00000000 #>  [23,]          NA          NA 0.000000000 0.000000000 0.00000000 0.00000000 #>  [24,]          NA 0.000000000 0.000000000 0.000000000 0.00000000 0.00000000 #>  [25,]          NA 0.000000000 0.000000000 0.000000000 0.00000000 0.00000000 #>  [26,] 0.000000000 0.000000000 0.000000000 0.000000000 0.00000000 0.00000000 #>  [27,] 0.000000000 0.000000000 0.000000000 0.000000000 0.00000000 0.00000000 #>  [28,] 0.000000000 0.000000000 0.000000000 0.000000000 0.00000000 0.00000000 #>  [29,] 0.000000000 0.000000000 0.000000000 0.000000000 0.00000000 0.00000000 #>  [30,] 0.000000000 0.000000000 0.000000000 0.000000000 0.00000000 0.00000000 #>  [31,] 0.000000000 0.000000000 0.000000000 0.000000000 0.00000000 0.00000000 #>  [32,] 0.000000000 0.000000000 0.000000000 0.000000000 0.00000000 0.00000000 #>  [33,] 0.000000000 0.000000000 0.000000000 0.000000000 0.00000000 0.00000000 #>  [34,] 0.000000000 0.000000000 0.000000000 0.000000000 0.00000000 0.00000000 #>  [35,] 0.000000000 0.000000000 0.000000000 0.000000000 0.00000000 0.00000000 #>  [36,] 0.000000000 0.000000000 0.000000000 0.000000000 0.00000000 0.00000000 #>  [37,] 0.000000000 0.000000000 0.000000000 0.000000000 0.00000000 0.00000000 #>  [38,] 0.000000000 0.000000000 0.000000000 0.000000000 0.00000000 0.00000000 #>  [39,] 0.000000000 0.000000000 0.000000000 0.000000000 0.00000000 0.00000000 #>  [40,] 0.000000000 0.000000000 0.000000000 0.000000000 0.00000000 0.00000000 #>  [41,] 0.000000000 0.000000000 0.000000000 0.000000000 0.00000000 0.00000000 #>  [42,] 0.000000000 0.000000000 0.000000000 0.000000000 0.00000000 0.00000000 #>  [43,] 0.000000000 0.000000000 0.000000000 0.000000000 0.00000000 0.00000000 #>  [44,] 0.000000000 0.000000000 0.000000000 0.000000000 0.00000000 0.00000000 #>  [45,] 0.000000000 0.000000000 0.000000000 0.000000000 0.00000000 0.02274218 #>  [46,] 0.009499235 0.002271149 0.001590653 0.008943586 0.02497259 0.04937795 #>  [47,] 0.074924481 0.061168925 0.053334177 0.053178434 0.06158382 0.07846670 #>  [48,] 0.150668044 0.129354292 0.113160224 0.104162111 0.10353341 0.11146414 #>  [49,] 0.237808085 0.208025522 0.182379913 0.163314369 0.15234811 0.15000386 #>  [50,] 0.337319716 0.298322089 0.262288923 0.232080215 0.20961631 0.19581164 #>  [51,] 0.450002146 0.401249378 0.354089003 0.311847246 0.27690008 0.25061114 #>  [52,] 0.576406072 0.517602384 0.458807691 0.403860912 0.35564550 0.31602872 #>  [53,] 0.716766993 0.647894289 0.577222395 0.509144289 0.44709825 0.39350524 #>  [54,] 0.870950177 0.792295781 0.709794879 0.628428565 0.55223102 0.48422128 #>  [55,] 1.038412539 0.950590484 0.856621529 0.762099552 0.67168783 0.58904091 #>  [56,] 1.218185644 1.122150771 1.017403601 0.910164224 0.80574885 0.70847716 #>  [57,] 1.408882454 1.305936680 1.191440092 1.072239620 0.95431778 0.84268019 #>  [58,] 1.608728406 1.500518687 1.377643947 1.247564542 1.11693130 0.99144743 #>  [59,] 1.815615001 1.704122794 1.574580138 1.435032450 1.29278899 1.15425270 #>  [60,] 2.027171664 1.914693985 1.780521892 1.633241846 1.48079946 1.33029015 #>  [61,] 2.240849263 2.129971829 1.993519165 1.840558502 1.67963734 1.51852713 #>  [62,] 2.454006941 2.347570111 2.211471586 2.055182132 1.88780398 1.71775921 #>  [63,] 2.663992952 2.565051249 2.432196896 2.275208966 2.10368390 1.92666011 #>  [64,] 2.868210498 2.779986248 2.653485606 2.498681263 2.32558871 2.14381874 #>  [65,] 3.064161265 2.989992255 2.873133618 2.723615503 2.55178048 2.36775667 #>  [66,] 3.249462552 3.192742649 3.088946915 2.948002950 2.78046853 2.59692014 #>  [67,] 3.421838362 3.385948871 3.298716366 3.169779681 3.00977612 2.82964359 #>  [68,] 3.579090057 3.567318532 3.500165810 3.386767879 3.23767785 3.06408477 #>  [69,] 3.719057516 3.734500101 3.690882463 3.596595822 3.46191350 3.29813607 #>  [70,] 3.839585989 3.885029713 3.868244519 3.796609999 3.67988995 3.52932177 #>  [71,] 3.938516185 4.016299234 4.029365481 3.983798123 3.88858831 3.75469594 #>  [72,] 4.013714401 4.125565632 4.171077222 4.154745504 4.08449764 3.97076083 #>  [73,] 4.063155251 4.210019002 4.289972816 4.305647997 4.26359912 4.17342792 #>  [74,] 4.085061680 4.266919882 4.382525246 4.432401799 4.42142320 4.35804508 #>  [75,] 4.078096163 4.293806051 4.445288867 4.530782971 4.55319717 4.51950939 #>  [76,]          NA 4.288755952 4.475177697 4.596718094 4.65409108 4.65247858 #>  [77,]          NA 4.250682120 4.469799768 4.626632753 4.71955646 4.75168249 #>  [78,]          NA          NA 4.427812098 4.617848580 4.74573656 4.81232137 #>  [79,]          NA          NA          NA 4.568984996 4.72991052 4.83052183 #>  [80,]          NA          NA          NA 4.480311578 4.67092053 4.80380574 #>  [81,]          NA          NA          NA          NA 4.56952303 4.73151629 #>  [82,]          NA          NA          NA          NA         NA 4.61514035 #>  [83,]          NA          NA          NA          NA         NA         NA #>  [84,]          NA          NA          NA          NA         NA         NA #>  [85,]          NA          NA          NA          NA         NA         NA #>  [86,]          NA          NA          NA          NA         NA         NA #>  [87,]          NA          NA          NA          NA         NA         NA #>  [88,]          NA          NA          NA          NA         NA         NA #>  [89,]          NA          NA          NA          NA         NA         NA #>  [90,]          NA          NA          NA          NA         NA         NA #>  [91,]          NA          NA          NA          NA         NA         NA #>  [92,]          NA          NA          NA          NA         NA         NA #>  [93,]          NA          NA          NA          NA         NA         NA #>  [94,]          NA          NA          NA          NA         NA         NA #>  [95,]          NA          NA          NA          NA         NA         NA #>  [96,]          NA          NA          NA          NA         NA         NA #>  [97,]          NA          NA          NA          NA         NA         NA #>  [98,]          NA          NA          NA          NA         NA         NA #>  [99,]          NA          NA          NA          NA         NA         NA #> [100,]          NA          NA          NA          NA         NA         NA #>             [,14]      [,15]       [,16]       [,17]      [,18]        [,19] #>   [1,]         NA         NA          NA          NA         NA           NA #>   [2,]         NA         NA          NA          NA         NA           NA #>   [3,]         NA         NA          NA          NA         NA           NA #>   [4,]         NA         NA          NA          NA         NA           NA #>   [5,]         NA         NA          NA          NA         NA           NA #>   [6,]         NA         NA          NA          NA         NA           NA #>   [7,]         NA         NA          NA          NA         NA           NA #>   [8,]         NA         NA          NA          NA         NA           NA #>   [9,]         NA         NA          NA          NA         NA           NA #>  [10,]         NA         NA          NA          NA         NA           NA #>  [11,]         NA         NA          NA          NA         NA           NA #>  [12,]         NA         NA          NA          NA         NA           NA #>  [13,]         NA         NA          NA          NA         NA 0.2314302107 #>  [14,]         NA         NA          NA          NA 0.15986765 0.1049140107 #>  [15,]         NA         NA          NA 0.102402891 0.04583811 0.0007485577 #>  [16,]         NA         NA 0.057251335 0.000000000 0.00000000 0.0000000000 #>  [17,]         NA 0.02264077 0.000000000 0.000000000 0.00000000 0.0000000000 #>  [18,] 0.00000000 0.00000000 0.000000000 0.000000000 0.00000000 0.0000000000 #>  [19,] 0.00000000 0.00000000 0.000000000 0.000000000 0.00000000 0.0000000000 #>  [20,] 0.00000000 0.00000000 0.000000000 0.000000000 0.00000000 0.0000000000 #>  [21,] 0.00000000 0.00000000 0.000000000 0.000000000 0.00000000 0.0000000000 #>  [22,] 0.00000000 0.00000000 0.000000000 0.000000000 0.00000000 0.0000000000 #>  [23,] 0.00000000 0.00000000 0.000000000 0.000000000 0.00000000 0.0000000000 #>  [24,] 0.00000000 0.00000000 0.000000000 0.000000000 0.00000000 0.0000000000 #>  [25,] 0.00000000 0.00000000 0.000000000 0.000000000 0.00000000 0.0000000000 #>  [26,] 0.00000000 0.00000000 0.000000000 0.000000000 0.00000000 0.0000000000 #>  [27,] 0.00000000 0.00000000 0.000000000 0.000000000 0.00000000 0.0000000000 #>  [28,] 0.00000000 0.00000000 0.000000000 0.000000000 0.00000000 0.0000000000 #>  [29,] 0.00000000 0.00000000 0.000000000 0.000000000 0.00000000 0.0000000000 #>  [30,] 0.00000000 0.00000000 0.000000000 0.000000000 0.00000000 0.0000000000 #>  [31,] 0.00000000 0.00000000 0.000000000 0.000000000 0.00000000 0.0000000000 #>  [32,] 0.00000000 0.00000000 0.000000000 0.000000000 0.00000000 0.0000000000 #>  [33,] 0.00000000 0.00000000 0.000000000 0.000000000 0.00000000 0.0000000000 #>  [34,] 0.00000000 0.00000000 0.000000000 0.000000000 0.00000000 0.0000000000 #>  [35,] 0.00000000 0.00000000 0.000000000 0.000000000 0.00000000 0.0000000000 #>  [36,] 0.00000000 0.00000000 0.000000000 0.000000000 0.00000000 0.0000000000 #>  [37,] 0.00000000 0.00000000 0.000000000 0.000000000 0.00431746 0.0342030715 #>  [38,] 0.00000000 0.00000000 0.000000000 0.009199796 0.04759879 0.0794779224 #>  [39,] 0.00000000 0.00000000 0.002712181 0.047879070 0.08850701 0.1219074548 #>  [40,] 0.00000000 0.00000000 0.036282684 0.083458784 0.12564868 0.1600235244 #>  [41,] 0.00000000 0.01612927 0.066541338 0.114837885 0.15782713 0.1925786901 #>  [42,] 0.00000000 0.04216820 0.092775727 0.141199676 0.18415995 0.2186670899 #>  [43,] 0.01660702 0.06502310 0.114617507 0.162107943 0.20417856 0.2378248644 #>  [44,] 0.03890262 0.08479430 0.132109836 0.177576904 0.21789843 0.2500985659 #>  [45,] 0.06003784 0.10198732 0.145743850 0.188106594 0.22585162 0.2560731891 #>  [46,] 0.08091851 0.11751651 0.156459394 0.194679086 0.22907713 0.2568558191 #>  [47,] 0.10278981 0.13267537 0.165609233 0.198715306 0.22906954 0.2540158431 #>  [48,] 0.12718295 0.14907608 0.174890047 0.201996672 0.22769098 0.2494875610 #>  [49,] 0.15583822 0.16856384 0.186247126 0.206559623 0.22705563 0.2454452128 #>  [50,] 0.19061145 0.19311445 0.201762355 0.214573900 0.22939859 0.2441634095 #>  [51,] 0.23337237 0.22472476 0.223536513 0.228216827 0.23694275 0.2478773344 #>  [52,] 0.28590378 0.26530594 0.253576918 0.249555734 0.25177659 0.2586567736 #>  [53,] 0.34980972 0.31658873 0.293700218 0.280449072 0.27575439 0.2783060758 #>  [54,] 0.42643970 0.38004762 0.345457812 0.322474094 0.31042709 0.3082988298 #>  [55,] 0.51683362 0.45684881 0.410088386 0.376885483 0.35700812 0.3497517569 #>  [56,] 0.62169012 0.54782370 0.488498793 0.444605512 0.41637448 0.4034375677 #>  [57,] 0.74135846 0.65346711 0.581271319 0.526242718 0.48909871 0.4698318536 #>  [58,] 0.87585193 0.77395713 0.688692707 0.622132933 0.57550443 0.5491850119 #>  [59,] 1.02487912 0.90919123 0.810798285 0.732394333 0.67573505 0.6416072079 #>  [60,] 1.18788771 1.05883253 0.947423414 0.856986974 0.78982439 0.7471528231 #>  [61,] 1.36411472 1.22235920 1.098254149 0.995767243 0.91775769 0.8658909311 #>  [62,] 1.55263637 1.39910992 1.262869533 1.148528658 1.05951302 0.9979500986 #>  [63,] 1.75241078 1.58831899 1.440769110 1.315022331 1.21507599 1.1435290376 #>  [64,] 1.96230688 1.78913540 1.631380840 1.494952873 1.38442346 1.3028689456 #>  [65,] 2.18111366 2.00062153 1.834046556 1.687948313 1.56747625 1.4761882203 #>  [66,] 2.40752552 2.22172866 2.047984132 1.893505321 1.76402427 1.6635849962 #>  [67,] 2.64010108 2.45124837 2.272227567 2.110913521 1.97363053 1.8649170048 #>  [68,] 2.87719613 2.68774133 2.505548269 2.339164685 2.19552311 2.0796711043 #>  [69,] 3.11687438 2.92944764 2.746362829 2.576854140 2.42848514 2.3068361398 #>  [70,] 3.35680439 3.17418596 2.992634636 2.822082814 2.67075327 2.5447925235 #>  [71,] 3.59415523 3.41925220 3.241778843 3.072369106 2.91993460 2.7912302605 #>  [72,] 3.82550770 3.66133187 3.490582282 3.324580406 3.17295099 3.0431045071 #>  [73,] 4.04680139 3.89644307 3.735151919 3.574894598 3.42601848 3.2966346850 #>  [74,] 4.25333914 4.11992888 3.970906746 3.818802278 3.67466844 3.5473502436 #>  [75,] 4.43986911 4.32651765 4.192628302 4.051160383 3.91381624 3.7901837863 #>  [76,] 4.60075988 4.51046678 4.394583414 4.266307046 4.13788210 4.0196106059 #>  [77,] 4.73027509 4.66579940 4.570728714 4.458245097 4.34096748 4.2298325469 #>  [78,] 4.82294188 4.78663344 4.714999575 4.620897219 4.51708808 4.4150030303 #>  [79,] 4.87399235 4.86759020 4.821676269 4.748428945 4.66046015 4.5694883903 #>  [80,] 4.87984204 4.90425525 4.885808272 4.835626630 4.76583126 4.6881578074 #>  [81,] 4.83855588 4.89365070 4.903665016 4.878307222 4.82883905 4.7666898703 #>  [82,] 4.75024372 4.83466756 4.873170451 4.873726601 4.84637356 4.8018786137 #>  [83,] 4.61732687 4.72840211 4.794271872 4.820945679 4.81691187 4.7919168740 #>  [84,]         NA 4.57834348 4.669192837 4.721110590 4.74079023 4.7366316234 #>  [85,]         NA         NA 4.502526995 4.577606580 4.62037965 4.6376461566 #>  [86,]         NA         NA          NA 4.396054966 4.46013774 4.4984484728 #>  [87,]         NA         NA          NA          NA 4.26652017 4.3243533594 #>  [88,]         NA         NA          NA          NA         NA 4.1223553319 #>  [89,]         NA         NA          NA          NA         NA           NA #>  [90,]         NA         NA          NA          NA         NA           NA #>  [91,]         NA         NA          NA          NA         NA           NA #>  [92,]         NA         NA          NA          NA         NA           NA #>  [93,]         NA         NA          NA          NA         NA           NA #>  [94,]         NA         NA          NA          NA         NA           NA #>  [95,]         NA         NA          NA          NA         NA           NA #>  [96,]         NA         NA          NA          NA         NA           NA #>  [97,]         NA         NA          NA          NA         NA           NA #>  [98,]         NA         NA          NA          NA         NA           NA #>  [99,]         NA         NA          NA          NA         NA           NA #> [100,]         NA         NA          NA          NA         NA           NA #>              [,20]      [,21]       [,22]      [,23]       [,24]      [,25] #>   [1,]          NA         NA          NA         NA          NA         NA #>   [2,]          NA         NA          NA         NA          NA         NA #>   [3,]          NA         NA          NA         NA          NA         NA #>   [4,]          NA         NA          NA         NA          NA         NA #>   [5,]          NA         NA          NA         NA          NA         NA #>   [6,]          NA         NA          NA         NA          NA         NA #>   [7,]          NA         NA          NA         NA          NA         NA #>   [8,]          NA         NA          NA         NA          NA         NA #>   [9,]          NA         NA          NA         NA 0.645062617 0.61587218 #>  [10,]          NA         NA          NA 0.50093145 0.468293564 0.44740093 #>  [11,]          NA 0.42321676 0.375312055 0.33948432 0.315261581 0.30200542 #>  [12,] 0.318755754 0.26810068 0.229409624 0.20210895 0.185473008 0.17873379 #>  [13,] 0.178432443 0.13724396 0.107194858 0.08747012 0.077227421 0.07567161 #>  [14,] 0.061600473 0.02917190 0.006726617 0.00000000 0.000000000 0.00000000 #>  [15,] 0.000000000 0.00000000 0.000000000 0.00000000 0.000000000 0.00000000 #>  [16,] 0.000000000 0.00000000 0.000000000 0.00000000 0.000000000 0.00000000 #>  [17,] 0.000000000 0.00000000 0.000000000 0.00000000 0.000000000 0.00000000 #>  [18,] 0.000000000 0.00000000 0.000000000 0.00000000 0.000000000 0.00000000 #>  [19,] 0.000000000 0.00000000 0.000000000 0.00000000 0.000000000 0.00000000 #>  [20,] 0.000000000 0.00000000 0.000000000 0.00000000 0.000000000 0.00000000 #>  [21,] 0.000000000 0.00000000 0.000000000 0.00000000 0.000000000 0.00000000 #>  [22,] 0.000000000 0.00000000 0.000000000 0.00000000 0.000000000 0.00000000 #>  [23,] 0.000000000 0.00000000 0.000000000 0.00000000 0.000000000 0.00000000 #>  [24,] 0.000000000 0.00000000 0.000000000 0.00000000 0.000000000 0.00000000 #>  [25,] 0.000000000 0.00000000 0.000000000 0.00000000 0.000000000 0.00000000 #>  [26,] 0.000000000 0.00000000 0.000000000 0.00000000 0.000000000 0.00000000 #>  [27,] 0.000000000 0.00000000 0.000000000 0.00000000 0.000000000 0.00000000 #>  [28,] 0.000000000 0.00000000 0.000000000 0.00000000 0.000000000 0.00000000 #>  [29,] 0.000000000 0.00000000 0.000000000 0.00000000 0.000000000 0.00000000 #>  [30,] 0.000000000 0.00000000 0.000000000 0.00000000 0.000000000 0.00000000 #>  [31,] 0.000000000 0.00000000 0.000000000 0.00000000 0.000000000 0.00000000 #>  [32,] 0.000000000 0.00000000 0.000000000 0.00000000 0.000000000 0.00000000 #>  [33,] 0.000000000 0.00000000 0.000000000 0.00000000 0.000000000 0.00000000 #>  [34,] 0.000000000 0.00000000 0.000000000 0.00000000 0.000000000 0.00000000 #>  [35,] 0.000000000 0.00000000 0.000000000 0.00000000 0.000000000 0.00000000 #>  [36,] 0.008428095 0.02115265 0.025097489 0.02021836 0.007133187 0.00000000 #>  [37,] 0.056384969 0.06944972 0.072680501 0.06611949 0.050543632 0.02736189 #>  [38,] 0.102731074 0.11588137 0.118230629 0.10991827 0.091885277 0.06575353 #>  [39,] 0.145859833 0.15884448 0.160195811 0.15015632 0.129828222 0.10103566 #>  [40,] 0.184277134 0.19686814 0.197174387 0.18554076 0.163218893 0.13221393 #>  [41,] 0.216731980 0.22874384 0.228041789 0.21506490 0.191192712 0.15857913 #>  [42,] 0.242337856 0.25364452 0.252064780 0.23811560 0.213273116 0.17979702 #>  [43,] 0.260671492 0.27121936 0.268990476 0.25455521 0.229445553 0.19597430 #>  [44,] 0.271837508 0.28165314 0.279099337 0.26476763 0.240196894 0.20769190 #>  [45,] 0.276490815 0.28568231 0.283214759 0.26966188 0.246513725 0.21599946 #>  [46,] 0.275813135 0.28456457 0.282666305 0.27063016 0.249836883 0.22236825 #>  [47,] 0.271445102 0.28000363 0.279208616 0.26946257 0.251974022 0.22860379 #>  [48,] 0.265380341 0.27403619 0.274902873 0.26822517 0.254976487 0.23672395 #>  [49,] 0.259832235 0.26889194 0.271971987 0.26911230 0.260990877 0.24881172 #>  [50,] 0.257087068 0.26684094 0.272643811 0.27428736 0.272098983 0.26685597 #>  [51,] 0.259358700 0.27004395 0.278998357 0.28572801 0.290161941 0.29259532 #>  [52,] 0.268659615 0.28042128 0.292834975 0.30509205 0.316685069 0.32738188 #>  [53,] 0.286701168 0.29955356 0.315573706 0.33361902 0.352718864 0.37208067 #>  [54,] 0.314832396 0.32862459 0.348201585 0.37207889 0.398808753 0.42701866 #>  [55,] 0.354022190 0.36841154 0.391269901 0.42077499 0.455001681 0.49199258 #>  [56,] 0.404884449 0.41932212 0.444942616 0.47960204 0.520911529 0.56633896 #>  [57,] 0.467740654 0.48147300 0.509089967 0.54815361 0.595838401 0.64906255 #>  [58,] 0.542709636 0.55479819 0.583415394 0.62586685 0.678929584 0.73901113 #>  [59,] 0.629810774 0.63917188 0.667598992 0.71218658 0.769363508 0.83507788 #>  [60,] 0.729064935 0.73452818 0.761437601 0.80672686 0.866533216 0.93640619 #>  [61,] 0.840577375 0.84095921 0.864960791 0.90940693 0.970203732 1.04256924 #>  [62,] 0.964588803 0.95877565 0.978503907 1.02053980 1.080618825 1.15369702 #>  [63,] 1.101484584 1.08851744 1.102723802 1.14085655 1.198537306 1.27052782 #>  [64,] 1.251757244 1.23090894 1.238549729 1.27145661 1.325186859 1.39436966 #>  [65,] 1.415923471 1.38675957 1.387070048 1.41368393 1.462133578 1.52696773 #>  [66,] 1.594402754 1.55681844 1.549364060 1.56893843 1.611076655 1.67028676 #>  [67,] 1.787369989 1.74159792 1.726296128 1.73844178 1.773588356 1.82622898 #>  [68,] 1.994598034 1.94118566 1.918295058 1.92298359 1.950828034 1.99631858 #>  [69,] 2.215307799 2.15506693 2.125144782 2.12267802 2.143264039 2.18139001 #>  [70,] 2.448042922 2.38197841 2.345811976 2.33676112 2.350438171 2.38131867 #>  [71,] 2.690583465 2.61981140 2.578332579 2.56345518 2.570803495 2.59482947 #>  [72,] 2.939908919 2.86557682 2.819772619 2.79991896 2.801658379 2.81941008 #>  [73,] 3.192215853 3.11543783 3.066270313 3.04229307 3.039188545 3.05134381 #>  [74,] 3.442990575 3.36480849 3.313157357 3.28583840 3.278616284 3.28586286 #>  [75,] 3.687132981 3.60851106 3.555148923 3.52515542 3.514443551 3.51740863 #>  [76,] 3.919124820 3.84097956 3.786585393 3.75446342 3.740765156 3.73997327 #>  [77,] 4.133234087 4.05649496 4.001705030 3.96791342 3.951621117 3.94748763 #>  [78,] 4.323746835 4.24943696 4.194925862 4.15990663 4.141354245 4.13421697 #>  [79,] 4.485217778 4.41453838 4.361116780 4.32539211 4.304940312 4.29512572 #>  [80,] 4.612730796 4.54713021 4.495841194 4.46012136 4.438263019 4.42617832 #>  [81,] 4.702159389 4.64336692 4.595560745 4.56084400 4.538313230 4.52455070 #>  [82,] 4.750415033 4.70042295 4.657790380 4.62543440 4.603300231 4.58873728 #>  [83,] 4.755668889 4.71665121 4.681199414 4.65294552 4.632670931 4.61854807 #>  [84,] 4.717530729 4.69169560 4.665656143 4.64359148 4.627040589 4.61500008 #>  [85,] 4.637169439 4.62655062 4.612217235 4.59866576 4.588046148 4.58011638 #>  [86,] 4.517363232 4.52356595 4.523068194 4.52040905 4.518141342 4.51665550 #>  [87,] 4.362474286 4.38639938 4.401427962 4.41184798 4.420361951 4.42780412 #>  [88,] 4.178350136 4.21992881 4.251437626 4.27663447 4.298099071 4.31687745 #>  [89,] 3.972159359 4.03013744 4.078057144 4.11892015 4.154925208 4.18708043 #>  [90,]          NA 3.82398387 3.886990547 3.94329792 3.994517641 4.04138619 #>  [91,]          NA         NA          NA 3.75482761 3.820710192 3.88257771 #>  [92,]          NA         NA          NA         NA 3.637674307 3.71347062 #>  [93,]          NA         NA          NA         NA          NA         NA #>  [94,]          NA         NA          NA         NA          NA         NA #>  [95,]          NA         NA          NA         NA          NA         NA #>  [96,]          NA         NA          NA         NA          NA         NA #>  [97,]          NA         NA          NA         NA          NA         NA #>  [98,]          NA         NA          NA         NA          NA         NA #>  [99,]          NA         NA          NA         NA          NA         NA #> [100,]          NA         NA          NA         NA          NA         NA #>             [,26]      [,27]      [,28]      [,29]      [,30]       [,31] #>   [1,]         NA         NA         NA         NA         NA          NA #>   [2,]         NA         NA         NA         NA         NA          NA #>   [3,]         NA         NA         NA         NA         NA          NA #>   [4,]         NA         NA         NA         NA         NA          NA #>   [5,]         NA         NA         NA         NA         NA          NA #>   [6,]         NA         NA         NA 1.14806538 1.15145751 1.165030701 #>   [7,]         NA 0.96223432 0.95172890 0.95225719 0.96329202 0.984178390 #>   [8,] 0.78124415 0.76732698 0.76465460 0.77266144 0.79068462 0.817992892 #>   [9,] 0.59845488 0.59232884 0.59689060 0.61147232 0.63536894 0.667841318 #>  [10,] 0.43769677 0.43853330 0.44923142 0.46910805 0.49747724 0.533632927 #>  [11,] 0.29901342 0.30558266 0.32103899 0.34473847 0.37604847 0.414316575 #>  [12,] 0.18114941 0.19203678 0.21077513 0.23678781 0.26951012 0.308350808 #>  [13,] 0.08209183 0.09586850 0.11645755 0.14335940 0.17607978 0.214089373 #>  [14,] 0.00000000 0.01485140 0.03600852 0.06255237 0.09405561 0.130049016 #>  [15,] 0.00000000 0.00000000 0.00000000 0.00000000 0.02198775 0.055052363 #>  [16,] 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.000000000 #>  [17,] 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.000000000 #>  [18,] 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.000000000 #>  [19,] 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.000000000 #>  [20,] 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.000000000 #>  [21,] 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.000000000 #>  [22,] 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.000000000 #>  [23,] 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.000000000 #>  [24,] 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.000000000 #>  [25,] 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.000000000 #>  [26,] 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.000000000 #>  [27,] 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.000000000 #>  [28,] 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.000000000 #>  [29,] 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.000000000 #>  [30,] 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.000000000 #>  [31,] 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.000000000 #>  [32,] 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.000000000 #>  [33,] 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.000000000 #>  [34,] 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.000000000 #>  [35,] 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.000000000 #>  [36,] 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.000000000 #>  [37,] 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.000000000 #>  [38,] 0.03364270 0.00000000 0.00000000 0.00000000 0.00000000 0.000000000 #>  [39,] 0.06612227 0.02771538 0.00000000 0.00000000 0.00000000 0.000000000 #>  [40,] 0.09506546 0.05459595 0.01365960 0.00000000 0.00000000 0.000000000 #>  [41,] 0.11992038 0.07819185 0.03638736 0.00000000 0.00000000 0.000000000 #>  [42,] 0.14049014 0.09842843 0.05669526 0.01814666 0.00000000 0.000000000 #>  [43,] 0.15699117 0.11561145 0.07495020 0.03788791 0.00688332 0.000000000 #>  [44,] 0.17008159 0.13045203 0.09188570 0.05723182 0.02892187 0.008835577 #>  [45,] 0.18085360 0.14405895 0.10859642 0.07722410 0.05229874 0.035643580 #>  [46,] 0.19078690 0.15789508 0.12649998 0.09920602 0.07824530 0.065349477 #>  [47,] 0.20166392 0.17369755 0.14726481 0.12475239 0.10821627 0.099259945 #>  [48,] 0.21545134 0.19336519 0.17270576 0.15557783 0.14380901 0.138836926 #>  [49,] 0.23415626 0.21882007 0.20465297 0.19341490 0.18665300 0.185600456 #>  [50,] 0.25966916 0.25185397 0.24480336 0.23987204 0.23827556 0.241003706 #>  [51,] 0.29360820 0.29397389 0.29456776 0.29628293 0.29995429 0.306289420 #>  [52,] 0.33718160 0.34626260 0.35492954 0.36356301 0.37257133 0.382342023 #>  [53,] 0.39108443 0.40927164 0.42633236 0.44209083 0.45648750 0.469553767 #>  [54,] 0.45544475 0.48296237 0.50861408 0.53163272 0.55145570 0.567725384 #>  [55,] 0.52982998 0.56670788 0.60100110 0.63132664 0.65659150 0.676020874 #>  [56,] 0.61331836 0.65936241 0.70217209 0.73973634 0.77041417 0.792991957 #>  [57,] 0.70463313 0.75939748 0.81039193 0.85497899 0.89096359 0.916680169 #>  [58,] 0.80232828 0.86509490 0.92370785 0.97491979 1.01598869 1.044794410 #>  [59,] 0.90500680 0.97477790 1.04018947 1.09741665 1.14319194 1.174950203 #>  [60,] 1.01154561 1.08705372 1.15818620 1.22058834 1.27050385 1.304945690 #>  [61,] 1.12129721 1.20103646 1.27656911 1.34307272 1.39635367 1.433040541 #>  [62,] 1.23423824 1.31651758 1.39492285 1.46423844 1.51989861 1.558199158 #>  [63,] 1.35103891 1.43405517 1.51365595 1.58431631 1.64117520 1.680260258 #>  [64,] 1.47303582 1.55496166 1.63400599 1.70442380 1.76114398 1.800001544 #>  [65,] 1.60210209 1.68118109 1.75792831 1.82646873 1.88161083 1.919080194 #>  [66,] 1.74042237 1.81506222 1.88787238 1.95293379 2.00502397 2.039846006 #>  [67,] 1.89019362 1.95904760 2.02646519 2.08656027 2.13416360 2.165041856 #>  [68,] 2.05328412 2.11531231 2.17613562 2.22996432 2.27175665 2.297423037 #>  [69,] 2.23089077 2.28539440 2.33872338 2.38523078 2.42006188 2.439340480 #>  [70,] 2.42323706 2.46986288 2.51512125 2.55353476 2.58047729 2.592340454 #>  [71,] 2.62935136 2.66806654 2.70499682 2.73484061 2.75322123 2.756833903 #>  [72,] 2.84695640 2.87799833 2.90663252 2.92771955 2.93713145 2.931881635 #>  [73,] 3.07248810 3.09629702 3.11690828 3.12931373 3.12961238 3.115128049 #>  [74,] 3.30124682 3.31839116 3.33143492 3.33545698 3.32674301 3.302897644 #>  [75,] 3.52766791 3.53877370 3.54482721 3.54094270 3.52353750 3.490447849 #>  [76,] 3.74568481 3.75137942 3.75108935 3.73991171 3.71433152 3.672351532 #>  [77,] 3.94914688 3.95002574 3.94407140 3.92631785 3.89325143 3.842965879 #>  [78,] 4.13224908 4.12887030 4.11794779 4.09442016 4.05471363 3.996933527 #>  [79,] 4.28993001 4.28283804 4.26766717 4.23924831 4.19389840 4.129658426 #>  [80,] 4.41820011 4.40797493 4.38932710 4.35699200 4.30714686 4.237703211 #>  [81,] 4.51437045 4.50169508 4.48043729 4.44527538 4.39224005 4.319065861 #>  [82,] 4.57716343 4.56289960 4.54004718 4.50329074 4.44853368 4.373308856 #>  [83,] 4.60669845 4.59195840 4.56872782 4.53178079 4.47693781 4.401530972 #>  [84,] 4.60435643 4.59055827 4.56841086 4.53287222 4.47974512 4.406187271 #>  [85,] 4.57253735 4.56143145 4.54209883 4.50977520 4.46032347 4.390774873 #>  [86,] 4.51433526 4.50798975 4.49347153 4.46637322 4.42269724 4.359410237 #>  [87,] 4.43316643 4.43390051 4.42642415 4.40673763 4.37105046 4.316329792 #>  [88,] 4.33239863 4.34265362 4.34458556 4.33461262 4.30919385 4.265352578 #>  [89,] 4.21504093 4.23718223 4.25087929 4.25293073 4.24005132 4.209354086 #>  [90,] 4.08355996 4.11960959 4.14720278 4.16343360 4.16523644 4.149815389 #>  [91,] 3.93988284 3.99119401 4.03430509 4.06648251 4.08480349 4.086527734 #>  [92,] 3.78562284 3.85252556 3.91193206 3.96113913 3.99726026 4.017542092 #>  [93,] 3.62251724 3.70398579 3.77927170 3.84556904 3.89991192 3.939444644 #>  [94,]         NA 3.54641523 3.63566962 3.71776410 3.78955676 3.848001756 #>  [95,]         NA         NA         NA 3.57649573 3.66347599 3.739146621 #>  [96,]         NA         NA         NA         NA         NA          NA #>  [97,]         NA         NA         NA         NA         NA          NA #>  [98,]         NA         NA         NA         NA         NA          NA #>  [99,]         NA         NA         NA         NA         NA          NA #> [100,]         NA         NA         NA         NA         NA          NA #>             [,32]      [,33]       [,34]      [,35]       [,36]      [,37] #>   [1,]         NA         NA          NA         NA          NA         NA #>   [2,]         NA         NA          NA         NA          NA         NA #>   [3,]         NA         NA          NA         NA          NA 1.88316482 #>   [4,]         NA         NA 1.606590758 1.64050802 1.681665465 1.72921263 #>   [5,] 1.37289614 1.39765779 1.430837534 1.47160907 1.519063235 1.57222645 #>   [6,] 1.18815121 1.22006857 1.259936732 1.30682560 1.359729787 1.41758119 #>   [7,] 1.01416602 1.05242296 1.098037541 1.15001667 1.207287663 1.26870983 #>   [8,] 0.85379401 0.89722818 0.947355982 1.00314893 1.063489572 1.12718627 #>   [9,] 0.70810302 0.75529949 0.808487830 0.86662504 0.928570663 0.99310759 #>  [10,] 0.57682152 0.62621293 0.680877857 0.73977806 0.801774327 0.86565454 #>  [11,] 0.45883538 0.50881107 0.563342567 0.62141670 0.681922779 0.74368763 #>  [12,] 0.35265472 0.40167321 0.454548039 0.51031279 0.567913925 0.62625149 #>  [13,] 0.25678839 0.30348173 0.353368998 0.40555218 0.459062125 0.51290289 #>  [14,] 0.16999082 0.21324789 0.259092054 0.30671318 0.355249418 0.40383292 #>  [15,] 0.09137558 0.13039417 0.171464451 0.21387943 0.256900869 0.29980430 #>  [16,] 0.02041505 0.05471816 0.090620097 0.12752662 0.164831680 0.20196005 #>  [17,] 0.00000000 0.00000000 0.016931479 0.04833896 0.080029233 0.11157333 #>  [18,] 0.00000000 0.00000000 0.000000000 0.00000000 0.003431098 0.02980395 #>  [19,] 0.00000000 0.00000000 0.000000000 0.00000000 0.000000000 0.00000000 #>  [20,] 0.00000000 0.00000000 0.000000000 0.00000000 0.000000000 0.00000000 #>  [21,] 0.00000000 0.00000000 0.000000000 0.00000000 0.000000000 0.00000000 #>  [22,] 0.00000000 0.00000000 0.000000000 0.00000000 0.000000000 0.00000000 #>  [23,] 0.00000000 0.00000000 0.000000000 0.00000000 0.000000000 0.00000000 #>  [24,] 0.00000000 0.00000000 0.000000000 0.00000000 0.000000000 0.00000000 #>  [25,] 0.00000000 0.00000000 0.000000000 0.00000000 0.000000000 0.00000000 #>  [26,] 0.00000000 0.00000000 0.000000000 0.00000000 0.000000000 0.00000000 #>  [27,] 0.00000000 0.00000000 0.000000000 0.00000000 0.000000000 0.00000000 #>  [28,] 0.00000000 0.00000000 0.000000000 0.00000000 0.000000000 0.00000000 #>  [29,] 0.00000000 0.00000000 0.000000000 0.00000000 0.000000000 0.00000000 #>  [30,] 0.00000000 0.00000000 0.000000000 0.00000000 0.000000000 0.00000000 #>  [31,] 0.00000000 0.00000000 0.000000000 0.00000000 0.000000000 0.00000000 #>  [32,] 0.00000000 0.00000000 0.000000000 0.00000000 0.000000000 0.00000000 #>  [33,] 0.00000000 0.00000000 0.000000000 0.00000000 0.000000000 0.00000000 #>  [34,] 0.00000000 0.00000000 0.000000000 0.00000000 0.000000000 0.00000000 #>  [35,] 0.00000000 0.00000000 0.000000000 0.00000000 0.000000000 0.00000000 #>  [36,] 0.00000000 0.00000000 0.000000000 0.00000000 0.000000000 0.00000000 #>  [37,] 0.00000000 0.00000000 0.000000000 0.00000000 0.000000000 0.00000000 #>  [38,] 0.00000000 0.00000000 0.000000000 0.00000000 0.000000000 0.00000000 #>  [39,] 0.00000000 0.00000000 0.000000000 0.00000000 0.000000000 0.00000000 #>  [40,] 0.00000000 0.00000000 0.000000000 0.00000000 0.000000000 0.00000000 #>  [41,] 0.00000000 0.00000000 0.000000000 0.00000000 0.000000000 0.00000000 #>  [42,] 0.00000000 0.00000000 0.000000000 0.00000000 0.000000000 0.00000000 #>  [43,] 0.00000000 0.00000000 0.000000000 0.00000000 0.008855917 0.03713543 #>  [44,] 0.00000000 0.00000000 0.006929626 0.02534785 0.051478783 0.08340323 #>  [45,] 0.02846031 0.03127990 0.043947074 0.06563608 0.094897871 0.12974146 #>  [46,] 0.06166059 0.06767629 0.083225685 0.10747495 0.138964740 0.17568377 #>  [47,] 0.09894565 0.10773478 0.125455105 0.15129555 0.183832404 0.22109271 #>  [48,] 0.14162267 0.15258768 0.171572910 0.19782246 0.229997372 0.26622660 #>  [49,] 0.19109451 0.20351153 0.222719091 0.24804869 0.278296195 0.31175823 #>  [50,] 0.24874570 0.26182554 0.280148458 0.30316340 0.329849428 0.35873570 #>  [51,] 0.31580383 0.32875901 0.345105273 0.36443476 0.385953764 0.40848455 #>  [52,] 0.39318985 0.40530050 0.418671790 0.43305879 0.447932000 0.46245982 #>  [53,] 0.48137588 0.49204694 0.501609149 0.50999238 0.516958967 0.52206591 #>  [54,] 0.58027174 0.58907549 0.594213802 0.59579445 0.593887945 0.58846925 #>  [55,] 0.68916190 0.69586072 0.696214133 0.69050140 0.679105047 0.66243243 #>  [56,] 0.80671036 0.81125755 0.806729393 0.79356092 0.772437572 0.74419752 #>  [57,] 0.93104403 0.93356264 0.924306387 0.90384203 0.873136309 0.83344055 #>  [58,] 1.05991493 1.06065698 1.047039053 1.01972889 0.979941673 0.92930907 #>  [59,] 1.19092926 1.19022014 1.172763579 1.13929326 1.091230855 1.03054224 #>  [60,] 1.32181974 1.31999399 1.299308796 1.26052733 1.205229683 1.13565913 #>  [61,] 1.45072803 1.44806350 1.424770521 1.38160712 1.320260941 1.24318871 #>  [62,] 1.57645786 1.57311553 1.547771272 1.50114847 1.434992456 1.35190623 #>  [63,] 1.69866005 1.69463568 1.667665044 1.61841557 1.548645210 1.46103699 #>  [64,] 1.81791596 1.81300840 1.784651263 1.73344547 1.661124744 1.57039110 #>  [65,] 1.93569777 1.92949677 1.899772666 1.84706192 1.773048402 1.68040107 #>  [66,] 2.05420018 2.04609406 2.014787171 1.96076697 1.885655220 1.79204810 #>  [67,] 2.17605594 2.16525752 2.131921985 2.07651643 2.000602780 1.90667950 #>  [68,] 2.30396529 2.28955265 2.253536289 2.19640352 2.119673362 2.02573782 #>  [69,] 2.44028364 2.42125103 2.381734243 2.32229087 2.244427594 2.15043785 #>  [70,] 2.58662029 2.56193443 2.517980014 2.45544132 2.375854757 2.28143897 #>  [71,] 2.74350228 2.71215952 2.662769431 2.59620169 2.514073070 2.41856520 #>  [72,] 2.91015132 2.87123239 2.815407805 2.74378932 2.658129454 2.56062176 #>  [73,] 3.08440821 3.03712860 2.973930858 2.89621888 2.805936701 2.70534620 #>  [74,] 3.26282072 3.20657625 3.135187217 3.05038869 2.954367787 2.84951411 #>  [75,] 3.44088979 3.37529770 3.295078962 3.20232372 3.099504856 2.98919723 #>  [76,] 3.61344750 3.53838407 3.448934496 3.34754954 3.237017234 3.12014825 #>  [77,] 3.77512345 3.69075824 3.591968921 3.48155183 3.362622395 3.23826578 #>  [78,] 3.92084376 3.82766967 3.719774134 3.60026238 3.472569550 3.34007758 #>  [79,] 4.04630388 3.94516054 3.828776270 3.70050759 3.564080116 3.42317495 #>  [80,] 4.14836011 4.04044660 3.916602761 3.78036015 3.635684138 3.48653531 #>  [81,] 4.22529695 4.11216913 3.982314411 3.83934855 3.687406324 3.53068571 #>  [82,] 4.27694346 4.16049184 4.026477123 3.87849956 3.720777292 3.55768270 #>  [83,] 4.30463052 4.18703655 4.051069403 3.90021240 3.738670841 3.57091156 #>  [84,] 4.31099723 4.19466925 4.059241388 3.90798437 3.744991468 3.57473284 #>  [85,] 4.29966706 4.18716158 4.054955056 3.90602327 3.744253095 3.57402296 #>  [86,] 4.27482167 4.16875880 4.042541699 3.89878826 3.741096934 3.57366345 #>  [87,] 4.24070442 4.14368763 4.026212374 3.89049877 3.739793165 3.57802913 #>  [88,] 4.20108877 4.11563690 4.009553414 3.88464402 3.743760940 3.59051326 #>  [89,] 4.15875423 4.08724718 3.995037478 3.88351932 3.755130036 3.61311158 #>  [90,] 4.11502523 4.05965509 3.983586035 3.88781569 3.774362565 3.64607717 #>  [91,] 4.06944556 4.03215458 3.974233520 3.89630036 3.799959823 3.68765978 #>  [92,] 4.01967520 4.00205539 3.963963328 3.90564587 3.828298121 3.73395902 #>  [93,] 3.96169727 3.96482796 3.947801688 3.91048645 3.853661903 3.77894752 #>  [94,] 3.89039710 3.91461018 3.919252955 3.90378828 3.868559007 3.81474312 #>  [95,] 3.80051460 3.84510299 3.871124931 3.87759871 3.864394538 3.83221298 #>  [96,] 3.68787628 3.75079570 3.796717711 3.82417763 3.832531793 3.82195831 #>  [97,]         NA         NA 3.691240286 3.73741204 3.765676741 3.77564885 #>  [98,]         NA         NA          NA         NA          NA 3.68755713 #>  [99,]         NA         NA          NA         NA          NA         NA #> [100,]         NA         NA          NA         NA          NA         NA #>             [,38]       [,39]      [,40]      [,41]      [,42]      [,43] #>   [1,]         NA          NA         NA         NA         NA         NA #>   [2,]         NA          NA         NA 2.22387015 2.28446968 2.34825339 #>   [3,] 1.93051770 1.983221737 2.04045204 2.10139908 2.16530011 2.23146952 #>   [4,] 1.78224573 1.839834893 1.90105491 1.96501990 2.03092034 2.09805935 #>   [5,] 1.63008194 1.691597282 1.75575959 1.82161727 1.88832520 1.95518840 #>   [6,] 1.47927001 1.543676760 1.60971519 1.67638329 1.74281751 1.80834385 #>   [7,] 1.33309948 1.399269444 1.46608144 1.53250677 1.59768901 1.66100105 #>   [8,] 1.19300505 1.259718099 1.32616554 1.39132471 1.45437930 1.51477994 #>   [9,] 1.05898198 1.124960440 1.18989982 1.25282258 1.31298957 1.36996116 #>  [10,] 0.93018134 0.994156408 1.05649561 1.11630745 1.17296612 1.22617039 #>  [11,] 0.80552951 0.866326909 0.92509596 0.98106862 1.03376298 1.08303727 #>  [12,] 0.68423690 0.740863412 0.79528255 0.84687902 0.89533570 0.94068086 #>  [13,] 0.56611085 0.617823836 0.66735395 0.71425661 0.75838840 0.79994648 #>  [14,] 0.45164777 0.497995437 0.54236157 0.58447764 0.62437046 0.66239351 #>  [15,] 0.34193371 0.382761290 0.42194691 0.45939125 0.49527674 0.53009101 #>  [16,] 0.23841709 0.273841721 0.30805765 0.34111776 0.37333675 0.40530741 #>  [17,] 0.14263019 0.172992219 0.20262807 0.23171861 0.26068176 0.29018278 #>  [18,] 0.05592784 0.081728852 0.10729626 0.13291059 0.15906162 0.18645364 #>  [19,] 0.00000000 0.001129041 0.02320497 0.04587004 0.06965497 0.09527156 #>  [20,] 0.00000000 0.000000000 0.00000000 0.00000000 0.00000000 0.01712819 #>  [21,] 0.00000000 0.000000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [22,] 0.00000000 0.000000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [23,] 0.00000000 0.000000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [24,] 0.00000000 0.000000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [25,] 0.00000000 0.000000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [26,] 0.00000000 0.000000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [27,] 0.00000000 0.000000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [28,] 0.00000000 0.000000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [29,] 0.00000000 0.000000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [30,] 0.00000000 0.000000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [31,] 0.00000000 0.000000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [32,] 0.00000000 0.000000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [33,] 0.00000000 0.000000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [34,] 0.00000000 0.000000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [35,] 0.00000000 0.000000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [36,] 0.00000000 0.000000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [37,] 0.00000000 0.000000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [38,] 0.00000000 0.000000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [39,] 0.00000000 0.000000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [40,] 0.00000000 0.000000000 0.00000000 0.00000000 0.01171426 0.02697932 #>  [41,] 0.00000000 0.000000000 0.02363423 0.04763230 0.06804961 0.08363590 #>  [42,] 0.01971660 0.049452964 0.07859255 0.10500476 0.12684353 0.14269748 #>  [43,] 0.06911548 0.102390294 0.13449523 0.16308948 0.18613921 0.20208450 #>  [44,] 0.11880030 0.155099085 0.18965768 0.21995956 0.24381213 0.25952864 #>  [45,] 0.16775181 0.206244336 0.24245091 0.27372666 0.29776077 0.31277078 #>  [46,] 0.21518211 0.254724828 0.29148115 0.32273742 0.34611624 0.35977953 #>  [47,] 0.26065974 0.299821862 0.33576006 0.36576221 0.38744562 0.39896472 #>  [48,] 0.30420127 0.341314325 0.37484127 0.40215013 0.42092196 0.42935832 #>  [49,] 0.34631184 0.379540268 0.40890136 0.43192725 0.44643684 0.45073782 #>  [50,] 0.38796310 0.415391529 0.43875035 0.45582145 0.46463771 0.46367405 #>  [51,] 0.43050585 0.450237229 0.46576587 0.47520708 0.47688246 0.46949477 #>  [52,] 0.47552518 0.485782758 0.49175705 0.49197442 0.48511534 0.47016786 #>  [53,] 0.52465544 0.523881510 0.51877461 0.50834020 0.49167989 0.46811881 #>  [54,] 0.57938069 0.566325019 0.54889316 0.52662484 0.49909423 0.46600738 #>  [55,] 0.64085014 0.614641874 0.58399642 0.54902726 0.50981931 0.46649328 #>  [56,] 0.70973770 0.669935664 0.62559640 0.57742889 0.52605177 0.47202231 #>  [57,] 0.78616941 0.732787080 0.67471282 0.61325377 0.54956857 0.48465981 #>  [58,] 0.86973259 0.803235804 0.73182971 0.65740263 0.58164206 0.50599058 #>  [59,] 0.95956816 0.880845278 0.79693388 0.71026708 0.62303249 0.53709274 #>  [60,] 1.05453373 0.964839939 0.86962655 0.77181664 0.67405224 0.57858156 #>  [61,] 1.15341279 1.054292060 0.94928707 0.84173959 0.73468451 0.63070717 #>  [62,] 1.25513627 1.148326128 1.03525865 0.91960914 0.80472988 0.69348219 #>  [63,] 1.35897859 1.246304295 1.12702099 1.00504179 0.88394969 0.76680983 #>  [64,] 1.46469224 1.347957793 1.22431602 1.09781549 0.97217520 0.85058348 #>  [65,] 1.57255280 1.453436399 1.32719922 1.19792070 1.06935693 0.94473326 #>  [66,] 1.68329918 1.563260271 1.43600072 1.30552870 1.17553842 1.04920412 #>  [67,] 1.79797032 1.678174129 1.55119503 1.42087502 1.29075189 1.16386240 #>  [68,] 1.91765694 1.798920594 1.67319469 1.54407189 1.41484790 1.28834154 #>  [69,] 2.04320243 1.925964971 1.80209804 1.67487777 1.54728533 1.42185098 #>  [70,] 2.17489891 2.059215265 1.93743291 1.81246375 1.68691898 1.56298337 #>  [71,] 2.31222898 2.197786714 2.07794380 1.95522238 1.83182845 1.70956132 #>  [72,] 2.45370152 2.339858022 2.22146851 2.10066355 1.97923127 1.85856524 #>  [73,] 2.59681931 2.482656557 2.36494089 2.24543356 2.12551578 2.00617649 #>  [74,] 2.73819845 2.622592807 2.50454005 2.38547739 2.26641368 2.14795640 #>  [75,] 2.87383791 2.755542361 2.63598458 2.51634350 2.39731219 2.27916137 #>  [76,] 2.99951333 2.877249852 2.75494645 2.63360617 2.51368193 2.39517192 #>  [77,] 3.11124793 2.983807295 2.85753715 2.73335838 2.61157413 2.49199069 #>  [78,] 3.20579781 3.072143165 2.94080158 2.81271064 2.68812334 2.56674649 #>  [79,] 3.28108249 3.140451609 3.00314810 2.87022340 2.74198269 2.61813221 #>  [80,] 3.33649624 3.188495612 3.04464688 2.90620372 2.77362178 2.64670583 #>  [81,] 3.37305133 3.217733688 3.06714449 2.92281269 2.78543188 2.65499835 #>  [82,] 3.39332865 3.231244886 3.07416849 2.92395594 2.78160938 2.64739733 #>  [83,] 3.40123981 3.233457022 3.07062706 2.91496169 2.76782043 2.62980734 #>  [84,] 3.40163225 3.229712438 3.06233989 2.90208324 2.75068371 2.60912268 #>  [85,] 3.39978946 3.225727898 3.05546035 2.89188873 2.73713482 2.59257567 #>  [86,] 3.40088721 3.227015568 3.05586132 2.89061420 2.73375164 2.58704117 #>  [87,] 3.40946258 3.238328203 3.06855362 2.90355444 2.74611891 2.59837821 #>  [88,] 3.42893783 3.263175506 3.09718930 2.93454900 2.77829422 2.63087545 #>  [89,] 3.46122167 3.303436059 3.14367708 2.98559422 2.83241073 2.68683942 #>  [90,] 3.50639509 3.359069041 3.20791321 3.05658529 2.90842215 2.76633494 #>  [91,] 3.56248510 3.427921127 3.28761705 3.14517400 3.00397468 2.86706243 #>  [92,] 3.62534266 3.505632456 3.37826510 3.24672778 3.11438561 2.98434905 #>  [93,] 3.68866689 3.585670331 3.47313939 3.35439478 3.23272448 3.11124305 #>  [94,] 3.74424650 3.659551214 3.56353957 3.45931339 3.35002478 3.23873008 #>  [95,] 3.78250294 3.717333447 3.63923622 3.55103665 3.45568876 3.35612602 #>  [96,] 3.79339926 3.748455028 3.68924545 3.61825338 3.53816547 3.45172225 #>  [97,] 3.76771193 3.742936931 3.70296339 3.64985768 3.58596219 3.51374763 #>  [98,] 3.69855140 3.692870541 3.67160779 3.63633798 3.58897899 3.53165031 #>  [99,]         NA          NA         NA 3.57133358 3.54004023 3.49759466 #> [100,]         NA          NA         NA         NA         NA         NA #>             [,44]       [,45]        [,46]       [,47]       [,48]       [,49] #>   [1,]         NA          NA           NA          NA          NA          NA #>   [2,] 2.41462330 2.483064336 2.5531538935 2.624561892 2.697040394 2.770403266 #>   [3,] 2.29932516 2.368407680 2.4383895758 2.509071908 2.580367710 2.652272895 #>   [4,] 2.16588398 2.234007009 2.3022154276 2.370463072 2.438846603 2.507566269 #>   [5,] 2.02169866 2.087558530 2.1526882458 2.217212938 2.281429805 2.345757398 #>   [6,] 1.87251896 1.935154999 1.9963233778 2.056335110 2.115697848 2.175052779 #>   [7,] 1.72208879 1.780894896 1.8376576200 1.892882881 1.947290370 2.001737797 #>   [8,] 1.57228805 1.626996215 1.6793205942 1.729963769 1.779849815 1.830036450 #>   [9,] 1.42363867 1.474279496 1.5224818305 1.569138187 1.615360048 1.662379311 #>  [10,] 1.27598022 1.322825189 1.3674811631 1.411014975 1.454700117 1.499909560 #>  [11,] 1.12912003 1.172611083 1.2144504445 1.255855448 1.298229524 1.343049012 #>  [12,] 0.98331098 1.023984228 1.0637826492 1.104043543 1.146263837 1.191983813 #>  [13,] 0.83948371 0.877895504 0.9163766579 0.956349282 0.999365461 1.046990888 #>  [14,] 0.69923485 0.735898441 0.7736575713 0.813981673 0.858440010 0.908588087 #>  [15,] 0.56462862 0.599968276 0.6374248916 0.678477587 0.724676984 0.777537007 #>  [16,] 0.43789736 0.472223820 0.5096061936 0.551497383 0.599396952 0.654750566 #>  [17,] 0.32112716 0.354634548 0.3919935034 0.434597985 0.483868206 0.541159558 #>  [18,] 0.21599578 0.248776441 0.2860215200 0.329037511 0.379141447 0.437580704 #>  [19,] 0.12360163 0.155672758 0.1926211541 0.235642238 0.285930636 0.344611785 #>  [20,] 0.04439471 0.075729421 0.1121574044 0.154744795 0.204549273 0.262563948 #>  [21,] 0.00000000 0.008754843 0.0444427414 0.086186894 0.134898323 0.191430930 #>  [22,] 0.00000000 0.000000000 0.0000000000 0.029371882 0.076495549 0.130890225 #>  [23,] 0.00000000 0.000000000 0.0000000000 0.000000000 0.028534891 0.080330518 #>  [24,] 0.00000000 0.000000000 0.0000000000 0.000000000 0.000000000 0.038900761 #>  [25,] 0.00000000 0.000000000 0.0000000000 0.000000000 0.000000000 0.005577196 #>  [26,] 0.00000000 0.000000000 0.0000000000 0.000000000 0.000000000 0.000000000 #>  [27,] 0.00000000 0.000000000 0.0000000000 0.000000000 0.000000000 0.000000000 #>  [28,] 0.00000000 0.000000000 0.0000000000 0.000000000 0.000000000 0.000000000 #>  [29,] 0.00000000 0.000000000 0.0000000000 0.000000000 0.000000000 0.000000000 #>  [30,] 0.00000000 0.000000000 0.0000000000 0.000000000 0.000000000 0.000000000 #>  [31,] 0.00000000 0.000000000 0.0000000000 0.000000000 0.000000000 0.000000000 #>  [32,] 0.00000000 0.000000000 0.0000000000 0.000000000 0.000000000 0.000000000 #>  [33,] 0.00000000 0.000000000 0.0000000000 0.000000000 0.000000000 0.000000000 #>  [34,] 0.00000000 0.000000000 0.0000000000 0.000000000 0.000000000 0.000000000 #>  [35,] 0.00000000 0.000000000 0.0000000000 0.000000000 0.000000000 0.000000000 #>  [36,] 0.00000000 0.000000000 0.0000000000 0.000000000 0.000000000 0.000000000 #>  [37,] 0.00000000 0.000000000 0.0000000000 0.000000000 0.000000000 0.000000000 #>  [38,] 0.00000000 0.000000000 0.0000000000 0.000000000 0.000000000 0.000000000 #>  [39,] 0.00000000 0.000000000 0.0003605677 0.003605287 0.005611655 0.007691067 #>  [40,] 0.03790093 0.044316840 0.0465704467 0.045483070 0.042283573 0.038500807 #>  [41,] 0.09363603 0.097855921 0.0966811078 0.091044516 0.082345077 0.072324170 #>  [42,] 0.15170931 0.153650933 0.1489448288 0.138627503 0.124257614 0.107777122 #>  [43,] 0.20997260 0.209542025 0.2012465929 0.186215170 0.166150163 0.143174720 #>  [44,] 0.26607399 0.263156958 0.2512570293 0.231581023 0.205953403 0.176651492 #>  [45,] 0.31765885 0.312111098 0.2966270093 0.272473988 0.241571331 0.206316113 #>  [46,] 0.36259270 0.354229578 0.3352042861 0.306824842 0.271073181 0.230424992 #>  [47,] 0.39917993 0.387766334 0.3652477897 0.332951019 0.292884413 0.247555642 #>  [48,] 0.42635110 0.411593017 0.3856136001 0.349735291 0.305954146 0.256759451 #>  [49,] 0.44379360 0.425333168 0.3958888434 0.356755861 0.309878276 0.257675062 #>  [50,] 0.45200732 0.429423315 0.3964557362 0.354350993 0.304962545 0.250588003 #>  [51,] 0.45227660 0.425092129 0.3884769746 0.343609631 0.292217436 0.236428973 #>  [52,] 0.44656119 0.414259935 0.3738042612 0.326289346 0.273285780 0.216711214 #>  [53,] 0.43732061 0.399371883 0.3548222319 0.304672670 0.250312863 0.193415371 #>  [54,] 0.42729538 0.383187151 0.3342486474 0.281380970 0.225776219 0.168836938 #>  [55,] 0.41927445 0.368552049 0.3149170207 0.259169994 0.202296944 0.145415593 #>  [56,] 0.41587898 0.358186054 0.2995690328 0.240732425 0.182455603 0.125567026 #>  [57,] 0.41938922 0.354506397 0.2906810672 0.228530162 0.168633535 0.111535975 #>  [58,] 0.43163320 0.359509631 0.2903425762 0.224673068 0.162895162 0.105284772 #>  [59,] 0.45394546 0.374718785 0.3001949744 0.230852812 0.166919668 0.108425424 #>  [60,] 0.48719291 0.401193932 0.3214298182 0.248331381 0.181982418 0.122196258 #>  [61,] 0.53185352 0.439593928 0.3548357163 0.277975384 0.208978831 0.147477481 #>  [62,] 0.58812586 0.490269233 0.4008760763 0.320320480 0.248477311 0.184834395 #>  [63,] 0.65604238 0.553361172 0.4597754357 0.375646123 0.300783868 0.234573411 #>  [64,] 0.73555928 0.628882430 0.5315913343 0.444039798 0.365999850 0.296794467 #>  [65,] 0.82659980 0.716757132 0.6162515970 0.525432195 0.444055851 0.371424512 #>  [66,] 0.92903603 0.816806122 0.7135432397 0.619590154 0.534709221 0.458220108 #>  [67,] 1.04260555 0.928673242 0.8230482864 0.726062131 0.637499383 0.556732765 #>  [68,] 1.16677208 1.051700289 0.9440325647 0.844080586 0.751663661 0.666237991 #>  [69,] 1.30055215 1.184770223 1.0753046150 0.972435882 0.876025534 0.785637286 #>  [70,] 1.44234005 1.326148381 1.2150715879 1.109345514 1.008875991 0.913350524 #>  [71,] 1.58977028 1.473358016 1.3608256302 1.252349184 1.147875390 1.047222902 #>  [72,] 1.73965675 1.623127726 1.5092961452 1.398262784 1.290006359 1.184474428 #>  [73,] 1.88804248 1.771443199 1.6564992463 1.543221371 1.431606577 1.321719391 #>  [74,] 2.03038003 1.913723903 1.7979052628 1.682832290 1.568502826 1.455077464 #>  [75,] 2.16184440 2.045127729 1.9287289417 1.812444897 1.696254776 1.580386974 #>  [76,] 2.27775778 2.160965351 2.0443268627 1.927524600 1.810499708 1.693515266 #>  [77,] 2.37408347 2.257184292 2.1406655257 2.024098709 1.907370255 1.790743200 #>  [78,] 2.44792784 2.330864452 2.2148053278 2.099223564 1.983939496 1.869183520 #>  [79,] 2.49797938 2.380655904 2.2653340871 2.151410223 2.038635039 1.927179670 #>  [80,] 2.52481427 2.407089415 2.2926821034 2.180942948 2.071559286 1.964625784 #>  [81,] 2.53101115 2.412701722 2.2992606556 2.190032773 2.084658981 1.983152261 #>  [82,] 2.52104200 2.401940428 2.2893868729 2.182767258 2.081703574 1.986135147 #>  [83,] 2.50093786 2.380844250 2.2689872092 2.164844894 2.068056900 1.978509809 #>  [84,] 2.47776212 2.356527791 2.2451043060 2.143113781 2.050256063 1.966396721 #>  [85,] 2.45895311 2.336529581 2.2252615554 2.124963308 2.035439760 1.956574411 #>  [86,] 2.45161626 2.328101467 2.2167599633 2.117638605 2.030689787 1.955856421 #>  [87,] 2.46184826 2.337521960 2.2259883823 2.127555847 2.042359638 1.970440976 #>  [88,] 2.49416271 2.369504954 2.2578193498 2.159690360 2.075460711 2.005301536 #>  [89,] 2.55106090 2.426751149 2.3151410984 2.217090639 2.133161124 2.063674371 #>  [90,] 2.63276054 2.509659679 2.3985480854 2.300545554 2.216429168 2.146679625 #>  [91,] 2.73706994 2.616191249 2.5061864673 2.408407137 2.323830297 2.253091444 #>  [92,] 2.85938395 2.741860852 2.6337362314 2.536555915 2.451471007 2.379257643 #>  [93,] 2.99278670 2.879843523 2.7745141397 2.678495606 2.593080736 2.519165474 #>  [94,] 3.12827318 3.021199941 2.9197012285 2.825579808 2.740234912 2.664658483 #>  [95,] 3.25513580 3.155260868 3.0587276408 2.967398406 2.882743086 2.805825679 #>  [96,] 3.36158641 3.270234136 3.1798711626 3.092372635 3.009243782 2.931597770 #>  [97,] 3.43567816 3.354095482 3.2711254589 3.188607676 3.108046646 3.030582025 #>  [98,] 3.46653877 3.395779087 3.3213538899 3.245015350 3.168228468 3.092134422 #>  [99,] 3.44582751 3.386591823 3.3216602382 3.252641430 3.180917243 3.107599993 #> [100,]         NA          NA           NA          NA          NA          NA #>              [,50]       [,51]       [,52]      [,53]       [,54]       [,55] #>   [1,]          NA          NA          NA         NA          NA          NA #>   [2,] 2.844497598 2.919169798 2.994230214 3.06942057 3.144388503 3.218672938 #>   [3,] 2.724827104 2.798068365 2.871986442 2.94648016 3.021323746 3.096146571 #>   [4,] 2.576874811 2.647019510 2.718183444 2.79043232 2.863672780 2.937627121 #>   [5,] 2.410671485 2.476633734 2.544020501 2.61305920 2.683779060 2.755981641 #>   [6,] 2.235096939 2.296498404 2.359812845 2.42540997 2.493417444 2.563688301 #>   [7,] 2.057129908 2.114320837 2.174019330 2.23670626 2.302572804 2.371485596 #>   [8,] 1.881611847 1.935585575 1.992784015 2.05376041 2.118728455 2.187526158 #>   [9,] 1.711434762 1.763653694 1.819939560 1.88087630 1.946658597 2.017055226 #>  [10,] 1.547994381 1.600158620 1.657341549 1.72011816 1.788627368 1.862535262 #>  [11,] 1.391736821 1.445533379 1.505375984 1.57179738 1.644853014 1.724084442 #>  [12,] 1.242658841 1.299529306 1.363499506 1.43503609 1.514095312 1.600086586 #>  [13,] 1.100677686 1.161636068 1.230715073 1.30830244 1.394252639 1.487850309 #>  [14,] 0.965844376 1.031366227 1.105934489 1.18985619 1.282893871 1.384228661 #>  [15,] 0.838418000 0.908409133 0.988218644 1.07808053 1.177685612 1.286143876 #>  [16,] 0.718841649 0.792682150 0.876909957 0.97170058 1.076700372 1.190987812 #>  [17,] 0.607664543 0.684313478 0.771680344 0.86990038 0.978605911 1.096886355 #>  [18,] 0.505446538 0.583585971 0.672517156 0.77235371 0.882743611 1.002828073 #>  [19,] 0.412668019 0.490862531 0.579665130 0.67918406 0.789108561 0.908666899 #>  [20,] 0.329656501 0.406505804 0.493538674 0.59086985 0.698248805 0.815017535 #>  [21,] 0.256533769 0.330800517 0.414617555 0.50811257 0.611106275 0.723070563 #>  [22,] 0.193184404 0.263885584 0.343339651 0.43168833 0.528826290 0.634360459 #>  [23,] 0.139246299 0.205703274 0.280005071 0.36230408 0.452564200 0.550522021 #>  [24,] 0.094124164 0.155972491 0.224705031 0.30047855 0.383315638 0.473068239 #>  [25,] 0.057026543 0.114191238 0.177285399 0.24646289 0.321790753 0.403215350 #>  [26,] 0.027024787 0.079669488 0.137349262 0.20020871 0.268343798 0.341770378 #>  [27,] 0.003129282 0.051588804 0.104296131 0.16138291 0.222959415 0.289084918 #>  [28,] 0.000000000 0.029080249 0.077389265 0.12942088 0.185287975 0.245068605 #>  [29,] 0.000000000 0.011308771 0.055838206 0.10360456 0.154715967 0.209248340 #>  [30,] 0.000000000 0.000000000 0.038881956 0.08314932 0.130454558 0.180855825 #>  [31,] 0.000000000 0.000000000 0.025859271 0.06728489 0.111630029 0.158926069 #>  [32,] 0.000000000 0.000000000 0.016255804 0.05531825 0.097362970 0.142392486 #>  [33,] 0.000000000 0.000000000 0.009722416 0.04667187 0.086827779 0.130168674 #>  [34,] 0.000000000 0.000000000 0.006063827 0.04089488 0.079288910 0.121211637 #>  [35,] 0.000000000 0.000000000 0.005201099 0.03764956 0.074114510 0.114565228 #>  [36,] 0.000000000 0.000000000 0.007114709 0.03667852 0.070771044 0.109385263 #>  [37,] 0.000000000 0.000000000 0.011776953 0.03775975 0.068804188 0.104949287 #>  [38,] 0.000000000 0.002554751 0.019083263 0.04065729 0.067811805 0.100654483 #>  [39,] 0.011295866 0.017886396 0.028791835 0.04507543 0.067414754 0.096007230 #>  [40,] 0.035827718 0.035968338 0.040479985 0.05062312 0.067230704 0.090607729 #>  [41,] 0.062910846 0.056049412 0.053523997 0.05679430 0.066855467 0.084133062 #>  [42,] 0.091338620 0.077114807 0.067106926 0.06296810 0.065855437 0.076321974 #>  [43,] 0.119643843 0.097937681 0.080255939 0.06843088 0.063773581 0.066964509 #>  [44,] 0.146202771 0.117164629 0.091907386 0.07241944 0.060149835 0.055898998 #>  [45,] 0.169369807 0.133427808 0.100994277 0.07418228 0.054554901 0.043017789 #>  [46,] 0.187629476 0.145472602 0.106547496 0.07305271 0.046634279 0.028281536 #>  [47,] 0.199748979 0.152286789 0.107799586 0.06852585 0.036157424 0.011740063 #>  [48,] 0.204913460 0.153216018 0.104278723 0.06032983 0.023065463 0.000000000 #>  [49,] 0.202827353 0.148051321 0.095881001 0.04848189 0.007510389 0.000000000 #>  [50,] 0.193768997 0.137077413 0.082911412 0.03332125 0.000000000 0.000000000 #>  [51,] 0.178591495 0.121075389 0.066087702 0.01551349 0.000000000 0.000000000 #>  [52,] 0.158669790 0.101279292 0.046506067 0.00000000 0.000000000 0.000000000 #>  [53,] 0.135800910 0.079291991 0.025572591 0.00000000 0.000000000 0.000000000 #>  [54,] 0.112070237 0.056970946 0.004908685 0.00000000 0.000000000 0.000000000 #>  [55,] 0.089700497 0.036297839 0.000000000 0.00000000 0.000000000 0.000000000 #>  [56,] 0.070901410 0.019247340 0.000000000 0.00000000 0.000000000 0.000000000 #>  [57,] 0.057736566 0.007669319 0.000000000 0.00000000 0.000000000 0.000000000 #>  [58,] 0.052020377 0.003195893 0.000000000 0.00000000 0.000000000 0.000000000 #>  [59,] 0.055252727 0.007180453 0.000000000 0.00000000 0.000000000 0.000000000 #>  [60,] 0.068592964 0.020670832 0.000000000 0.00000000 0.000000000 0.000000000 #>  [61,] 0.092869073 0.044413906 0.001319760 0.00000000 0.000000000 0.000000000 #>  [62,] 0.128612948 0.078884559 0.034675592 0.00000000 0.000000000 0.000000000 #>  [63,] 0.176109253 0.124328785 0.078131856 0.03647893 0.000000000 0.000000000 #>  [64,] 0.235443675 0.180808791 0.131722304 0.08709436 0.045990534 0.007679143 #>  [65,] 0.306536763 0.248237802 0.195354384 0.14680493 0.101679060 0.059284624 #>  [66,] 0.389151995 0.326393759 0.268828434 0.21544195 0.165400318 0.118093506 #>  [67,] 0.482871143 0.414904441 0.351832003 0.29276478 0.236995924 0.184038381 #>  [68,] 0.587036174 0.513201616 0.443905333 0.37843646 0.316261952 0.257054851 #>  [69,] 0.700664269 0.620448201 0.544379566 0.47197162 0.402905131 0.337044358 #>  [70,] 0.822350167 0.735449494 0.652295749 0.57266211 0.496473841 0.423809379 #>  [71,] 0.950176776 0.856566228 0.766319317 0.67949207 0.596273126 0.516967891 #>  [72,] 1.081659380 0.981652147 0.884670176 0.79106013 0.701279094 0.615860384 #>  [73,] 1.213749440 1.108040602 1.005091399 0.90553031 0.810072750 0.719468069 #>  [74,] 1.342919862 1.232602188 1.124878557 1.02063347 0.920815019 0.826363652 #>  [75,] 1.465344318 1.351887992 1.240986157 1.13373749 1.031282402 0.934715178 #>  [76,] 1.577169397 1.462361079 1.350217434 1.24199577 1.138975889 1.042358046 #>  [77,] 1.674861811 1.560703614 1.449490024 1.34257146 1.241304843 1.146940746 #>  [78,] 1.755596120 1.644171058 1.536154815 1.43292022 1.335834034 1.246137175 #>  [79,] 1.817634967 1.710951020 1.608331275 1.51110056 1.420568035 1.337904697 #>  [80,] 1.860646524 1.760475835 1.665212857 1.57606982 1.494235690 1.420754977 #>  [81,] 1.885905340 1.793637179 1.707293221 1.62791932 1.556530867 1.493996773 #>  [82,] 1.896333761 1.812859195 1.736469423 1.66800471 1.608266285 1.557908509 #>  [83,] 1.896360549 1.822003137 1.755991886 1.69893894 1.651405517 1.613804478 #>  [84,] 1.891598285 1.826099041 1.770250865 1.72443215 1.688953392 1.663971526 #>  [85,] 1.888367078 1.830924296 1.784411991 1.74898438 1.724704530 1.711470929 #>  [86,] 1.893113942 1.842470770 1.803934816 1.77745771 1.762869996 1.759819631 #>  [87,] 1.911790577 1.866356826 1.834024190 1.81457124 1.807619317 1.812582354 #>  [88,] 1.949254626 1.907245589 1.879071694 1.86437164 1.862586152 1.872918251 #>  [89,] 2.008750985 1.968325797 1.942142580 1.92973336 1.930389382 1.943130936 #>  [90,] 2.091513558 2.050898949 2.024554427 2.01193617 2.012217816 2.024269318 #>  [91,] 2.196509564 2.154100845 2.125580837 2.11035744 2.107518742 2.115820631 #>  [92,] 2.320334235 2.274772565 2.242301751 2.22230636 2.213821622 2.215529646 #>  [93,] 2.457258566 2.407489802 2.369615306 2.34302032 2.326721498 2.319371740 #>  [94,] 2.599437919 2.544761679 2.500425826 2.46584128 2.440042971 2.421703177 #>  [95,] 2.737300887 2.677417434 2.626025868 2.58259005 2.546202766 2.515607049 #>  [96,] 2.860146878 2.795203712 2.736690037 2.68415194 2.636781075 2.593442809 #>  [97,] 2.956974695 2.887605657 2.822485216 2.76127071 2.703291961 2.647584381 #>  [98,] 3.017531587 2.944871473 2.874267052 2.80551137 2.738105099 2.671292204 #>  [99,] 3.033508312 2.959159232 2.884774050 2.81029570 2.735415820 2.659610201 #> [100,]          NA          NA          NA         NA          NA          NA #>             [,56]      [,57]      [,58]      [,59]       [,60]      [,61] #>   [1,]         NA         NA         NA         NA          NA         NA #>   [2,] 3.29170322 3.36281359 3.43127346 3.49633229 3.557276782         NA #>   [3,] 3.17042923 3.24351768 3.31465536 3.38303170 3.447844207 3.50836982 #>   [4,] 3.01182755 3.08563154 3.15825772 3.22884010 3.296496863 3.36040884 #>   [5,] 2.82923461 2.90288995 2.97612566 3.04800788 3.117568811 3.18389453 #>   [6,] 2.63579531 2.70905357 2.78256967 2.85531376 2.926208825 2.99423024 #>   [7,] 2.44298278 2.51630186 2.59043748 2.66422476 2.736441598 2.80592195 #>   [8,] 2.25961408 2.33410885 2.40984985 2.48549422 2.559632910 2.63091892 #>   [9,] 2.09140957 2.16867854 2.24750758 2.32633672 2.403529982 2.47751869 #>  [10,] 1.94103772 2.02290375 2.10655742 2.19019341 2.271918233 2.34990741 #>  [11,] 1.80852337 1.89673799 1.98691976 2.07700596 2.164830233 2.24829146 #>  [12,] 1.69187700 1.78783879 1.88593840 1.98386294 2.079176852 2.16949920 #>  [13,] 1.58781413 1.69234330 1.79920607 1.90586659 2.009643868 2.10789375 #>  [14,] 1.49246215 1.60565979 1.72143583 1.83707704 1.949699872 2.05643294 #>  [15,] 1.40198314 1.52318724 1.64727459 1.77141513 1.892581732 2.00772879 #>  [16,] 1.31306790 1.44090334 1.57198395 1.70343380 1.832152809 1.95498737 #>  [17,] 1.22327762 1.35578472 1.49194001 1.62889744 1.763561130 1.89274405 #>  [18,] 1.13122543 1.26604423 1.40492858 1.54513740 1.683657031 1.81734469 #>  [19,] 1.03660473 1.17118815 1.31023527 1.45117882 1.591160845 1.72715810 #>  [20,] 0.94008370 1.07191379 1.20855060 1.34765858 1.486599190 1.62253669 #>  [21,] 0.84309724 0.96988190 1.10172778 1.23657397 1.372051259 1.50556736 #>  [22,] 0.74757528 0.86740845 0.99244228 1.12091580 1.250761846 1.37967189 #>  [23,] 0.65564972 0.76712412 0.88380736 1.00424465 1.126684339 1.24912376 #>  [24,] 0.56937932 0.67164697 0.77899650 0.89026651 1.004014446 1.11854592 #>  [25,] 0.49052374 0.58330461 0.68091432 0.78245430 0.886765484 0.99244457 #>  [26,] 0.42038608 0.50392972 0.59194393 0.68374723 0.778421382 0.87481867 #>  [27,] 0.35973047 0.43473830 0.51378352 0.59634449 0.681687260 0.76886863 #>  [28,] 0.30876973 0.37628775 0.44737171 0.52159524 0.598342577 0.67681225 #>  [29,] 0.26720965 0.32850248 0.39289069 0.45997615 0.529190337 0.59980369 #>  [30,] 0.23433241 0.29074969 0.34983086 0.41114112 0.474088667 0.53794404 #>  [31,] 0.20910101 0.26194705 0.31709851 0.37402563 0.432047924 0.49036754 #>  [32,] 0.19026930 0.24068597 0.29314990 0.34698830 0.401376262 0.45538700 #>  [33,] 0.17648624 0.22535764 0.27613751 0.32797501 0.379857982 0.43068222 #>  [34,] 0.16638732 0.21427304 0.26405798 0.31469280 0.364950620 0.41351610 #>  [35,] 0.15866982 0.20577119 0.25489340 0.30478326 0.353987888 0.40096357 #>  [36,] 0.15215089 0.19831187 0.24673949 0.29598566 0.344376123 0.39013810 #>  [37,] 0.14580882 0.19055037 0.23791496 0.28628104 0.333772039 0.37840089 #>  [38,] 0.13880822 0.18139201 0.22704670 0.27400872 0.320230173 0.36353769 #>  [39,] 0.13051041 0.17002503 0.21312669 0.25794815 0.302309929 0.34389056 #>  [40,] 0.12047027 0.15593126 0.19553784 0.23736114 0.279135068 0.31843504 #>  [41,] 0.10842199 0.13887564 0.17404862 0.21199292 0.250402771 0.28679854 #>  [42,] 0.09425666 0.11887741 0.14877906 0.18203472 0.216344497 0.24922167 #>  [43,] 0.07799565 0.09616792 0.12014414 0.14805424 0.177645998 0.20647051 #>  [44,] 0.05976410 0.07114113 0.08878232 0.11090416 0.135338094 0.15971279 #>  [45,] 0.03976850 0.04430335 0.05547865 0.07162026 0.090672392 0.11037444 #>  [46,] 0.01828110 0.01622829 0.02109137 0.03132123 0.044996626 0.05999356 #>  [47,] 0.00000000 0.00000000 0.00000000 0.00000000 0.000000000 0.01008739 #>  [48,] 0.00000000 0.00000000 0.00000000 0.00000000 0.000000000 0.00000000 #>  [49,] 0.00000000 0.00000000 0.00000000 0.00000000 0.000000000 0.00000000 #>  [50,] 0.00000000 0.00000000 0.00000000 0.00000000 0.000000000 0.00000000 #>  [51,] 0.00000000 0.00000000 0.00000000 0.00000000 0.000000000 0.00000000 #>  [52,] 0.00000000 0.00000000 0.00000000 0.00000000 0.000000000 0.00000000 #>  [53,] 0.00000000 0.00000000 0.00000000 0.00000000 0.000000000 0.00000000 #>  [54,] 0.00000000 0.00000000 0.00000000 0.00000000 0.000000000 0.00000000 #>  [55,] 0.00000000 0.00000000 0.00000000 0.00000000 0.000000000 0.00000000 #>  [56,] 0.00000000 0.00000000 0.00000000 0.00000000 0.000000000 0.00000000 #>  [57,] 0.00000000 0.00000000 0.00000000 0.00000000 0.000000000 0.00000000 #>  [58,] 0.00000000 0.00000000 0.00000000 0.00000000 0.000000000 0.00000000 #>  [59,] 0.00000000 0.00000000 0.00000000 0.00000000 0.000000000 0.00000000 #>  [60,] 0.00000000 0.00000000 0.00000000 0.00000000 0.000000000 0.00000000 #>  [61,] 0.00000000 0.00000000 0.00000000 0.00000000 0.000000000 0.00000000 #>  [62,] 0.00000000 0.00000000 0.00000000 0.00000000 0.000000000 0.00000000 #>  [63,] 0.00000000 0.00000000 0.00000000 0.00000000 0.000000000 0.00000000 #>  [64,] 0.00000000 0.00000000 0.00000000 0.00000000 0.000000000 0.00000000 #>  [65,] 0.01916381 0.00000000 0.00000000 0.00000000 0.000000000 0.00000000 #>  [66,] 0.07314780 0.03041132 0.00000000 0.00000000 0.000000000 0.00000000 #>  [67,] 0.13363186 0.08572406 0.04043313 0.00000000 0.000000000 0.00000000 #>  [68,] 0.20069408 0.14724107 0.09690024 0.04997110 0.006799147 0.00000000 #>  [69,] 0.27442805 0.21524117 0.15977435 0.10837849 0.061420915 0.01924859 #>  [70,] 0.35488112 0.29000207 0.22954524 0.17390253 0.123448421 0.07851283 #>  [71,] 0.44196801 0.37171299 0.30665046 0.24720095 0.193731249 0.14653886 #>  [72,] 0.53537121 0.46036943 0.39136562 0.32879512 0.273002648 0.22423981 #>  [73,] 0.63444541 0.55566602 0.48368801 0.41894669 0.361751334 0.31229669 #>  [74,] 0.73814681 0.65690759 0.58323273 0.51754194 0.460097101 0.41102755 #>  [75,] 0.84500862 0.76295997 0.68916274 0.62400489 0.567690131 0.52027588 #>  [76,] 0.95317954 0.87225896 0.80017206 0.73725839 0.683653262 0.63933653 #>  [77,] 1.06053421 0.98288851 0.91453509 0.85574750 0.806581971 0.76693441 #>  [78,] 1.16485241 1.09272874 1.03022518 0.97753030 0.934608859 0.90126363 #>  [79,] 1.26405061 1.19966102 1.14509326 1.10043004 1.065529070 1.04008609 #>  [80,] 1.35643716 1.30180529 1.25708529 1.22223073 1.196972266 1.18087858 #>  [81,] 1.44095317 1.39775516 1.36446754 1.34088883 1.326597790 1.32100914 #>  [82,] 1.51735867 1.48677219 1.46602374 1.45472871 1.452284470 1.45791886 #>  [83,] 1.58632743 1.56890344 1.56118985 1.56258973 1.572286534 1.58928456 #>  [84,] 1.64942496 1.64499582 1.65009996 1.66389988 1.685332479 1.71314205 #>  [85,] 1.70896066 1.71659526 1.73352982 1.75866187 1.790653124 1.82795683 #>  [86,] 1.76772332 1.78573609 1.81274029 1.84735147 1.887936408 1.93263788 #>  [87,] 1.82862614 1.85464213 1.88923756 1.93074046 1.977216977 2.02649732 #>  [88,] 1.89430036 1.92537322 1.96447873 2.00966701 2.058716315 2.10916430 #>  [89,] 1.96668250 1.99945776 2.03955744 2.08478111 2.132653284 2.18046367 #>  [90,] 2.04664037 2.07755290 2.11490588 2.15629473 2.199046422 2.24027136 #>  [91,] 2.13367896 2.15917073 2.19004778 2.22376574 2.257530221 2.28836130 #>  [92,] 2.22576089 2.24250495 2.26343437 2.28594426 2.307209992 2.32426406 #>  [93,] 2.31927124 2.32438834 2.33239379 2.34071095 2.346584177 2.34716583 #>  [94,] 2.40915197 2.40040793 2.39322212 2.38513772 2.373566764 2.35588397 #>  [95,] 2.48922526 2.46519858 2.44143913 2.41569665 2.385640326 2.34895528 #>  [96,] 2.55271253 2.51292196 2.47221708 2.42862865 2.380155394 2.32485852 #>  [97,] 2.59293039 2.53791003 2.48096152 2.42045227 2.354759457 2.28235843 #>  [98,] 2.60410371 2.53540954 2.46397856 2.38854647 2.307890346 2.22090748 #>  [99,] 2.58218176 2.50231051 2.41910982 2.33168827 2.239215245         NA #> [100,]         NA         NA         NA         NA          NA         NA #>             [,62]       [,63]      [,64]      [,65]      [,66]       [,67] #>   [1,]         NA          NA         NA         NA         NA          NA #>   [2,]         NA          NA         NA         NA         NA          NA #>   [3,] 3.56404066 3.614518215 3.65975960         NA         NA          NA #>   [4,] 3.41990202 3.474527846 3.52413482 3.56892494 3.60948848 3.646811159 #>   [5,] 3.24621612 3.303997228 3.35701121 3.40540122 3.44971720 3.490924309 #>   [6,] 3.05850792 3.118423277 3.17369335 3.22443519 3.27120435 3.315002496 #>   [7,] 2.87167139 2.932975871 2.98949525 3.04133380 3.08908136 3.133819990 #>   [8,] 2.69819792 2.760631102 2.81780064 2.86978902 2.91722513 2.961291711 #>   [9,] 2.54694785 2.610814575 2.66858769 2.72029864 2.76659550 2.808754161 #>  [10,] 2.42256725 2.488689284 2.54758529 2.59919214 2.64413673 2.683754274 #>  [11,] 2.32552924 2.395093465 2.45609525 2.50832698 2.55234073 2.589476887 #>  [12,] 2.25269023 2.327034190 2.39140526 2.44540313 2.48944658 2.524815140 #>  [13,] 2.19820297 2.278582425 2.34764605 2.40476133 2.45015849 2.484987126 #>  [14,] 2.15461450 2.241992541 2.31691393 2.37848801 2.42671093 2.462538246 #>  [15,] 2.11398882 2.208875393 2.29047898 2.35764121 2.41009292 2.448542614 #>  [16,] 2.06892169 2.171279280 2.25992172 2.33343038 2.39125608 2.433822513 #>  [17,] 2.01335000 2.122569378 2.21807688 2.29821716 2.36216336 2.410033807 #>  [18,] 1.94309725 2.058037396 2.15970621 2.24624902 2.31657969 2.370508207 #>  [19,] 1.85613462 1.975214607 2.08186616 2.17408352 2.25055369 2.310792107 #>  [20,] 1.75257192 1.873899009 1.98397688 2.08070431 2.16258515 2.228869024 #>  [21,] 1.63442050 1.755937856 1.86763195 1.96736526 2.05351050 2.125092723 #>  [22,] 1.50518914 1.624827431 1.73621060 1.83722378 1.92616540 2.001886996 #>  [23,] 1.36938248 1.485201700 1.59436547 1.69483664 1.78489757 1.863283992 #>  [24,] 1.23197009 1.342280568 1.44745863 1.54559259 1.63500488 1.714376465 #>  [25,] 1.09788448 1.201339113 1.30100975 1.39514774 1.48216633 1.560752642 #>  [26,] 0.97159147 1.067244322 1.16020573 1.24891527 1.33191943 1.407968993 #>  [27,] 0.85675963 0.944089030 1.02950417 1.11164436 1.18922121 1.261099929 #>  [28,] 0.75603963 0.834937000 0.91234741 0.98710754 1.05811389 1.124387501 #>  [29,] 0.67095243 0.741680413 0.81099086 0.87790240 0.94150343 1.001000847 #>  [30,] 0.60187641 0.665002307 0.72644030 0.78536431 0.84104930 0.892905366 #>  [31,] 0.54811935 0.604431414 0.65848730 0.70958106 0.75715777 0.800835175 #>  [32,] 0.50805944 0.558474463 0.60582896 0.64949674 0.68906741 0.724358515 #>  [33,] 0.47933896 0.524809890 0.56625643 0.60308996 0.63501263 0.662023042 #>  [34,] 0.45909430 0.500526138 0.53689513 0.56760977 0.59244918 0.611565545 #>  [35,] 0.44420595 0.482386593 0.51447805 0.53985010 0.55832270 0.570167960 #>  [36,] 0.43155076 0.467101913 0.49563138 0.51644152 0.52935901 0.534738800 #>  [37,] 0.41823866 0.451589502 0.47715075 0.49413725 0.50235259 0.502196902 #>  [38,] 0.40181640 0.433200125 0.45624582 0.47007010 0.47442955 0.469733657 #>  [39,] 0.38042245 0.409893742 0.43073372 0.44195918 0.44326275 0.435031375 #>  [40,] 0.35288182 0.380351018 0.39916571 0.40824957 0.40722151 0.396419580 #>  [41,] 0.31873482 0.344013361 0.36087880 0.36817527 0.36544514 0.352957669 #>  [42,] 0.27820121 0.301052008 0.31597189 0.32174413 0.31783792 0.304440698 #>  [43,] 0.23208775 0.252274478 0.26521457 0.26965238 0.26499236 0.251333873 #>  [44,] 0.18165371 0.198983347 0.20990375 0.21314365 0.20805507 0.194649221 #>  [45,] 0.12845202 0.142806771 0.15168840 0.15383320 0.14855556 0.135783696 #>  [46,] 0.07416571 0.085521681 0.09238454 0.09351981 0.08822036 0.076340734 #>  [47,] 0.02045713 0.028889218 0.03380122 0.03400715 0.02879463 0.017956829 #>  [48,] 0.00000000 0.000000000 0.00000000 0.00000000 0.00000000 0.000000000 #>  [49,] 0.00000000 0.000000000 0.00000000 0.00000000 0.00000000 0.000000000 #>  [50,] 0.00000000 0.000000000 0.00000000 0.00000000 0.00000000 0.000000000 #>  [51,] 0.00000000 0.000000000 0.00000000 0.00000000 0.00000000 0.000000000 #>  [52,] 0.00000000 0.000000000 0.00000000 0.00000000 0.00000000 0.000000000 #>  [53,] 0.00000000 0.000000000 0.00000000 0.00000000 0.00000000 0.000000000 #>  [54,] 0.00000000 0.000000000 0.00000000 0.00000000 0.00000000 0.000000000 #>  [55,] 0.00000000 0.000000000 0.00000000 0.00000000 0.00000000 0.000000000 #>  [56,] 0.00000000 0.000000000 0.00000000 0.00000000 0.00000000 0.000000000 #>  [57,] 0.00000000 0.000000000 0.00000000 0.00000000 0.00000000 0.000000000 #>  [58,] 0.00000000 0.000000000 0.00000000 0.00000000 0.00000000 0.000000000 #>  [59,] 0.00000000 0.000000000 0.00000000 0.00000000 0.00000000 0.000000000 #>  [60,] 0.00000000 0.000000000 0.00000000 0.00000000 0.00000000 0.000000000 #>  [61,] 0.00000000 0.000000000 0.00000000 0.00000000 0.00000000 0.000000000 #>  [62,] 0.00000000 0.000000000 0.00000000 0.00000000 0.00000000 0.000000000 #>  [63,] 0.00000000 0.000000000 0.00000000 0.00000000 0.00000000 0.000000000 #>  [64,] 0.00000000 0.000000000 0.00000000 0.00000000 0.00000000 0.000000000 #>  [65,] 0.00000000 0.000000000 0.00000000 0.00000000 0.00000000 0.000000000 #>  [66,] 0.00000000 0.000000000 0.00000000 0.00000000 0.00000000 0.000000000 #>  [67,] 0.00000000 0.000000000 0.00000000 0.00000000 0.00000000 0.000000000 #>  [68,] 0.00000000 0.000000000 0.00000000 0.00000000 0.00000000 0.000000000 #>  [69,] 0.00000000 0.000000000 0.00000000 0.00000000 0.00000000 0.000000000 #>  [70,] 0.03936520 0.006210111 0.00000000 0.00000000 0.00000000 0.000000000 #>  [71,] 0.10584803 0.071816146 0.04454791 0.02411359 0.01056715 0.003960112 #>  [72,] 0.18267428 0.148407417 0.12149659 0.10197747 0.08988199 0.085247770 #>  [73,] 0.27068543 0.236956922 0.21111678 0.19316191 0.18309649 0.180935287 #>  [74,] 0.37036540 0.338084228 0.31413443 0.29846916 0.29105651 0.291874809 #>  [75,] 0.48171993 0.451927239 0.43078885 0.41820669 0.41409994 0.418391038 #>  [76,] 0.60418825 0.578040859 0.56071922 0.55206196 0.55192046 0.560134845 #>  [77,] 0.73660184 0.715336983 0.70288667 0.69900766 0.70345729 0.715959675 #>  [78,] 0.87719917 0.862075604 0.85554278 0.85724919 0.86682411 0.883835418 #>  [79,] 1.02369753 1.015910398 1.01625027 1.02422273 1.03928813 1.060813750 #>  [80,] 1.17341459 1.173985166 1.18195599 1.19664814 1.21730785 1.243057273 #>  [81,] 1.32342507 1.333071463 1.34911187 1.37063729 1.39663480 1.425942114 #>  [82,] 1.47073373 1.489733760 1.51383528 1.54185469 1.57248085 1.604239568 #>  [83,] 1.61244465 1.640507173 1.67209889 1.70572452 1.73974865 1.772376360 #>  [84,] 1.74590972 1.782073770 1.81993858 1.85767487 1.89331686 1.924764662 #>  [85,] 1.86884415 1.911425643 1.95366756 1.99340593 2.02836428 2.056181900 #>  [86,] 1.97940183 2.026004855 2.07008272 2.10916310 2.14070752 2.162167747 #>  [87,] 2.07620820 2.123810911 2.16664628 2.20198940 2.22711748 2.239393683 #>  [88,] 2.15834990 2.203465699 2.24162228 2.26992608 2.28557235 2.285952960 #>  [89,] 2.22532162 2.264225292 2.29414607 2.31212849 2.31540465 2.301520107 #>  [90,] 2.27693224 2.305930370 2.32420879 2.32887056 2.31730879 2.287342695 #>  [91,] 2.31317695 2.328894785 2.33255018 2.32142730 2.29319716 2.246054742 #>  [92,] 2.33409201 2.333746015 2.32047267 2.29184952 2.24592285 2.181337044 #>  [93,] 2.33962132 2.321249345 2.28961280 2.24267329 2.17892051 2.097486041 #>  [94,] 2.32953614 2.292163256 2.24172568 2.17662949 2.09584058 1.998977306 #>  [95,] 2.30345103 2.247177655 2.17854304 2.09642316 2.00025610 1.890110299 #>  [96,] 2.26096440 2.186970495 2.10174786 2.00463239 1.89549622 1.774791132 #>  [97,] 2.20191534 2.112378975 2.01306551 1.90372882 1.78460925 1.656454104 #>  [98,] 2.12669499 2.024625407 1.91441246         NA         NA          NA #>  [99,]         NA          NA         NA         NA         NA          NA #> [100,]         NA          NA         NA         NA         NA          NA #>              [,68]      [,69]       [,70]      [,71]      [,72]       [,73] #>   [1,]          NA         NA          NA         NA         NA          NA #>   [2,]          NA         NA          NA         NA         NA          NA #>   [3,]          NA         NA          NA         NA         NA          NA #>   [4,]          NA         NA          NA         NA         NA          NA #>   [5,] 3.530378121 3.56976336          NA         NA         NA          NA #>   [6,] 3.357250142 3.39972211 3.444444762 3.49355611 3.54913272          NA #>   [7,] 3.177092842 3.22083350 3.267255897 3.31870692 3.37748590 3.445637925 #>   [8,] 3.003690976 3.04656722 3.092387568 3.14378403 3.20336199 3.273482577 #>   [9,] 2.848642932 2.88863996 2.931505149 2.98021088 3.03773800 3.106845135 #>  [10,] 2.720055352 2.75564112 2.793568644 2.83717181 2.88984524 2.954800754 #>  [11,] 2.621837585 2.65220352 2.683896409 2.72059308 2.76609987 2.824098094 #>  [12,] 2.553632517 2.57878925 2.603806605 2.63264799 2.66948755 2.718448133 #>  [13,] 2.511312649 2.53204874 2.550827100 2.57181078 2.59946144 2.638274044 #>  [14,] 2.487896530 2.50562894 2.519375016 2.53339039 2.55231742 2.580920948 #>  [15,] 2.474704604 2.49126024 2.501751265 2.51041015 2.52193838 2.541247781 #>  [16,] 2.462571245 2.47994041 2.489274404 2.49466857 2.50075907 2.512473678 #>  [17,] 2.442953498 2.46305113 2.473387333 2.47781663 2.48079250 2.487131133 #>  [18,] 2.408817611 2.43327941 2.446601746 2.45231111 2.45457563 2.457984845 #>  [19,] 2.355233117 2.38526320 2.403189721 2.41214413 2.41592611 2.418802268 #>  [20,] 2.279652753 2.31593002 2.339580503 2.35329574 2.36044618 2.364901283 #>  [21,] 2.181898732 2.22454089 2.254465633 2.27390229 2.28575444 2.293443713 #>  [22,] 2.063906997 2.11248572 2.148651271 2.17417056 2.19146569 2.203483040 #>  [23,] 1.929299205 1.98289653 2.024719580 2.05609370 2.07896692 2.095805286 #>  [24,] 1.782857350 1.84015213 1.886570687 1.92303701 1.95105313 1.972620492 #>  [25,] 1.629970467 1.68934410 1.738914673 1.77926223 1.81148959 1.837168442 #>  [26,] 1.476110155 1.53576188 1.586772501 1.62944974 1.66456033 1.693297951 #>  [27,] 1.326375628 1.38443944 1.435029704 1.47826411 1.51464953 1.545067703 #>  [28,] 1.185133061 1.23978960 1.288070708 1.32999246 1.36588728 1.396401920 #>  [29,] 1.055760443 1.10533883 1.149507577 1.18827077 1.22187621 1.250819512 #>  [30,] 0.940499128 0.98356443 1.022006261 1.05590216 1.08550432 1.111243173 #>  [31,] 0.840406693 0.87582974 0.907206302 0.93476354 0.95884080 0.979886212 #>  [32,] 0.755401636 0.78240834 0.805725728 0.82579274 0.84310723 0.858209776 #>  [33,] 0.684387786 0.70258617 0.717240420 0.72904580 0.73871426 0.746940698 #>  [34,] 0.625443901 0.63482783 0.640625381 0.64381274 0.64535253 0.646139326 #>  [35,] 0.576061347 0.57699135 0.574143449 0.56877860 0.56212604 0.555306392 #>  [36,] 0.533410014 0.52657300 0.515664806 0.50221506 0.48771490 0.473517518 #>  [37,] 0.494610372 0.48096160 0.462898627 0.44218612 0.42055321 0.399573263 #>  [38,] 0.456988549 0.43768049 0.413617037 0.38675013 0.35900701 0.332151967 #>  [39,] 0.418292527 0.39459642 0.365852011 0.33414106 0.30153699 0.269952562 #>  [40,] 0.376851220 0.35007751 0.318048442 0.28291324 0.24683230 0.211815466 #>  [41,] 0.331664392 0.30308807 0.269161372 0.23203838 0.19390488 0.156812058 #>  [42,] 0.282419247 0.25321544 0.218691833 0.18094881 0.14213814 0.104296826 #>  [43,] 0.229438027 0.20063174 0.166663013 0.12952749 0.09128958 0.053920758 #>  [44,] 0.173568731 0.14600104 0.113545338 0.07805146 0.04145207 0.005609193 #>  [45,] 0.116036790 0.09034802 0.060144484 0.02710048 0.00000000 0.000000000 #>  [46,] 0.058278587 0.03490730 0.007469483 0.00000000 0.00000000 0.000000000 #>  [47,] 0.001777517 0.00000000 0.000000000 0.00000000 0.00000000 0.000000000 #>  [48,] 0.000000000 0.00000000 0.000000000 0.00000000 0.00000000 0.000000000 #>  [49,] 0.000000000 0.00000000 0.000000000 0.00000000 0.00000000 0.000000000 #>  [50,] 0.000000000 0.00000000 0.000000000 0.00000000 0.00000000 0.000000000 #>  [51,] 0.000000000 0.00000000 0.000000000 0.00000000 0.00000000 0.000000000 #>  [52,] 0.000000000 0.00000000 0.000000000 0.00000000 0.00000000 0.000000000 #>  [53,] 0.000000000 0.00000000 0.000000000 0.00000000 0.00000000 0.000000000 #>  [54,] 0.000000000 0.00000000 0.000000000 0.00000000 0.00000000 0.000000000 #>  [55,] 0.000000000 0.00000000 0.000000000 0.00000000 0.00000000 0.000000000 #>  [56,] 0.000000000 0.00000000 0.000000000 0.00000000 0.00000000 0.000000000 #>  [57,] 0.000000000 0.00000000 0.000000000 0.00000000 0.00000000 0.000000000 #>  [58,] 0.000000000 0.00000000 0.000000000 0.00000000 0.00000000 0.000000000 #>  [59,] 0.000000000 0.00000000 0.000000000 0.00000000 0.00000000 0.000000000 #>  [60,] 0.000000000 0.00000000 0.000000000 0.00000000 0.00000000 0.000000000 #>  [61,] 0.000000000 0.00000000 0.000000000 0.00000000 0.00000000 0.000000000 #>  [62,] 0.000000000 0.00000000 0.000000000 0.00000000 0.00000000 0.000000000 #>  [63,] 0.000000000 0.00000000 0.000000000 0.00000000 0.00000000 0.000000000 #>  [64,] 0.000000000 0.00000000 0.000000000 0.00000000 0.00000000 0.000000000 #>  [65,] 0.000000000 0.00000000 0.000000000 0.00000000 0.00000000 0.000000000 #>  [66,] 0.000000000 0.00000000 0.000000000 0.00000000 0.00000000 0.000000000 #>  [67,] 0.000000000 0.00000000 0.000000000 0.00000000 0.00000000 0.000000000 #>  [68,] 0.000000000 0.00000000 0.000000000 0.00000000 0.00000000 0.000000000 #>  [69,] 0.000000000 0.00000000 0.000000000 0.00000000 0.00000000 0.000000000 #>  [70,] 0.000000000 0.00000000 0.000000000 0.00000000 0.00000000 0.023509508 #>  [71,] 0.004347104 0.01177985 0.026287343 0.04784097 0.07630521 0.111376062 #>  [72,] 0.088115922 0.09851470 0.116428033 0.14174918 0.17422127 0.213368706 #>  [73,] 0.186691806 0.20035045 0.221822935 0.25089080 0.28713765 0.329876314 #>  [74,] 0.300890016 0.31801576 0.343058072 0.37564849 0.41517081 0.460688249 #>  [75,] 0.430971715 0.45165135 0.480091698 0.51573352 0.55772204 0.604839368 #>  [76,] 0.576489050 0.60064916 0.632091168 0.67002538 0.71332595 0.760474527 #>  [77,] 0.736151343 0.76351271 0.797293169 0.83643879 0.87953202 0.924753020 #>  [78,] 0.907728881 0.93775709 0.972907489 1.01183971 1.05284193 1.093815746 #>  [79,] 1.088011126 1.11986802 1.155085922 1.19203350 1.22872586 1.262837645 #>  [80,] 1.272835243 1.30533886 1.338977073 1.37184662 1.40173892 1.426184164 #>  [81,] 1.457198185 1.48880107 1.518883900 1.54531824 1.56575154 1.577682029 #>  [82,] 1.635460561 1.66425778 1.688532760 1.70600832 1.71429656 1.711001341 #>  [83,] 1.801642510 1.82541938 1.841450300 1.84741377 1.84101885 1.820128349 #>  [84,] 1.949800474 1.96612630 1.971427879 1.96346623 1.94019379 1.899888465 #>  [85,] 2.074459519 2.08082694 2.073034323 2.04906464 2.00726123 1.946460512 #>  [86,] 2.171060455 2.16506181 2.142119803 2.10057860 2.03930577 1.957810676 #>  [87,] 2.236367668 2.21589092 2.176241345 2.11624844 2.03540788 1.933973034 #>  [88,] 2.268776809 2.23219735 2.174938906 2.09641099 1.99679864 1.877116732 #>  [89,] 2.268465833 2.21480787 2.139804424 2.04349849 1.92677450 1.791368776 #>  [90,] 2.237351442 2.16639575 2.074315629 1.96179273 1.83036731 1.682402699 #>  [91,] 2.178845269 2.09116832 1.983448358 1.85696155 1.71381127 1.556848947 #>  [92,] 2.097444607 1.99438570 1.873126755 1.73545019 1.58389105 1.421621000 #>  [93,] 1.998230824 1.88179576 1.749607211 1.60383210 1.44728190 1.283269581 #>  [94,] 1.886371531 1.75908941 1.618905959 1.46823131 1.30999089 1.147466978 #>  [95,] 1.766718469 1.63147062 1.486362861 1.33390267 1.17697573          NA #>  [96,] 1.643557332 1.50339327          NA         NA         NA          NA #>  [97,]          NA         NA          NA         NA         NA          NA #>  [98,]          NA         NA          NA         NA         NA          NA #>  [99,]          NA         NA          NA         NA         NA          NA #> [100,]          NA         NA          NA         NA         NA          NA #>             [,74]      [,75]      [,76]      [,77]      [,78]      [,79] #>   [1,]         NA         NA         NA         NA         NA         NA #>   [2,]         NA         NA         NA         NA         NA         NA #>   [3,]         NA         NA         NA         NA         NA         NA #>   [4,]         NA         NA         NA         NA         NA         NA #>   [5,]         NA         NA         NA         NA         NA         NA #>   [6,]         NA         NA         NA         NA         NA         NA #>   [7,] 3.52473107         NA         NA         NA         NA         NA #>   [8,] 3.35602865 3.45216709         NA         NA         NA         NA #>   [9,] 3.18982150 3.28823493 3.40268972 3.53261218         NA         NA #>  [10,] 3.03480684 3.13192273 3.24724011 3.38064767 3.53063715         NA #>  [11,] 2.89787216 2.99003189 3.10224098 3.23496404 3.38724751 3.55655339 #>  [12,] 2.78332136 2.86728202 2.97260793 3.10041543 3.25042154 3.42074711 #>  [13,] 2.69249307 2.76582372 2.86114892 2.98026051 3.12361163 3.29009908 #>  [14,] 2.62380531 2.68512702 2.76831484 2.87580427 3.00879022 3.16700067 #>  [15,] 2.57318232 2.62223676 2.69228488 2.78632424 2.90623861 3.05257572 #>  [16,] 2.53476213 2.57232419 2.62934998 2.70928024 2.81458638 2.94656384 #>  [17,] 2.50175337 2.52942482 2.57451075 2.64075498 2.73108285 2.84741899 #>  [18,] 2.46730599 2.48723792 2.52218165 2.57603908 2.65204101 2.75259476 #>  [19,] 2.42527897 2.43987159 2.46689088 2.51026068 2.57337076 2.65895547 #>  [20,] 2.37082130 2.38244302 2.40388175 2.43896622 2.49111350 2.56323692 #>  [21,] 2.30072266 2.31147848 2.32955034 2.35857938 2.40190174 2.46248111 #>  [22,] 2.21352943 2.22509544 2.24168831 2.26669519 2.30328992 2.35438436 #>  [23,] 2.10945407 2.12298248 2.13953309 2.16219707 2.19393108 2.23752106 #>  [24,] 1.99012740 2.00621688 2.02365394 2.04521276 2.07360104 2.11143070 #>  [25,] 1.85825311 1.87697292 1.89571904 1.91694431 1.94309401 1.97657930 #>  [26,] 1.71722230 1.73817647 1.75819492 1.77941752 1.80402692 1.83422259 #>  [27,] 1.57073707 1.59315472 1.61402644 1.63519688 1.65859475 1.68620720 #>  [28,] 1.42247837 1.44531845 1.46633616 1.48710549 1.50931569 1.53474695 #>  [29,] 1.27583907 1.29790028 1.31816913 1.33797882 1.35879712 1.38220573 #>  [30,] 1.13373060 1.15375956 1.17229692 1.19046877 1.20954196 1.23090973 #>  [31,] 0.99846206 1.01525473 1.03108360 1.04690420 1.06380491 1.08300168 #>  [32,] 0.87168512 0.88417711 0.89640959 0.90920546 0.92349880 0.94034064 #>  [33,] 0.75439514 0.76173725 0.76964488 0.77884608 0.79014598 0.80444470 #>  [34,] 0.64697811 0.64859363 0.65166198 0.65685227 0.66486638 0.67646949 #>  [35,] 0.54929337 0.54491402 0.54287919 0.54383110 0.54839363 0.55721454 #>  [36,] 0.46078175 0.45046027 0.44332544 0.44001918 0.44111078 0.44714938 #>  [37,] 0.38058912 0.36468785 0.35271924 0.34534460 0.34309921 0.34645261 #>  [38,] 0.30769476 0.28685159 0.27055444 0.25949626 0.25419484 0.25505852 #>  [39,] 0.24103399 0.21610898 0.19618620 0.18199483 0.17404718 0.17270706 #>  [40,] 0.17960511 0.15161309 0.12891059 0.11226059 0.10217714 0.09899371 #>  [41,] 0.12255244 0.09258823 0.06803237 0.04967350 0.03803007 0.03341642 #>  [42,] 0.06921992 0.03838311 0.01291647 0.00000000 0.00000000 0.00000000 #>  [43,] 0.01917318 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [44,] 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [45,] 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [46,] 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [47,] 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [48,] 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [49,] 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [50,] 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [51,] 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [52,] 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [53,] 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [54,] 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [55,] 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [56,] 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [57,] 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [58,] 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [59,] 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [60,] 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [61,] 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [62,] 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [63,] 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [64,] 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [65,] 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [66,] 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [67,] 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.03832723 #>  [68,] 0.00000000 0.00000000 0.00000000 0.02621913 0.07044316 0.11602592 #>  [69,] 0.00000000 0.01877591 0.06099677 0.10684618 0.15494276 0.20352484 #>  [70,] 0.06028521 0.10243801 0.14903555 0.19877235 0.24994270 0.30045108 #>  [71,] 0.15251186 0.19886340 0.24921299 0.30193376 0.35498190 0.40593339 #>  [72,] 0.25842525 0.30826729 0.36136287 0.41574845 0.46904592 0.51853029 #>  [73,] 0.37807851 0.43031637 0.48472716 0.53901333 0.59048915 0.63618248 #>  [74,] 0.51087979 0.56399586 0.61784469 0.66982075 0.71698471 0.75620032 #>  [75,] 0.65545344 0.70749386 0.75846538 0.80550866 0.84551503 0.87529699 #>  [76,] 0.80952805 0.85812034 0.90350681 0.94265955 0.97241570 0.98967655 #>  [77,] 0.96987192 1.01228061 1.04907097 1.07716324 1.09348355 1.09518323 #>  [78,] 1.13229757 1.16552298 1.19053774 1.20435537 1.20415576 1.18751285 #>  [79,] 1.29175607 1.31267744 1.32274709 1.31923827 1.29976035 1.26248049 #>  [80,] 1.44253581 1.44809547 1.44027416 1.41678141 1.37582879 1.31632958 #>  [81,] 1.57857120 1.56598971 1.53778910 1.49228709 1.42845073 1.34605795 #>  [82,] 1.69385151 1.66085736 1.61047914 1.54179317 1.45463874 1.34972740 #>  [83,] 1.78290264 1.72795343 1.65449409 1.56247118 1.45266120 1.32671699 #>  [84,] 1.84129538 1.76376349 1.66736290 1.55296835 1.42229548 1.27787900 #>  [85,] 1.86611782 1.76641277 1.64832078 1.51363866 1.36495530 1.20556239 #>  [86,] 1.85634105 1.73594506 1.59848785 1.44661464 1.28365675 1.11348220 #>  [87,] 1.81301113 1.67441369 1.52085403 1.35568905 1.18280787 1.00643496 #>  [88,] 1.73921826 1.58574971 1.42005113 1.24600382 1.06783401 0.88988565 #>  [89,] 1.63982714 1.47540718 1.30192813 1.12357665 0.94468186 0.76947675 #>  [90,] 1.52099442 1.34982662 1.17298350 0.99472881 0.81927025 0.65052804 #>  [91,] 1.38954189 1.21579505 1.03973885 0.86549935 0.69696947         NA #>  [92,] 1.25228538 1.07980420 0.90815222 0.74113596         NA         NA #>  [93,] 1.11542871 0.94750823         NA         NA         NA         NA #>  [94,] 0.98411296         NA         NA         NA         NA         NA #>  [95,]         NA         NA         NA         NA         NA         NA #>  [96,]         NA         NA         NA         NA         NA         NA #>  [97,]         NA         NA         NA         NA         NA         NA #>  [98,]         NA         NA         NA         NA         NA         NA #>  [99,]         NA         NA         NA         NA         NA         NA #> [100,]         NA         NA         NA         NA         NA         NA #>              [,80]      [,81]       [,82]      [,83]      [,84]      [,85] #>   [1,]          NA         NA          NA         NA         NA         NA #>   [2,]          NA         NA          NA         NA         NA         NA #>   [3,]          NA         NA          NA         NA         NA         NA #>   [4,]          NA         NA          NA         NA         NA         NA #>   [5,]          NA         NA          NA         NA         NA         NA #>   [6,]          NA         NA          NA         NA         NA         NA #>   [7,]          NA         NA          NA         NA         NA         NA #>   [8,]          NA         NA          NA         NA         NA         NA #>   [9,]          NA         NA          NA         NA         NA         NA #>  [10,]          NA         NA          NA         NA         NA         NA #>  [11,] 3.738670213         NA          NA         NA         NA         NA #>  [12,] 3.607780850 3.80613108          NA         NA         NA         NA #>  [13,] 3.476889258 3.67930973 3.890837777         NA         NA         NA #>  [14,] 3.348497747 3.54952078 3.764397950 3.98556487         NA         NA #>  [15,] 3.224338942 3.41879859 3.631341034 3.85539005 4.08244879         NA #>  [16,] 3.105130053 3.28862297 3.493607888 3.71471851 3.94457813 4.17386212 #>  [17,] 2.990505295 3.15970541 3.352792104 3.56573172 3.79250378 4.02501674 #>  [18,] 2.879132042 3.03193582 3.209930398 3.41043604 3.62891401 3.85875655 #>  [19,] 2.768977394 2.90448813 3.065440484 3.25043948 3.45644355 3.67845880 #>  [20,] 2.657666287 2.77604919 2.919199435 3.08686732 3.27742755 3.48751243 #>  [21,] 2.542862588 2.64511554 2.770726393 2.92040558 3.09378932 3.28904660 #>  [22,] 2.422609682 2.51029725 2.619417906 2.75143625 2.90704760 3.08579061 #>  [23,] 2.295583201 2.37057593 2.464782402 2.58021616 2.71840755 2.88004782 #>  [24,] 2.161230556 2.22548043 2.306629739 2.40705270 2.52889112 2.67374856 #>  [25,] 2.019794574 2.07516427 2.145188148 2.23243971 2.33946582 2.46854165 #>  [26,] 1.872237296 1.92038835 1.981139395 2.05713282 2.15114154 2.26588845 #>  [27,] 1.720092177 1.76242740 1.815579363 1.88215945 1.96501968 2.06713446 #>  [28,] 1.565277660 1.60292686 1.649922819 1.70877285 1.78229316 1.87354639 #>  [29,] 1.409903238 1.44373911 1.485776549 1.53836752 1.60420647 1.68631472 #>  [30,] 1.256092581 1.28676403 1.324804852 1.37237691 1.43199144 1.50653032 #>  [31,] 1.105839583 1.13381231 1.168607002 1.21217268 1.26679562 1.33514757 #>  [32,] 0.960904423 0.98650189 1.018619600 1.05897989 1.10961769 1.17294705 #>  [33,] 0.822749543 0.84619036 0.876049794 0.91381658 0.96126007 1.02050791 #>  [34,] 0.692510688 0.71394089 0.741839380 0.77746035 0.82230316 0.87819563 #>  [35,] 0.570995752 0.59051586 0.616655699 0.65043968 0.69310106 0.74616695 #>  [36,] 0.458703766 0.47639101 0.500903159 0.53304522 0.57379552 0.62438977 #>  [37,] 0.355857161 0.37178328 0.394748729 0.42535483 0.46434252 0.51267376 #>  [38,] 0.262441756 0.27668663 0.298155474 0.32726645 0.36454599 0.41070658 #>  [39,] 0.178250286 0.19091137 0.210919427 0.23853385 0.27409358 0.31809070 #>  [40,] 0.102926313 0.11412381 0.132706441 0.15880166 0.19259062 0.23437717 #>  [41,] 0.036006162 0.04588421 0.063086842 0.08763742 0.11959004 0.15909365 #>  [42,] 0.000000000 0.00000000 0.001566607 0.02455939 0.05461686 0.09176584 #>  [43,] 0.000000000 0.00000000 0.000000000 0.00000000 0.00000000 0.03193219 #>  [44,] 0.000000000 0.00000000 0.000000000 0.00000000 0.00000000 0.00000000 #>  [45,] 0.000000000 0.00000000 0.000000000 0.00000000 0.00000000 0.00000000 #>  [46,] 0.000000000 0.00000000 0.000000000 0.00000000 0.00000000 0.00000000 #>  [47,] 0.000000000 0.00000000 0.000000000 0.00000000 0.00000000 0.00000000 #>  [48,] 0.000000000 0.00000000 0.000000000 0.00000000 0.00000000 0.00000000 #>  [49,] 0.000000000 0.00000000 0.000000000 0.00000000 0.00000000 0.00000000 #>  [50,] 0.000000000 0.00000000 0.000000000 0.00000000 0.00000000 0.00000000 #>  [51,] 0.000000000 0.00000000 0.000000000 0.00000000 0.00000000 0.00000000 #>  [52,] 0.000000000 0.00000000 0.000000000 0.00000000 0.00000000 0.00000000 #>  [53,] 0.000000000 0.00000000 0.000000000 0.00000000 0.00000000 0.00000000 #>  [54,] 0.000000000 0.00000000 0.000000000 0.00000000 0.00000000 0.00000000 #>  [55,] 0.000000000 0.00000000 0.000000000 0.00000000 0.00000000 0.00000000 #>  [56,] 0.000000000 0.00000000 0.000000000 0.00000000 0.00000000 0.00000000 #>  [57,] 0.000000000 0.00000000 0.000000000 0.00000000 0.00000000 0.00000000 #>  [58,] 0.000000000 0.00000000 0.000000000 0.00000000 0.00000000 0.00000000 #>  [59,] 0.000000000 0.00000000 0.000000000 0.00000000 0.00000000 0.00000000 #>  [60,] 0.000000000 0.00000000 0.000000000 0.00000000 0.00000000 0.00000000 #>  [61,] 0.000000000 0.00000000 0.000000000 0.00000000 0.00000000 0.00000000 #>  [62,] 0.000000000 0.00000000 0.000000000 0.00000000 0.00000000 0.00000000 #>  [63,] 0.000000000 0.00000000 0.000000000 0.00000000 0.00000000 0.00000000 #>  [64,] 0.000000000 0.00000000 0.000000000 0.00000000 0.01711494 0.03999732 #>  [65,] 0.000000000 0.00000000 0.017757016 0.04991907 0.07763435 0.09913559 #>  [66,] 0.009396495 0.04812681 0.084832759 0.11759130 0.14442974 0.16348544 #>  [67,] 0.080716681 0.12182955 0.159641690 0.19200359 0.21679610 0.23211590 #>  [68,] 0.161178315 0.20381221 0.241639062 0.27231617 0.29363217 0.30371529 #>  [69,] 0.250480666 0.29342793 0.329845078 0.35725013 0.37341371 0.37658479 #>  [70,] 0.347870337 0.38955378 0.422800634 0.44506582 0.45419579 0.44866408 #>  [71,] 0.452074201 0.49054700 0.518549916 0.53357317 0.53365030 0.51759308 #>  [72,] 0.561254372 0.59423017 0.614657371 0.62017986 0.60914211 0.58081090 #>  [73,] 0.672994620 0.69791341 0.708265053 0.70198051 0.67784427 0.63568922 #>  [74,] 0.784327306 0.79846017 0.796193754 0.77588677 0.73688860 0.67969287 #>  [75,] 0.891808539 0.89240066 0.875087907 0.83879439 0.78354344 0.71055671 #>  [76,] 0.991646598 0.97609331 0.941599944 0.88777826 0.81540669 0.72646412 #>  [77,] 1.079884558 1.04592994 0.992604976 0.92030273 0.83059823 0.72621023 #>  [78,] 1.152632446 1.09857470 1.025431655 0.93442999 0.82793378 0.70933258 #>  [79,] 1.206337344 1.13122080 1.038090319 0.92900687 0.80706114 0.67619272 #>  [80,] 1.238072187 1.14184309 1.029475904 0.90380876 0.76854130 0.62799588 #>  [81,] 1.245816519 1.12941964 0.999521178 0.85962082 0.71385982 0.56674104 #>  [82,] 1.228696740 1.09409354 0.949276814 0.79823976 0.64536019 0.49510024 #>  [83,] 1.187150937 1.03724688 0.880899221 0.72238679 0.56609824 0.41623461 #>  [84,] 1.122986241 0.96146547 0.797535521 0.63553123 0.47962642 0.33356205 #>  [85,] 1.039305776 0.87038394 0.703107124 0.54163634 0.38972646 0.25049953 #>  [86,] 0.940297913 0.76841688 0.602008024 0.44485076 0.30011769         NA #>  [87,] 0.830901130 0.66039973 0.498748649 0.34917952         NA         NA #>  [88,] 0.716379875 0.55118076 0.397587928         NA         NA         NA #>  [89,] 0.601865607 0.44521718          NA         NA         NA         NA #>  [90,] 0.491927201         NA          NA         NA         NA         NA #>  [91,]          NA         NA          NA         NA         NA         NA #>  [92,]          NA         NA          NA         NA         NA         NA #>  [93,]          NA         NA          NA         NA         NA         NA #>  [94,]          NA         NA          NA         NA         NA         NA #>  [95,]          NA         NA          NA         NA         NA         NA #>  [96,]          NA         NA          NA         NA         NA         NA #>  [97,]          NA         NA          NA         NA         NA         NA #>  [98,]          NA         NA          NA         NA         NA         NA #>  [99,]          NA         NA          NA         NA         NA         NA #> [100,]          NA         NA          NA         NA         NA         NA #>              [,86]       [,87]       [,88]       [,89]       [,90]      [,91] #>   [1,]          NA          NA          NA          NA          NA         NA #>   [2,]          NA          NA          NA          NA          NA         NA #>   [3,]          NA          NA          NA          NA          NA         NA #>   [4,]          NA          NA          NA          NA          NA         NA #>   [5,]          NA          NA          NA          NA          NA         NA #>   [6,]          NA          NA          NA          NA          NA         NA #>   [7,]          NA          NA          NA          NA          NA         NA #>   [8,]          NA          NA          NA          NA          NA         NA #>   [9,]          NA          NA          NA          NA          NA         NA #>  [10,]          NA          NA          NA          NA          NA         NA #>  [11,]          NA          NA          NA          NA          NA         NA #>  [12,]          NA          NA          NA          NA          NA         NA #>  [13,]          NA          NA          NA          NA          NA         NA #>  [14,]          NA          NA          NA          NA          NA         NA #>  [15,]          NA          NA          NA          NA          NA         NA #>  [16,]          NA          NA          NA          NA          NA         NA #>  [17,] 4.253195320          NA          NA          NA          NA         NA #>  [18,] 4.091200516 4.315453653          NA          NA          NA         NA #>  [19,] 3.909300794 4.139520658 4.357595206          NA          NA         NA #>  [20,] 3.711654072 3.942031976 4.168438611 4.378567840          NA         NA #>  [21,] 3.502440030 3.727928213 3.956926517 4.178350611 4.379044038         NA #>  [22,] 3.285565826 3.502133441 3.728702267 3.955744009 4.171161304         NA #>  [23,] 3.064501832 3.269243916 3.489316507 3.716945706 3.941459136 4.14962906 #>  [24,] 2.842227911 3.033346039 3.243907101 3.467959928 3.696491324 3.91750349 #>  [25,] 2.621256501 2.797942690 2.997007572 3.214278304 3.442507836 3.67120488 #>  [26,] 2.403695665 2.565955819 2.752462462 2.960688140 3.185147055 3.41700900 #>  [27,] 2.191320772 2.339772001 2.513419428 2.711186367 2.929253548 3.16049698 #>  [28,] 1.985633778 2.121303480 2.282367944 2.468970902 2.678799797 2.90639160 #>  [29,] 1.787900554 1.912046675 2.061200243 2.236481975 2.436885352 2.65849456 #>  [30,] 1.599166537 1.713129838 1.851278381 2.015471333 2.205788101 2.41969970 #>  [31,] 1.420257374 1.525349394 1.653499358 1.807084162 1.987047006 2.19205845 #>  [32,] 1.251773915 1.349199163 1.468356277 1.611945109 1.781561442 1.97687773 #>  [33,] 1.094090312 1.184898298 1.295996968 1.430244455 1.589697518 1.77483522 #>  [34,] 0.947361300 1.032422814 1.136282443 1.261823083 1.411395469 1.58610151 #>  [35,] 0.811541172 0.891543267 0.988846686 1.106255578 1.246274392 1.41046154 #>  [36,] 0.686413609 0.761868478 0.853157588 0.962930347 1.093731351 1.24742989 #>  [37,] 0.571629138 0.642892881 0.728577116 0.831124719 0.953032069 1.09635570 #>  [38,] 0.466745755 0.534043854 0.614417661 0.710072282 0.823390310 0.95651365 #>  [39,] 0.371268218 0.434725024 0.509991173 0.599019559 0.704033282 0.82717830 #>  [40,] 0.284682324 0.344352236 0.414648189 0.497269591 0.594251027 0.70767983 #>  [41,] 0.206481776 0.262379997 0.327804965 0.404211057 0.493428809 0.59744062 #>  [42,] 0.136186690 0.188317669 0.248958264 0.319332869 0.401062842 0.49599321 #>  [43,] 0.073354044 0.121736007 0.177688747 0.242225543 0.316761016 0.40298177 #>  [44,] 0.017581344 0.062265692 0.113655004 0.172571794 0.240231421 0.31815001 #>  [45,] 0.000000000 0.009590154 0.056580980 0.110129521 0.171262248 0.24131961 #>  [46,] 0.000000000 0.000000000 0.006239844 0.054710679 0.109696930 0.17236314 #>  [47,] 0.000000000 0.000000000 0.000000000 0.006159387 0.055408267 0.11117573 #>  [48,] 0.000000000 0.000000000 0.000000000 0.000000000 0.008274749 0.05764879 #>  [49,] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.01164867 #>  [50,] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.00000000 #>  [51,] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.00000000 #>  [52,] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.00000000 #>  [53,] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.00000000 #>  [54,] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.00000000 #>  [55,] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.00000000 #>  [56,] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.00000000 #>  [57,] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.00000000 #>  [58,] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.00000000 #>  [59,] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.00000000 #>  [60,] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.00000000 #>  [61,] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.00000000 #>  [62,] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.00000000 #>  [63,] 0.005067136 0.017173606 0.021981431 0.018943592 0.008062709 0.00000000 #>  [64,] 0.056539809 0.065449193 0.065834878 0.057342224 0.040241743 0.01545445 #>  [65,] 0.112838166 0.117508969 0.112424053 0.097491255 0.073315325 0.04118856 #>  [66,] 0.173185326 0.172424787 0.160721623 0.138320001 0.106223227 0.06614232 #>  [67,] 0.236471826 0.228967604 0.209444004 0.178555156 0.137760476 0.08922464 #>  [68,] 0.301240783 0.285609373 0.257068020 0.216749048 0.166613229 0.10929616 #>  [69,] 0.365701245 0.340553930 0.301875611 0.251333434 0.191416469 0.12522586 #>  [70,] 0.427774531 0.391799806 0.342027609 0.280698073 0.210831309 0.13596179 #>  [71,] 0.485175510 0.437234699 0.375664208 0.303289980 0.223636573 0.14061000 #>  [72,] 0.535527205 0.474757494 0.401025998 0.317725822 0.228826469 0.13851355 #>  [73,] 0.576502988 0.502419750 0.416585874 0.322907013 0.225704032 0.12932214 #>  [74,] 0.605986617 0.518575036 0.421179313 0.318125195 0.213959080 0.11304287 #>  [75,] 0.622236831 0.522021852 0.414119020 0.303145361 0.193720041 0.09006403 #>  [76,] 0.624040883 0.512124823 0.395280081 0.278255183 0.165571136 0.06114643 #>  [77,] 0.610840574 0.488899462 0.365143794 0.244272150 0.130530112 0.02738071 #>  [78,] 0.582815418 0.453048491 0.324792108 0.202504559 0.089986245 0.00000000 #>  [79,] 0.540910626 0.405942036 0.275849778 0.154667740 0.045603377         NA #>  [80,] 0.486802409 0.349539779 0.220377278 0.102762404 0.000000000         NA #>  [81,] 0.422799392 0.286259641 0.160723478 0.048926900          NA         NA #>  [82,] 0.351685999 0.218803975 0.099352251          NA          NA         NA #>  [83,] 0.276520797 0.149959878          NA          NA          NA         NA #>  [84,] 0.200409065          NA          NA          NA          NA         NA #>  [85,]          NA          NA          NA          NA          NA         NA #>  [86,]          NA          NA          NA          NA          NA         NA #>  [87,]          NA          NA          NA          NA          NA         NA #>  [88,]          NA          NA          NA          NA          NA         NA #>  [89,]          NA          NA          NA          NA          NA         NA #>  [90,]          NA          NA          NA          NA          NA         NA #>  [91,]          NA          NA          NA          NA          NA         NA #>  [92,]          NA          NA          NA          NA          NA         NA #>  [93,]          NA          NA          NA          NA          NA         NA #>  [94,]          NA          NA          NA          NA          NA         NA #>  [95,]          NA          NA          NA          NA          NA         NA #>  [96,]          NA          NA          NA          NA          NA         NA #>  [97,]          NA          NA          NA          NA          NA         NA #>  [98,]          NA          NA          NA          NA          NA         NA #>  [99,]          NA          NA          NA          NA          NA         NA #> [100,]          NA          NA          NA          NA          NA         NA #>              [,92]      [,93]      [,94]      [,95]       [,96]      [,97] #>   [1,]          NA         NA         NA         NA          NA         NA #>   [2,]          NA         NA         NA         NA          NA         NA #>   [3,]          NA         NA         NA         NA          NA         NA #>   [4,]          NA         NA         NA         NA          NA         NA #>   [5,]          NA         NA         NA         NA          NA         NA #>   [6,]          NA         NA         NA         NA          NA         NA #>   [7,]          NA         NA         NA         NA          NA         NA #>   [8,]          NA         NA         NA         NA          NA         NA #>   [9,]          NA         NA         NA         NA          NA         NA #>  [10,]          NA         NA         NA         NA          NA         NA #>  [11,]          NA         NA         NA         NA          NA         NA #>  [12,]          NA         NA         NA         NA          NA         NA #>  [13,]          NA         NA         NA         NA          NA         NA #>  [14,]          NA         NA         NA         NA          NA         NA #>  [15,]          NA         NA         NA         NA          NA         NA #>  [16,]          NA         NA         NA         NA          NA         NA #>  [17,]          NA         NA         NA         NA          NA         NA #>  [18,]          NA         NA         NA         NA          NA         NA #>  [19,]          NA         NA         NA         NA          NA         NA #>  [20,]          NA         NA         NA         NA          NA         NA #>  [21,]          NA         NA         NA         NA          NA         NA #>  [22,]          NA         NA         NA         NA          NA         NA #>  [23,]          NA         NA         NA         NA          NA         NA #>  [24,] 4.116581820         NA         NA         NA          NA         NA #>  [25,] 3.886928418         NA         NA         NA          NA         NA #>  [26,] 3.644129058 3.85161347         NA         NA          NA         NA #>  [27,] 3.394275970 3.61672586 3.81164087         NA          NA         NA #>  [28,] 3.142712645 3.37519072 3.58832922         NA          NA         NA #>  [29,] 2.893895764 3.13197323 3.35825501 3.55589470          NA         NA #>  [30,] 2.651353424 2.89116596 3.12591419 3.33945586          NA         NA #>  [31,] 2.417715720 2.65597027 2.89498773 3.11960853          NA         NA #>  [32,] 2.194795011 2.42874409 2.66834539 2.89962243 3.105891457         NA #>  [33,] 1.983696726 2.21109417 2.44810716 2.68207095 2.897218685         NA #>  [34,] 1.784945594 2.00399433 2.23574182 2.46890050 2.688806679 2.87853569 #>  [35,] 1.598615971 1.80791487 2.03218500 2.26152782 2.482507217 2.67903385 #>  [36,] 1.424457860 1.62295166 1.83796258 2.06094930 2.279772359 2.47935527 #>  [37,] 1.262012390 1.44894650 1.65330889 1.86784958 2.081747038 2.28106117 #>  [38,] 1.110712163 1.28559265 1.47827188 1.68270016 1.889355388 2.08550834 #>  [39,] 0.969963209 1.13252163 1.31280036 1.50584205 1.703373697 1.89390837 #>  [40,] 0.839206639 0.98936882 1.15681051 1.33754895 1.524485928 1.70737175 #>  [41,] 0.717959449 0.85581754 1.01023087 1.17806999 1.353320390 1.52693503 #>  [42,] 0.605835364 0.73162239 0.87302684 1.02765276 1.190468227 1.35357150 #>  [43,] 0.502547942 0.61661431 0.74520688 0.88654906 1.036486021 1.18818783 #>  [44,] 0.407899269 0.51069077 0.62681414 0.75500676 0.891885922 1.03160980 #>  [45,] 0.321758330 0.41379526 0.51790752 0.63325190 0.757117332 0.88456144 #>  [46,] 0.244033455 0.32589062 0.41853667 0.52146543 0.632544377 0.74764135 #>  [47,] 0.174643083 0.24693047 0.32871528 0.41975872 0.518423138 0.62130032 #>  [48,] 0.113488556 0.17683264 0.24839638 0.32815144 0.414882066 0.50582323 #>  [49,] 0.060431790 0.11545741 0.17745251 0.24655468 0.321908157 0.40131770 #>  [50,] 0.015279665 0.06259258 0.11566287 0.17476101 0.239340517 0.30771072 #>  [51,] 0.000000000 0.01794618 0.06270807 0.11244243 0.166871930 0.22475388 #>  [52,] 0.000000000 0.00000000 0.01817243 0.05915579 0.104058114 0.15203646 #>  [53,] 0.000000000 0.00000000 0.00000000 0.01435485 0.050333566 0.08900529 #>  [54,] 0.000000000 0.00000000 0.00000000 0.00000000 0.005032308 0.03498956 #>  [55,] 0.000000000 0.00000000 0.00000000 0.00000000 0.000000000 0.00000000 #>  [56,] 0.000000000 0.00000000 0.00000000 0.00000000 0.000000000 0.00000000 #>  [57,] 0.000000000 0.00000000 0.00000000 0.00000000 0.000000000 0.00000000 #>  [58,] 0.000000000 0.00000000 0.00000000 0.00000000 0.000000000 0.00000000 #>  [59,] 0.000000000 0.00000000 0.00000000 0.00000000 0.000000000 0.00000000 #>  [60,] 0.000000000 0.00000000 0.00000000 0.00000000 0.000000000 0.00000000 #>  [61,] 0.000000000 0.00000000 0.00000000 0.00000000 0.000000000 0.00000000 #>  [62,] 0.000000000 0.00000000 0.00000000 0.00000000 0.000000000 0.00000000 #>  [63,] 0.000000000 0.00000000 0.00000000 0.00000000 0.000000000 0.00000000 #>  [64,] 0.000000000 0.00000000 0.00000000 0.00000000 0.000000000 0.00000000 #>  [65,] 0.002999564 0.00000000 0.00000000 0.00000000 0.000000000 0.00000000 #>  [66,] 0.020359342 0.00000000 0.00000000 0.00000000 0.000000000 0.00000000 #>  [67,] 0.035632064 0.00000000 0.00000000 0.00000000 0.000000000 0.00000000 #>  [68,] 0.047872876 0.00000000 0.00000000 0.00000000 0.000000000         NA #>  [69,] 0.056191553 0.00000000 0.00000000 0.00000000 0.000000000         NA #>  [70,] 0.059812702 0.00000000 0.00000000 0.00000000          NA         NA #>  [71,] 0.058138964 0.00000000 0.00000000 0.00000000          NA         NA #>  [72,] 0.050809765 0.00000000 0.00000000 0.00000000          NA         NA #>  [73,] 0.037747634 0.00000000 0.00000000         NA          NA         NA #>  [74,] 0.019184692 0.00000000 0.00000000         NA          NA         NA #>  [75,] 0.000000000 0.00000000         NA         NA          NA         NA #>  [76,] 0.000000000         NA         NA         NA          NA         NA #>  [77,] 0.000000000         NA         NA         NA          NA         NA #>  [78,]          NA         NA         NA         NA          NA         NA #>  [79,]          NA         NA         NA         NA          NA         NA #>  [80,]          NA         NA         NA         NA          NA         NA #>  [81,]          NA         NA         NA         NA          NA         NA #>  [82,]          NA         NA         NA         NA          NA         NA #>  [83,]          NA         NA         NA         NA          NA         NA #>  [84,]          NA         NA         NA         NA          NA         NA #>  [85,]          NA         NA         NA         NA          NA         NA #>  [86,]          NA         NA         NA         NA          NA         NA #>  [87,]          NA         NA         NA         NA          NA         NA #>  [88,]          NA         NA         NA         NA          NA         NA #>  [89,]          NA         NA         NA         NA          NA         NA #>  [90,]          NA         NA         NA         NA          NA         NA #>  [91,]          NA         NA         NA         NA          NA         NA #>  [92,]          NA         NA         NA         NA          NA         NA #>  [93,]          NA         NA         NA         NA          NA         NA #>  [94,]          NA         NA         NA         NA          NA         NA #>  [95,]          NA         NA         NA         NA          NA         NA #>  [96,]          NA         NA         NA         NA          NA         NA #>  [97,]          NA         NA         NA         NA          NA         NA #>  [98,]          NA         NA         NA         NA          NA         NA #>  [99,]          NA         NA         NA         NA          NA         NA #> [100,]          NA         NA         NA         NA          NA         NA #>             [,98]      [,99] [,100] #>   [1,]         NA         NA     NA #>   [2,]         NA         NA     NA #>   [3,]         NA         NA     NA #>   [4,]         NA         NA     NA #>   [5,]         NA         NA     NA #>   [6,]         NA         NA     NA #>   [7,]         NA         NA     NA #>   [8,]         NA         NA     NA #>   [9,]         NA         NA     NA #>  [10,]         NA         NA     NA #>  [11,]         NA         NA     NA #>  [12,]         NA         NA     NA #>  [13,]         NA         NA     NA #>  [14,]         NA         NA     NA #>  [15,]         NA         NA     NA #>  [16,]         NA         NA     NA #>  [17,]         NA         NA     NA #>  [18,]         NA         NA     NA #>  [19,]         NA         NA     NA #>  [20,]         NA         NA     NA #>  [21,]         NA         NA     NA #>  [22,]         NA         NA     NA #>  [23,]         NA         NA     NA #>  [24,]         NA         NA     NA #>  [25,]         NA         NA     NA #>  [26,]         NA         NA     NA #>  [27,]         NA         NA     NA #>  [28,]         NA         NA     NA #>  [29,]         NA         NA     NA #>  [30,]         NA         NA     NA #>  [31,]         NA         NA     NA #>  [32,]         NA         NA     NA #>  [33,]         NA         NA     NA #>  [34,]         NA         NA     NA #>  [35,]         NA         NA     NA #>  [36,]         NA         NA     NA #>  [37,] 2.44989484         NA     NA #>  [38,] 2.25617645         NA     NA #>  [39,] 2.06350178         NA     NA #>  [40,] 1.87338046         NA     NA #>  [41,] 1.68724742 1.82101924     NA #>  [42,] 1.50646341 1.63691989     NA #>  [43,] 1.33230299 1.45767034     NA #>  [44,] 1.16593351 1.28477687     NA #>  [45,] 1.00838909 1.11959363     NA #>  [46,] 0.86054362 0.96329008     NA #>  [47,] 0.72308662 0.81682287     NA #>  [48,] 0.59650491 0.68091504     NA #>  [49,] 0.48107219 0.55604460     NA #>  [50,] 0.37684775 0.44244338     NA #>  [51,] 0.28368439 0.34010616     NA #>  [52,] 0.20124478 0.24880910     NA #>  [53,] 0.12902497 0.16813585     NA #>  [54,] 0.06638307 0.09750922     NA #>  [55,] 0.01257086 0.03622620     NA #>  [56,] 0.00000000 0.00000000     NA #>  [57,] 0.00000000 0.00000000     NA #>  [58,] 0.00000000 0.00000000     NA #>  [59,] 0.00000000 0.00000000     NA #>  [60,] 0.00000000 0.00000000     NA #>  [61,] 0.00000000         NA     NA #>  [62,] 0.00000000         NA     NA #>  [63,] 0.00000000         NA     NA #>  [64,] 0.00000000         NA     NA #>  [65,]         NA         NA     NA #>  [66,]         NA         NA     NA #>  [67,]         NA         NA     NA #>  [68,]         NA         NA     NA #>  [69,]         NA         NA     NA #>  [70,]         NA         NA     NA #>  [71,]         NA         NA     NA #>  [72,]         NA         NA     NA #>  [73,]         NA         NA     NA #>  [74,]         NA         NA     NA #>  [75,]         NA         NA     NA #>  [76,]         NA         NA     NA #>  [77,]         NA         NA     NA #>  [78,]         NA         NA     NA #>  [79,]         NA         NA     NA #>  [80,]         NA         NA     NA #>  [81,]         NA         NA     NA #>  [82,]         NA         NA     NA #>  [83,]         NA         NA     NA #>  [84,]         NA         NA     NA #>  [85,]         NA         NA     NA #>  [86,]         NA         NA     NA #>  [87,]         NA         NA     NA #>  [88,]         NA         NA     NA #>  [89,]         NA         NA     NA #>  [90,]         NA         NA     NA #>  [91,]         NA         NA     NA #>  [92,]         NA         NA     NA #>  [93,]         NA         NA     NA #>  [94,]         NA         NA     NA #>  [95,]         NA         NA     NA #>  [96,]         NA         NA     NA #>  [97,]         NA         NA     NA #>  [98,]         NA         NA     NA #>  [99,]         NA         NA     NA #> [100,]         NA         NA     NA #>  #> attr(,\"class\") #> [1] \"list\"              \"spherical.density\""},{"path":"https://tobiste.github.io/structr/reference/dist.mle.html","id":null,"dir":"Reference","previous_headings":"","what":"MLE of spherical rotational symmetric distributions — dist.mle","title":"MLE of spherical rotational symmetric distributions — dist.mle","text":"Estimates parameters von Mises-Fisher Kent distribution.","code":""},{"path":"https://tobiste.github.io/structr/reference/dist.mle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MLE of spherical rotational symmetric distributions — dist.mle","text":"","code":"kent_mle(x)  vmf_mle(x)"},{"path":"https://tobiste.github.io/structr/reference/dist.mle.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"MLE of spherical rotational symmetric distributions — dist.mle","text":"Adapted Directional::kent.mle() Directional::vmf.mle()","code":""},{"path":"https://tobiste.github.io/structr/reference/dist.mle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MLE of spherical rotational symmetric distributions — dist.mle","text":"x Object class \"Vec3\", \"Line\" \"Plane\"","code":""},{"path":"https://tobiste.github.io/structr/reference/dist.mle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MLE of spherical rotational symmetric distributions — dist.mle","text":"","code":"x <- rkent(100, mu = Line(120, 50), k = 5, b = 1) kent_mle(x) #> $G #> Line object (n = 3): #>        azimuth    plunge #> mean  122.5194 52.459558 #> major 221.4420  6.796807 #> minor 316.5400 36.706588 #>  #> $param #>     kappa      beta       psi  #> 4.3470987 0.5821929 0.6635308  #>  #> $logcon #> [1] 4.735575 #>  #> $loglik #> [1] -137.3882 #>  vmf_mle(x) #> $loglik #> [1] -138.7354 #>  #> $mu #> Line object (n = 1): #>   azimuth    plunge  #> 122.51939  52.45956  #>  #> $kappa #> [1] 4.257214 #>"},{"path":"https://tobiste.github.io/structr/reference/dist.spherical.html","id":null,"dir":"Reference","previous_headings":"","what":"Angular distance matrix for orientation vectors — dist.spherical","title":"Angular distance matrix for orientation vectors — dist.spherical","text":"function computes returns distance matrix computed using Cosine similarity compute distances rows data matrix.","code":""},{"path":"https://tobiste.github.io/structr/reference/dist.spherical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Angular distance matrix for orientation vectors — dist.spherical","text":"","code":"# S3 method for class 'spherical' dist(x, ...)"},{"path":"https://tobiste.github.io/structr/reference/dist.spherical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Angular distance matrix for orientation vectors — dist.spherical","text":"x object class \"Vec3\", \"Line\", \"Plane\". ... optional parameters passed stats::.dist()","code":""},{"path":"https://tobiste.github.io/structr/reference/dist.spherical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Angular distance matrix for orientation vectors — dist.spherical","text":"distance matrix","code":""},{"path":"https://tobiste.github.io/structr/reference/dist.spherical.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Angular distance matrix for orientation vectors — dist.spherical","text":"","code":"set.seed(20250411) dist(rvmf(100, mu = Line(90, 0), k = 20)) #>               1           2           3           4           5           6 #> 2     8.4989072                                                             #> 3   163.3726337 164.7365089                                                 #> 4    27.1037252  20.5081257 182.2393505                                     #> 5   179.8567819 181.8904910  21.7955180 200.1105572                         #> 6   145.4473295 147.4339587  21.0874992 165.7018028  34.4565742             #> 7   173.4558655 175.3604283  15.0835435 193.4555898   7.0372131  28.0217527 #> 8    10.8025073   9.5229971 173.2546477  17.8605469 190.0552322 155.6148799 #> 9   164.3363898 166.5639926  17.1876766 185.0258931  15.9573461  19.5542498 #> 10  161.3075956 163.2414842  11.2964075 181.4023804  18.7192371  15.8700746 #> 11  182.0344160 183.7564364  20.2554315 201.6242857   7.1320598  36.8383567 #> 12   24.0490442  22.2145948 186.7216449  15.3934200 203.5789616 169.1368177 #> 13   20.3526313  18.1665787 182.7243574  13.9369515 199.6380946 165.1913789 #> 14   40.7264588  33.7311746 191.5469318  13.6709787 210.0157095 175.7406637 #> 15  164.7394135 166.6750357  11.4272931 184.8278957  15.3092613  19.2973058 #> 16  155.5465766 157.7811546  18.3602681 176.2736843  24.5633159  11.1982524 #> 17  157.6903634 159.7030731  13.6639759 177.9592030  22.1876884  12.2700186 #> 18  179.2364594 181.4309580  23.6796569 199.8231490   3.5687438  34.1510287 #> 19  156.5924178 158.7606322  16.8187646 177.1824837  23.3673697  11.7280788 #> 20  166.5178361 168.2830636   8.6368476 186.2425852  14.6093673  21.3801124 #> 21  161.1677022 163.3205914  15.5871625 181.7138993  18.7989825  16.1119425 #> 22  161.8799722 164.0926159  16.7392271 182.5455769  18.2777908  17.0859344 #> 23   20.7429897  16.9871693 181.6992698  10.2819699 198.8741077 164.4177509 #> 24  177.1309211 179.3391028  22.4307115 197.7502612   4.6318542  32.1002452 #> 25  156.9605268 159.0877256  15.9605039 177.4661686  22.9366370  11.8743358 #> 26   17.0920372   8.6602915 165.0476160  17.2656475 182.8497911 148.4377256 #> 27  169.9803142 171.6910498   9.7094244 189.5788355  12.1538185  24.9639575 #> 28  147.3348714 149.5795766  22.7470741 168.1063972  32.6979353   5.0437596 #> 29   11.0609211  10.9604781 174.0535209  18.9162650 190.7333375 156.3042708 #> 30  183.1028999 183.7217701  24.6850095 200.1954734  30.8046283  45.6100501 #> 31  159.4642916 161.5908174  15.2924698 179.9614568  20.4423274  14.3300367 #> 32  170.3796454 171.2368046  12.1235650 188.0768006  26.6676364  32.3841494 #> 33  152.2041348 154.2975500  17.6084599 172.6550666  27.6575575   7.0833193 #> 34  171.1384836 172.4814191   7.7691088 189.9329373  17.2026451  28.1803879 #> 35  174.6147327 176.3849419  14.1138781 194.3271724   7.8111891  29.3687222 #> 36   28.6684472  22.3743059 184.4160991   2.1796218 202.2754368 167.8641062 #> 37   33.2813616  25.2648137 161.5273785  26.0463168 180.4600667 146.4074431 #> 38  176.8337611 178.5288090  15.2164336 196.3794282   7.9878369  31.7609326 #> 39   31.7695258  23.2892395 168.8723149  18.8555417 187.6218281 153.4728637 #> 40   28.0782659  22.0421307 184.6112034   2.6998304 202.3932236 167.9711683 #> 41   16.3277004  12.2507857 176.9829544  11.9531530 194.1268728 159.6707349 #> 42   13.5831039   8.7293587 173.4515179  13.6470700 190.6183699 156.1619038 #> 43  173.7573043 175.4282536  12.2369974 193.2597168   9.9936086  28.8108100 #> 44  167.0831138 169.0930203  13.4964006 187.3195627  12.7990315  21.6594408 #> 45   23.8740728  21.1512562 185.8678128  12.8416745 202.8965921 168.4442498 #> 46    4.3359128   6.9030106 167.2032636  23.1054228 183.8405120 149.4139338 #> 47  190.8581596 192.3417684  27.6693190 209.9069814  16.3339378  46.2945578 #> 48  172.4044606 173.7671080   9.0340458 191.2385054  16.2477630  29.1993255 #> 49  167.9702656 168.9456613   8.8463916 185.9483680  25.3385404  29.0743994 #> 50  158.9461830 160.8311169  10.9407740 178.9459341  21.2129496  13.5836992 #> 51   19.5674406  11.1561465 165.0695797  17.2006574 183.0506012 148.6689055 #> 52  175.3021262 176.3250787  13.6273493 193.3629006  22.1465909  34.7147616 #> 53   22.9982949  20.7963020 185.4040001  14.1270147 202.3296625 167.8826036 #> 54   33.1270976  31.3358912 195.9261582  20.1839409 212.7789619 178.3387625 #> 55   24.6237776  17.8945960 179.8527404   2.6259555 197.6568895 163.2393149 #> 56  154.2111943 155.4443488   9.5574831 172.8231370  30.6076432  15.9763734 #> 57   16.6602133  16.6860682 179.9255027  18.5744936 196.5071093 162.0909301 #> 58   47.5767816  40.2273307 194.7368729  20.7673119 213.5715993 179.4325247 #> 59  159.1173677 161.2098653  14.7177334 179.5459772  20.7516151  13.8678898 #> 60   21.1563148  20.8626828 184.4318700  18.6694650 201.0098097 166.5954583 #> 61  157.6567666 159.6750029  13.7742186 177.9370993  22.2166145  12.2436323 #> 62   16.9580421  14.4350887 179.0056347  13.8192922 195.9546282 161.5053058 #> 63  187.6620595 189.0425631  24.3071561 206.4910950  16.2994213  43.6316118 #> 64  161.6097064 163.8250041  16.7974148 182.2813960  18.5518471  16.8372138 #> 65   14.0048386  17.4867724 149.3716030  37.9398154 165.8801039 131.4616797 #> 66  175.8989165 177.6154203  14.5968467 195.4931482   7.9855106  30.7758560 #> 67  163.0926946 164.6296222   3.3936580 182.3384402  19.8880215  19.3363025 #> 68  178.8966373 180.0566127  15.9784784 197.2570130  18.9111656  36.7367626 #> 69  169.6894747 171.8907459  18.1644849 190.3121913  10.7021221  24.7038794 #> 70  172.6110533 174.3411660  11.9782468 192.2434844   9.8415533  27.4902730 #> 71  169.7280583 171.5772328  11.7570816 189.6212484  10.9489369  24.3620739 #> 72  162.4684534 163.3118898  10.1628077 180.1648406  30.3084025  26.7343991 #> 73  153.0226091 154.5375183  10.6696473 172.2560439  29.0325226  11.2409156 #> 74   24.9785473  19.5067115 183.1474840   4.5820923 200.7190850 166.2758032 #> 75   14.2058495  14.7310655 177.5093433  19.3929783 194.0600794 159.6470299 #> 76  150.5614559 152.2978342  14.4522047 170.2768537  30.0457804   6.7159580 #> 77   35.4633935  32.5974348 197.3154747  18.3972887 214.4648625 180.0094772 #> 78  174.3654144 175.5559321  11.4557558 192.8091722  18.9240782  32.3560001 #> 79    6.4139452   9.7576794 157.2622794  30.2333291 173.9317405 139.4987636 #> 80  160.3897914 162.5151182  15.1246937 180.8819320  19.5195086  15.2382585 #> 81   18.3495419  14.2376592 178.9407977  10.6392927 196.1278865 161.6713848 #> 82  162.2637788 163.4764543   3.1716575 180.7991763  24.6914823  21.7988653 #> 83   25.6100919  21.2467169 185.6508267   8.1576001 203.0212550 168.5668110 #> 84   12.7821911   9.5977101 174.1664567  15.1905119 191.1569251 156.7049604 #> 85  166.1325642 167.9080821   8.6804838 185.8802859  14.8787619  20.9687621 #> 86  179.2434937 181.1540923  19.6936785 199.2412135   2.7719380  33.8020844 #> 87   27.7059847  25.3883877 190.0730669  15.3366143 207.0405847 172.5916978 #> 88   22.9431874  17.3559652 181.0927790   5.2286854 198.6259503 164.1802061 #> 89   31.0772074  28.1360397 192.8630771  15.1472685 209.9965396 175.5413005 #> 90   16.7154207  10.1894946 173.9567407  10.4808213 191.4082871 156.9585929 #> 91  151.3648497 153.2473565  15.3196592 171.3838753  28.7370606   6.1612084 #> 92   16.5680181   9.0544774 160.6987934  21.6362810 178.4806936 144.0676364 #> 93  172.7477946 174.1403951   9.4101800 191.6469344  15.5341642  29.3065741 #> 94   18.6294869  11.7672056 174.7977553   8.7446271 192.3749757 157.9338795 #> 95   23.3339951  20.0264818 184.7578574  11.1308831 201.8909512 167.4353176 #> 96   30.3920903  24.7688305 187.6777900   5.6653738 205.4346714 171.0086008 #> 97   14.2288253  10.2725644 174.9993959  13.5761583 192.0902512 157.6349987 #> 98  150.6125578 152.0426864  12.7922043 169.6714836  31.8991290  11.0867836 #> 99   52.6752622  48.4030570 211.8232440  29.5857098 229.6193022 195.1919822 #> 100 142.7371732 144.6798397  22.9763373 162.9108660  37.2197516   2.8399837 #>               7           8           9          10          11          12 #> 2                                                                           #> 3                                                                           #> 4                                                                           #> 5                                                                           #> 6                                                                           #> 7                                                                           #> 8   183.5969766                                                             #> 9    11.1623920 174.6100918                                                 #> 10   12.1519004 171.4579175   6.6483642                                     #> 11    9.3535936 192.0955352  20.4378763  21.0904285                         #> 12  197.1153683  13.5264791 188.1365627 184.9777002 205.6017510             #> 13  193.1618870   9.6540159 184.2160773 181.0270979 201.6316776   4.0494229 #> 14  203.2606133  31.4424244 195.1924201 191.2982726 211.2029263  25.6773385 #> 15    8.7268376 174.8915659   5.8727462   3.4339500  17.7672475 188.4114464 #> 16   18.9433289 165.8203189   8.7902434   8.0844509  28.2611444 179.3467803 #> 17   15.8661411 167.8734778   7.9711026   3.8923580  24.9319285 181.3964292 #> 18    8.6019855 189.5009727  14.9040156  18.8563829  10.6871985 203.0274186 #> 19   17.5555288 166.8398538   7.8634603   6.4659587  26.8374860 180.3661132 #> 20    7.5741355 176.5944634   9.5168409   6.1254672  15.5259806 190.1040476 #> 21   13.1783440 171.4103632   3.5365432   4.3075116  22.5204209 184.9364841 #> 22   13.0467177 172.1469747   2.4827878   5.5460883  22.3956882 185.6734512 #> 23  192.3472502  10.0262974 183.5342041 180.2275486 200.7415478   6.6205918 #> 24    7.5360473 187.4003834  12.7949289  16.9385348  11.5941727 200.9268589 #> 25   16.9894641 167.1913269   7.6868169   5.6698515  26.2333364 180.7170990 #> 26  176.2011304  15.4884101 167.7604232 164.1432356 184.3897666  24.9706097 #> 27    5.3852441 180.0328824  11.8106951   9.6628873  12.0654684 193.5381764 #> 28   26.7953767 157.6097911  17.0019272  15.0114964  35.9909655 171.1362293 #> 29  184.2991454   1.7382577 175.2534649 172.1555738 192.8302691  12.9897591 #> 30   28.8055898 192.5789355  37.9703203  34.2951501  24.0083245 205.8976670 #> 31   14.5952754 169.6956243   5.3167656   4.1528811  23.8896523 183.2213944 #> 32   21.8571285 179.9911405  28.0840769  23.0244373  21.8477880 193.3677214 #> 33   21.4915617 162.4193493  12.4771979   9.5270952  30.5892624 175.9444907 #> 34   11.9401926 181.0122733  19.0452349  15.1981422  13.6957620 194.4761307 #> 35    3.0358703 184.6959996  13.7869725  13.6419780   7.4700465 198.2059614 #> 36  195.6232558  19.0348521 187.1832005 183.5681132 203.7966082  14.8806087 #> 37  173.6246066  32.1190006 165.9401640 161.7750595 181.3568560  39.0406028 #> 38    5.5168772 186.8809837  16.4806219  16.1668725   5.2481291 200.3849411 #> 39  180.8161649  28.1462568 172.9817595 168.9193828 188.6336867  32.8824928 #> 40  195.7549415  18.2451246 187.2694138 183.6903982 203.9552895  13.6811218 #> 41  187.6040334   6.0365409 178.7821576 175.4828318 196.0063321  10.3995328 #> 42  184.0897150   4.8859800 175.2851865 171.9704730 192.4843216  13.8036095 #> 43    4.9097859 183.7924066  14.6437604  13.4248387   8.3768902 197.2942525 #> 44    6.6875089 177.2679708   5.1398194   6.0103701  16.0137590 190.7908731 #> 45  196.3993311  13.1115872 187.5061779 184.2702264 204.8372825   2.5519828 #> 46  177.4113484   6.4817779 168.3564100 165.2668539 185.9517456  19.8578111 #> 47   19.5213693 200.8076883  30.6477808  30.8449470  10.2175818 214.2896723 #> 48   11.3663772 182.2886505  19.2049872  15.7735995  12.4423126 195.7552414 #> 49   19.9249403 177.6474466  25.2286433  19.9115942  21.2717996 191.0488341 #> 50   14.5293540 169.0742384   8.7537297   2.5695950  23.2567303 182.5915222 #> 51  176.3705753  17.7007192 168.0364461 164.3360757 184.4958620  26.3731164 #> 52   18.4941738 185.0077296  26.7237993  22.8348004  16.5398502 198.4179038 #> 53  195.8522081  12.3376041 186.9085427 183.7177757 204.3192963   1.6059609 #> 54  206.3197420  22.7239168 197.3270504 194.1812664 214.8093867   9.2080099 #> 55  191.0131152  15.7194642 182.5478306 178.9521381 199.2047473  15.1663900 #> 56   23.6244369 164.0226574  21.8824055  15.2459440  29.7471635 177.4707228 #> 57  190.0950811   7.1723577 180.9950263 177.9483341 198.6533623   7.8994210 #> 58  206.7583891  38.6232595 198.9411234 194.8720240 214.5420847  32.9725263 #> 59   14.7474981 169.3345228   5.9265819   3.7481573  23.9927466 182.8596746 #> 60  194.6005050  11.4647606 185.4926237 182.4534690 203.1608347   4.5710447 #> 61   15.9122832 167.8422222   7.9402111   3.9638239  24.9892581 181.3653589 #> 62  189.4700443   6.1574623 180.5469440 177.3373139 197.9290380   7.7800325 #> 63   18.0081632 197.5594047  29.1379654  28.5507340   9.3453063 211.0281200 #> 64   13.3063827 171.8776871   2.7447464   5.5658614  22.6567022 185.4041655 #> 65  159.4660087  24.3048793 150.3835889 147.3190700 168.0337212  37.8064734 #> 66    4.6186904 185.9558482  15.4824005  15.1507403   6.1410591 199.4616146 #> 67   12.9254358 173.0605655  13.8137080   7.9405114  19.4234504 186.5490548 #> 68   16.5543565 188.6773179  26.1704609  23.3640047  12.6294850 202.1122362 #> 69    7.1868836 179.9541940   5.3686792  10.0854417  15.8598979 193.4806540 #> 70    3.7718874 182.6733532  12.9783318  11.9383235   9.4234795 196.1802282 #> 71    3.9294820 179.8435779   9.2992837   8.5516574  12.5410299 193.3588387 #> 72   24.2391402 172.0696371  27.3071741  21.1542497  26.9491904 185.4440206 #> 73   22.0124235 162.9762562  18.0090328  11.6385963  29.4203995 176.4624179 #> 74  194.1185556  14.8675223 185.5157600 182.0315081 202.3893430  10.8264340 #> 75  187.6530909   5.2683037 178.5422161 175.5056895 196.2186935  10.2560930 #> 76   23.2205882 160.6194234  16.8885087  11.4723215  31.4769292 174.1267987 #> 77  207.9484556  24.7464794 199.1013885 195.8254826 216.3537298  11.5707860 #> 78   14.9363615 184.1610197  23.2328005  19.6430881  13.8539279 197.6012920 #> 79  167.4909043  16.1531123 158.4684632 155.3481685 176.0197822  29.6745331 #> 80   13.7143023 170.6209239   4.4868404   3.8435487  23.0250700 184.1466786 #> 81  189.5976264   7.8669230 180.7950024 177.4790811 197.9876086   8.9173179 #> 82   18.1114557 172.0673165  20.1844500  14.0513498  22.6169581 185.5117510 #> 83  196.4589094  14.9509474 187.7427878 184.3532937 204.7945617   7.4433879 #> 84  184.6622680   2.7041455 175.7671045 172.5321852 193.1082862  12.6299766 #> 85    7.8522609 176.2137718   9.2330219   5.6937028  15.9193432 189.7241112 #> 86    5.7936672 189.3888089  16.1782715  17.9359594   4.9272584 202.9075335 #> 87  200.5567809  17.0684441 191.6275156 188.4240503 209.0131431   3.7554843 #> 88  192.0317765  13.0361723 183.4107964 179.9413163 200.3146210  11.0586216 #> 89  203.4816771  20.3266341 194.6320993 191.3581172 211.8907299   7.4532235 #> 90  184.8265408   8.8506369 176.1721092 172.7296560 193.1338610  15.0064312 #> 91   22.1134437 161.4891919  14.7312552  10.0194813  30.7682712 175.0063071 #> 92  171.8339136  17.7274817 163.3898128 159.7746460 180.0283375  28.5617714 #> 93   10.7234026 182.6472272  18.8182582  15.6061397  11.7766839 196.1178988 #> 94  185.7704607  10.7540784 177.1839314 173.6854227 194.0374282  15.4194046 #> 95  195.3732226  12.5325592 186.5343720 183.2504534 203.7805891   4.3266600 #> 96  198.8018698  20.1830049 190.2972682 186.7338409 207.0115246  13.3730703 #> 97  185.5767062   4.3010534 176.7308049 173.4523617 193.9940530  12.0538232 #> 98   24.8716498 160.5234033  20.7544361  14.4814841  32.1086163 173.9994694 #> 99  222.9859893  41.8803555 214.4728335 210.9186237 231.1865958  29.5252971 #> 100  30.7187826 152.8846137  22.3936241  18.5735582  39.4360211 166.4046970 #>              13          14          15          16          17          18 #> 2                                                                           #> 3                                                                           #> 4                                                                           #> 5                                                                           #> 6                                                                           #> 7                                                                           #> 8                                                                           #> 9                                                                           #> 10                                                                          #> 11                                                                          #> 12                                                                          #> 13                                                                          #> 14   25.8462776                                                             #> 15  184.4609844 194.7073921                                                 #> 16  175.4269350 186.4908387  10.7709803                                     #> 17  177.4534944 187.9517698   7.1739758   4.7123723                         #> 18  199.1034725 209.8906358  15.6051292  23.6911271  21.9632487             #> 19  176.4391217 187.3309060   9.2365598   1.6249827   3.1555934  22.6703293 #> 20  186.1379709 195.9426343   3.8175368  14.1428653   9.9749740  15.7733216 #> 21  181.0079059 191.8239916   5.5361473   5.8030949   4.4770942  18.1155036 #> 22  181.7512981 192.7096503   6.1578264   6.3389287   5.8024955  17.3565257 #> 23    3.7704035  22.7582333 183.6611558 174.7498146 176.6865172 198.4051575 #> 24  197.0043910 207.8401084  13.7597423  21.5843459  19.9479070   2.1204103 #> 25  176.7857912 187.5733165   8.5544975   2.4661404   2.3000718  22.3589575 #> 26   21.1750461  28.7552329 167.5694078 159.0087851 160.6960043 182.5577323 #> 27  189.5673396 199.2054442   6.8624746  17.5623831  13.5424793  13.9871838 #> 28  167.2173569 178.3778042  18.2317811   8.2117690  11.1198937  31.9022248 #> 29    9.3383245  32.3832280 175.5886601 166.4632249 168.5570546 190.1493020 #> 30  201.8613220 208.5747025  32.5599528  42.2466103  37.5960185  34.3305396 #> 31  179.2900313 190.0548247   6.4093623   4.3919641   2.8654458  19.8618308 #> 32  189.3413053 196.8002287  22.2370211  30.4512716  25.7420657  29.6483074 #> 33  172.0096696 182.7558511  12.8273218   4.3288875   5.6574896  27.1680997 #> 34  190.4771746 199.1729179  13.4564616  23.2287375  18.6621391  19.9463959 #> 35  194.2401973 203.9907383  10.3690721  21.0219028  17.5035653  10.3341631 #> 36   14.0020758  12.4351909 186.9939445 178.4295847 180.1223631 201.9832125 #> 37   35.8417700  30.7731624 165.1600986 157.3204237 158.5338773 180.4970644 #> 38  196.4126518 205.9552127  12.9684574  23.6753074  20.0497784  11.1271057 #> 39   30.0837746  23.0242182 172.3147712 164.3280130 165.6363385 187.5965596 #> 40   12.8673617  13.3439783 187.1176792 178.5107330 180.2328281 202.0799654 #> 41    6.4678828  25.4455976 178.9165165 169.9975037 171.9392113 193.6539693 #> 42    9.7885505  27.3178872 175.4040486 166.5015341 168.4308594 190.1541987 #> 43  193.3199964 202.8261846  10.4106025  21.1814176  17.3162526  12.6084997 #> 44  186.8476379 197.2605431   2.8144035  12.2565065   9.3945147  12.8557517 #> 45    3.5894248  23.4299532 187.7041675 178.7184092 180.7097516 202.3879072 #> 46   16.0870221  36.7708308 168.6997704 159.5661667 161.6654106 183.2526050 #> 47  210.3002428 219.1951868  27.6477008  38.3064493  34.7317358  19.5096043 #> 48  191.7575931 200.4920781  13.7818909  23.8468300  19.3514293  19.1130012 #> 49  187.0281980 194.8157681  19.3571456  27.2036548  22.5018619  28.0857396 #> 50  178.6363387 188.8065278   5.9051056   7.4462019   2.7340536  21.4205066 #> 51   22.7114623  27.8003005 167.7583925 159.2983195 160.9169523 182.8069989 #> 52  194.3994877 202.2368460  21.1822531  30.7926766  26.1548263  25.4043995 #> 53    2.6925001  24.9702383 187.1516729 178.1194101 180.1449205 201.7958699 #> 54   13.2082426  25.9497677 197.6149526 188.5370358 190.5973744 212.2195834 #> 55   13.0605610  16.1027200 182.3788582 173.7917913 175.4995266 197.3531333 #> 56  173.4652045 182.0547290  17.3214991  18.8363527  15.1504298  31.9902846 #> 57    5.4008121  31.0789535 181.3806801 172.2051009 174.3374276 195.8946136 #> 58   33.2275190   7.3820690 198.2655885 190.2852733 191.5942864 213.5550244 #> 59  178.9247833 189.6082819   6.3507131   4.4446214   2.1288627  20.2857997 #> 60    4.8666648  29.9197101 185.8857214 176.7028381 178.8411241 200.3927658 #> 61  177.4229711 187.9352200   7.2276574   4.6035338   0.1106011  21.9746418 #> 62    3.7352643  26.8018684 180.7712498 171.7584184 173.7689247 195.4316701 #> 63  207.0313010 215.6843901  25.5247280  36.2888855  32.4381365  19.7574408 #> 64  181.4822981 192.4493518   6.3241031   6.0671055   5.6405446  17.6267570 #> 65   33.9561919  50.8864919 150.7513837 141.5933633 143.7088834 165.2807895 #> 66  195.4911667 205.0955499  11.9408649  22.6443477  19.0308937  10.9207533 #> 67  182.5643315 191.8259909   8.1096964  15.2899444  10.5783435  21.3860160 #> 68  198.1014089 206.2587607  21.1171343  31.4483790  27.0031922  22.3560216 #> 69  189.5573520 200.4281615   7.4324611  14.1462829  12.6710910   9.5473079 #> 70  192.2110035 201.8762506   8.8328549  19.5982444  15.8289382  12.0711882 #> 71  189.4002367 199.3890343   5.2488378  15.9422601  12.3938385  12.1502485 #> 72  181.4172693 188.9261379  21.5868292  27.3101993  22.8290901  32.7327224 #> 73  172.4763147 181.7835582  14.4042007  13.7809509  10.5680733  29.8617428 #> 74    9.4776713  16.8785606 185.4619259 176.7457487 178.5436234 200.3509903 #> 75    7.2878612  32.3481382 178.9378252 169.7524144 171.8919904 193.4423088 #> 76  170.1585258 180.0409248  14.7802212  10.6603399   8.9191506  30.3281505 #> 77   15.1130639  21.9909843 199.2592584 190.3150369 192.2772050 213.9781103 #> 78  193.5924405 201.8691439  17.7856317  27.6803542  23.1110655  22.0775830 #> 79   25.7937339  43.4847504 158.7814034 149.6784117 151.7533999 173.3615381 #> 80  180.2151956 190.9693707   5.6789614   5.2363810   3.5186848  18.9412364 #> 81    5.2748013  23.8827082 180.9126191 172.0112359 173.9404155 195.6642232 #> 82  181.5046625 189.9558097  14.5012305  20.5745827  15.9697278  26.7130999 #> 83    7.2571761  18.6548904 187.7858092 178.9638638 180.8368199 202.5990224 #> 84    8.5891591  28.8046257 175.9661334 166.9795334 168.9702043 190.6482605 #> 85  185.7589433 195.5927475   3.4696443  13.7173525   9.5420415  15.9615151 #> 86  198.9545799 209.0252695  14.5051351  24.4508197  21.6096257   6.2067725 #> 87    7.4195545  23.7781443 191.8579851 182.8386495 184.8550799 206.5135854 #> 88    8.9291009  18.4553374 183.3721551 174.6393535 176.4486376 198.2493532 #> 89   10.7321450  21.4025412 194.7919156 185.8457536 187.8089018 209.5088589 #> 90   11.3323697  24.0244398 176.1612367 167.3983796 169.2279022 191.0162003 #> 91  171.0509854 181.2860556  13.4443395   7.9058053   6.8451392  28.7281270 #> 92   24.6397626  32.9171708 163.2010101 154.6383091 156.3261844 178.1871977 #> 93  192.1223201 200.9300554  13.4872230  23.6894733  19.2428594  18.4105078 #> 94   12.0265896  22.1618334 177.1155600 168.4159861 170.2010979 192.0149139 #> 95    3.7658111  22.2504666 186.6842157 177.7486917 179.7032689 201.4091392 #> 96   13.4887684  12.4070100 190.1616517 181.5363232 183.2715188 205.1124577 #> 97    8.0187133  27.1918367 176.8861839 167.9451167 169.9026083 191.6057548 #> 98  170.0072416 179.1294876  17.2987083  15.8514982  13.1154553  32.7590142 #> 99   32.5959841  23.1308575 214.3464111 205.7093661 207.4554089 229.2924311 #> 100 162.4550777 172.9250879  22.0070215  14.0083619  15.0483386  36.9658113 #>              19          20          21          22          23          24 #> 2                                                                           #> 3                                                                           #> 4                                                                           #> 5                                                                           #> 6                                                                           #> 7                                                                           #> 8                                                                           #> 9                                                                           #> 10                                                                          #> 11                                                                          #> 12                                                                          #> 13                                                                          #> 14                                                                          #> 15                                                                          #> 16                                                                          #> 17                                                                          #> 18                                                                          #> 19                                                                          #> 20   12.5426389                                                             #> 21    4.5788512   9.2888229                                                 #> 22    5.3818586   9.9746174   1.3966256                                     #> 23  175.7349416 185.2696070 180.2964401 181.0638733                         #> 24   20.5808338  14.2544076  16.0364331  15.2534204 196.3120676             #> 25    0.8606870  11.7733587   4.2509345   5.2367881 176.0649872  20.2844771 #> 26  159.9168504 168.9975352 164.4483088 165.2800611  18.5516890 180.4846825 #> 27   15.9877985   3.6103845  12.3679390  12.8150074 188.6762359  12.8433544 #> 28    9.3321880  21.0440683  13.9005376  14.5468362 166.5462859  29.7960618 #> 29  167.4949556 177.3222512 172.0678831 172.7933529  10.3650107 188.0463175 #> 30   40.6275174  28.7468526  38.0068097  38.7167288 200.5411055  34.6814572 #> 31    2.9638346   9.9255530   1.7933657   2.9871032 178.5683300  17.7922435 #> 32   28.8884408  18.6015420  27.1753540  28.1671864 188.1178393  29.1636435 #> 33    4.6473170  15.5137689   9.0682529  10.0047885 171.2765562  25.0981398 #> 34   21.6039112   9.6394769  18.8661790  19.6109837 189.4408113  19.3187280 #> 35   19.5447253   8.1024211  15.3881572  15.4500314 193.3714044   9.7657082 #> 36  179.3407504 188.4128564 183.8732540 184.7030738  10.5722893 199.9096708 #> 37  158.0807469 166.2274205 162.5192532 163.4614511  32.4511807 178.4743514 #> 38   22.1811680  10.3861865  18.0727933  18.1515028 195.5132292  11.0534826 #> 39  165.1188177 173.4486127 169.5796339 170.5006763  26.4665775 185.5627308 #> 40  179.4308848 188.5590824 183.9675730 184.7900786   9.5040920 200.0038201 #> 41  170.9838331 180.5316311 175.5457463 176.3120417   4.7544654 191.5605803 #> 42  167.4838891 177.0118694 172.0446329 172.8143361   8.2578684 188.0617181 #> 43   19.6378970   7.4504978  15.7646528  16.0237960 192.4119120  12.0187534 #> 44   10.8745709   5.0004380   6.5102704   6.5313378 186.0770260  10.9724219 #> 45  179.7202272 189.3523273 184.2864080 185.0391491   4.5943052 200.2910522 #> 46  160.5990347 170.4417059 165.1722108 165.8965512  16.4084860 181.1494227 #> 47   36.8372045  24.9496671  32.6232242  32.5637282 209.3126137  20.9578757 #> 48   22.2230465   9.9816581  19.2683101  19.9330783 190.7284485  18.6011261 #> 49   25.6543761  15.8487175  24.1192742  25.1625875 185.8510832  27.3945583 #> 50    5.8816070   7.8759045   5.7340696   7.1229918 177.8179628  19.5077288 #> 51  160.1853034 169.1339176 164.7061675 165.5547240  19.8291912 180.7402440 #> 52   29.1721859  17.3648375  26.5848809  27.3375796 193.2373086  25.2636272 #> 53  179.1314443 188.8263902 183.7001724 184.4437377   5.0235715 199.6968208 #> 54  189.5600706 199.3112027 194.1311718 194.8648623  14.8249914 210.1182653 #> 55  174.7072375 183.8122088 179.2418490 180.0680702   9.2923245 195.2782582 #> 56   17.7760127  16.2180644  19.0107663  20.4007203 172.3937057  30.4468991 #> 57  173.2486650 183.1404830 177.8235347 178.5380913   8.3955072 193.7894144 #> 58  191.0781125 199.3810230 195.5393631 196.4599690  30.1257571 211.5218505 #> 59    2.8859129   9.7118487   2.3938974   3.6806099 178.1894585  18.2323723 #> 60  177.7484427 187.6477221 182.3235955 183.0362820   8.6331470 198.2871839 #> 61    3.0451707  10.0552102   4.4371231   5.7534772 176.6582170  19.9558590 #> 62  172.7655618 182.4380047 177.3331583 178.0810348   4.2143306 193.3336542 #> 63   34.7608632  22.4972131  30.7544255  30.8526927 206.0038632  20.8731416 #> 64    5.1254421  10.1373430   1.3221884   0.2741319 180.7960093  15.5228651 #> 65  142.6296289 152.5183561 147.2035177 147.9244883  33.7329014 163.1770353 #> 66   21.1509714   9.4135257  17.0438485  17.1309783 194.6005697  10.6566931 #> 67   13.7092336   5.7535870  12.2136291  13.3503729 181.6069733  19.9554899 #> 68   29.8283657  17.4053714  26.6518026  27.1902546 196.9907653  22.5409830 #> 69   13.1343099   9.5440714   8.6045923   7.8096004 188.8636569   7.4484107 #> 70   18.0693430   6.1199063  14.1320868  14.3676004 191.3268027  11.2269648 #> 71   14.4446209   3.6745317  10.4009070  10.6188805 188.5643995  10.7273773 #> 72   25.9151918  18.6783134  25.4560847  26.6877161 180.1926328  31.7698104 #> 73   12.8659909  14.4511254  14.8037970  16.1952553 171.5144002  28.1069333 #> 74  177.6889229 186.9626380 182.2355399 183.0389454   5.9875751 198.2684360 #> 75  170.7979810 180.7045182 175.3731579 176.0858209   9.6132799 191.3367596 #> 76   10.2043700  15.9857980  13.3903710  14.6825403 169.2842622  28.4058791 #> 77  191.3087329 200.8790051 195.8726003 196.6327261  15.6169840 211.8830949 #> 78   26.0554770  13.9748553  23.2480469  23.9417168 192.4954611  21.8293564 #> 79  150.7032698 160.5116017 155.2750080 156.0065434  25.5552985 171.2599164 #> 80    3.8677553   9.3060666   0.9598444   2.3076246 179.4927834  16.8743749 #> 81  172.9939175 182.5169192 177.5546974 178.3242199   2.7594756 193.5716931 #> 82   19.1055634  11.8081276  18.3581253  19.5729497 180.4214534  25.5220010 #> 83  179.9299816 189.3428945 184.4852176 185.2692115   4.9403985 200.5105473 #> 84  167.9804040 177.6205614 172.5464422 173.2998465   8.0406884 188.5515930 #> 85   12.1155288   0.4329343   8.9031571   9.6172515 184.8947917  14.4040291 #> 86   23.1356172  13.1586222  18.6482699  18.3263655 198.1409168   6.7594736 #> 87  183.8482347 193.5232512 188.4163427 189.1621764   8.7924081 204.4150557 #> 88  175.5858656 184.8829132 180.1338496 180.9344068   5.1782240 196.1658848 #> 89  186.8395031 196.4146483 191.4034235 192.1634392  11.1659415 207.4138202 #> 90  168.3505577 177.6921271 172.9008590 173.6964745   8.5469429 188.9311661 #> 91    7.5917567  15.2670423  11.1953649  12.4059997 170.2340979  26.7402531 #> 92  155.5462137 164.6331106 160.0777088 160.9094415  22.3376529 176.1140871 #> 93   22.0683396   9.7137012  18.9992199  19.6223454 191.1047702  17.9178592 #> 94  169.3547138 178.6117755 173.8996562 174.7065753   8.8071230 189.9334471 #> 95  178.7393920 188.3046780 183.3025131 184.0650998   3.0972516 199.3147731 #> 96  182.4606710 191.6113091 186.9991991 187.8183379  10.6679919 203.0351645 #> 97  168.9360668 178.5146399 173.4993610 174.2615613   6.8458980 189.5112991 #> 98   15.1245035  17.3013724  17.4666271  18.8464465 169.0134774  31.0062979 #> 99  206.6383326 215.7917775 211.1785408 211.9943708  31.9821564 227.2141459 #> 100  14.5671440  23.9315549  18.9463683  19.9258491 161.6649864  34.9206842 #>              25          26          27          28          29          30 #> 2                                                                           #> 3                                                                           #> 4                                                                           #> 5                                                                           #> 6                                                                           #> 7                                                                           #> 8                                                                           #> 9                                                                           #> 10                                                                          #> 11                                                                          #> 12                                                                          #> 13                                                                          #> 14                                                                          #> 15                                                                          #> 16                                                                          #> 17                                                                          #> 18                                                                          #> 19                                                                          #> 20                                                                          #> 21                                                                          #> 22                                                                          #> 23                                                                          #> 24                                                                          #> 25                                                                          #> 26  160.2006293                                                             #> 27   15.2494387 172.3407484                                                 #> 28    9.8180190 150.8425821  24.6369312                                     #> 29  167.8539642  17.2147095 180.7702498 158.2516817                         #> 30   39.7805453 183.2240967  26.1792167  47.4179767 193.5037540             #> 31    2.5042979 162.6960071  13.2471081  12.2772185 170.3581625  38.4129736 #> 32   28.0279561 171.0118533  17.3558927  34.6300028 180.8763479  13.5561420 #> 33    4.8174655 155.3896380  19.1130066   5.5414060 163.0886344  42.1740247 #> 34   20.7709237 172.7509096   7.5995191  29.0911044 181.8145240  19.1443009 #> 35   18.9006560 177.0845999   4.8269353  28.5970679 185.4224343  25.7938457 #> 36  179.6257989  19.4263968 191.7505198 170.2607058  19.9484046 202.3736152 #> 37  158.2772904  16.9011857 169.4204158 149.2971059  33.8571513 178.0352936 #> 38   21.5198021 179.1460068   6.8554213  31.1640385 187.6208116  23.7759466 #> 39  165.3328942  14.6972175 176.6703007 156.2675470  29.8391380 185.6218384 #> 40  179.7213424  19.5672553 191.9053044 170.3362863  19.0900564 202.6713529 #> 41  171.3147466  14.7369332 183.9409135 161.7936761   6.9646968 195.8922544 #> 42  167.8124698  11.8680578 180.4189786 158.2989298   6.4658233 192.3580740 #> 43   18.9309619 176.0278777   3.8476702  28.4300934 184.5366985  24.0341197 #> 44   10.3307885 170.0578680   6.7026699  20.1481985 177.9513328  32.8818138 #> 45  180.0604204  23.1459343 192.7719960 170.5106800  12.9031696 204.8541842 #> 46  160.9589533  15.3211039 173.8928188 151.3545796   6.8981319 186.7458588 #> 47   36.1913796 192.7116816  21.3451922  45.8484389 201.5846098  20.8935380 #> 48   21.4032465 174.0536705   7.5062182  29.9471659 183.0874262  18.7932947 #> 49   24.7948995 168.8474836  15.0538782  31.2891578 178.5127890  16.6918334 #> 50    5.0219350 161.6890539  11.4858877  13.2654982 169.7809419  34.9138882 #> 51  160.4564400   2.4994572 172.4568444 151.1469925  19.4367122 183.0042528 #> 52   28.3270056 176.2571921  15.0573726  36.1807506 185.8649157  11.4609659 #> 53  179.4779505  23.3771247 192.2548256 169.9098431  11.9535733 204.5110355 #> 54  189.9131315  33.2991342 202.7458950 180.3260744  22.1036940 215.0547644 #> 55  174.9949915  14.8150796 187.1558276 165.6203514  16.8983021 197.9156126 #> 56   17.0882422 155.6481952  18.5074845  19.5063142 164.8444186  31.1082751 #> 57  173.6148724  21.8155389 186.5961176 163.9933565   5.9682591 199.4430544 #> 58  191.2926079  34.4286554 202.5913035 182.2205225  39.6278727 211.1518860 #> 59    2.2427923 162.2809510  13.1179864  12.0537967 170.0033577  38.0423009 #> 60  178.1158063  25.1604364 191.1037239 168.4911423  10.4230812 203.9260548 #> 61    2.1894960 160.6737179  13.6189227  11.0516518 168.5247922  37.6999864 #> 62  173.1092183  17.8994223 185.8643199 163.5497009   6.2264855 198.1263304 #> 63   34.0634165 189.3131441  18.9008125  43.5376095 198.3545891  17.4857654 #> 64    4.9996602 165.0159102  13.0171420  14.2759792 172.5235966  38.8834773 #> 65  142.9922795  22.8263847 155.9786499 133.3816734  24.8740434 169.1865491 #> 66   20.4910217 178.2568396   5.9244095  30.1427804 186.6918741  24.4029878 #> 67   12.8486699 165.1187844   7.7990502  20.3704627 173.8291571  27.1828378 #> 68   29.0195685 180.1203740  14.3962632  37.6174566 189.5110181  12.2642865 #> 69   12.8555259 173.0465481  10.1310320  22.3562020 180.6020097  35.7258253 #> 70   17.3782579 175.0043505   2.6714348  26.9488006 183.4071064  25.5610199 #> 71   13.7880094 172.3699303   2.8501873  23.4780294 180.5560332  28.8617550 #> 72   25.0918185 163.0939567  18.9649876  29.8063782 172.9571866  21.0339270 #> 73   12.2566792 155.0332212  17.4801372  14.3303908 163.7492118  34.6001134 #> 74  177.9933462  18.2963730 190.3310723 168.5587457  15.6286192 201.4920099 #> 75  171.1655010  20.5379008 184.1624116 161.5407127   3.7880793 197.0746130 #> 76    9.8425602 153.0281786  19.4188595   9.6918521 161.3533877  38.8994868 #> 77  191.6436536  33.3367599 204.2883220 182.1090692  24.4244438 216.0941442 #> 78   25.2228806 175.6615454  11.5053556  33.4604251 184.9895632  14.7754091 #> 79  151.0585518  16.6617951 163.9599504 141.4673919  16.8106498 176.8448868 #> 80    3.4296590 163.6165313  12.5402237  13.1931199 171.2836024  37.9208591 #> 81  173.3225399  16.0544933 185.9223574 163.8084672   8.5518789 197.7861431 #> 82   18.2620965 163.6359308  12.7263301  24.0801016 172.8923548  23.8699355 #> 83  180.2482957  21.3096331 192.7313761 170.7667263  15.2972431 204.2314721 #> 84  168.3203325  14.0483402 181.0432190 158.7720851   4.1009979 193.2721827 #> 85   11.3441933 168.6341278   4.0368744  20.6124135 176.9397332  29.1164500 #> 86   22.6188267 181.9877546  10.2737703  32.4366523 190.0895266  28.1282109 #> 87  184.1931130  27.3037118 196.9482666 174.6294518  16.6489208 209.1047284 #> 88  175.8923709  16.3738065 188.2551920 166.4507680  13.9279171 199.4998555 #> 89  187.1745597  29.1246562 199.8252864 177.6398046  20.0686248 211.6857780 #> 90  168.6607115  10.0050534 181.0723250 159.2072938  10.3898591 192.5155715 #> 91    7.3378788 154.1251743  18.8334385   7.6461335 162.1969047  39.9935583 #> 92  155.8300504   4.3706367 167.9783473 146.4723888  19.3691038 178.9380423 #> 93   21.2573949 174.4568095   7.0538653  29.9339385 183.4407618  19.1528045 #> 94  169.6566809  10.1463347 181.9793420 160.2314195  12.2397847 193.1924480 #> 95  179.0727763  21.5497144 191.7151459 169.5435852  12.5647583 203.6295662 #> 96  182.7535791  22.6304358 194.9603737 173.3593256  20.8297760 205.7514255 #> 97  169.2698726  13.6661973 181.9285901 159.7400346   5.5726119 193.9840542 #> 98   14.5986165 152.4591615  20.2484283  14.9918984 161.3112807  35.8708420 #> 99  206.9334746  46.7968317 219.1373001 197.5292455  41.8678196 229.7052591 #> 100  14.7121471 145.6476792  27.4876050   7.1591608 153.5822102  47.2426545 #>              31          32          33          34          35          36 #> 2                                                                           #> 3                                                                           #> 4                                                                           #> 5                                                                           #> 6                                                                           #> 7                                                                           #> 8                                                                           #> 9                                                                           #> 10                                                                          #> 11                                                                          #> 12                                                                          #> 13                                                                          #> 14                                                                          #> 15                                                                          #> 16                                                                          #> 17                                                                          #> 18                                                                          #> 19                                                                          #> 20                                                                          #> 21                                                                          #> 22                                                                          #> 23                                                                          #> 24                                                                          #> 25                                                                          #> 26                                                                          #> 27                                                                          #> 28                                                                          #> 29                                                                          #> 30                                                                          #> 31                                                                          #> 32   27.1470575                                                             #> 33    7.3064993  29.6584337                                                 #> 34   19.2881092   9.9253523  23.6375642                                     #> 35   16.6304202  19.4033814  23.1591936   9.6165634                         #> 36  182.1214300 190.2563868 174.8151153 192.1102945 196.4979972             #> 37  160.7369454 166.4203249 153.4671841 169.0933785 174.2279670  27.9222468 #> 38   19.2836086  18.6833188  25.6938730   9.4138496   2.7029381 198.5519168 #> 39  167.8017387 173.9262965 160.5182265 176.4650527 181.4699274  20.5783005 #> 40  182.2182960 190.5181948 174.9124939 192.3120148 196.6473424   1.2007612 #> 41  173.8181674 183.4428096 166.5269598 184.7266285 188.6336236  13.0195345 #> 42  170.3156910 179.9066358 163.0231592 181.1945645 185.1136929  15.1083017 #> 43   16.8141510  17.1449632  22.9192775   7.3403469   2.2762338 195.4324446 #> 44    7.9118522  23.4760286  14.9308229  14.1041229   8.9247588 189.4838581 #> 45  182.5644376 192.3859997 175.2791867 193.6156555 197.4547405  12.3643413 #> 46  163.4631218 174.0840271 156.1945995 174.9658449 178.5413355  24.5757675 #> 47   33.9170231  24.7745420  40.3694890  20.0281950  17.2927945 212.0835488 #> 48   19.8028648  10.5636048  24.4593170   1.3389698   8.8398353 193.4157058 #> 49   24.0039288   3.3409012  26.3301505   8.1484101  17.7516985 188.1279204 #> 50    4.7297966  23.0088771   7.7259085  16.0658056  15.7866927 181.1126724 #> 51  162.9482723 170.8761444 155.6421137 172.7570935 177.2129501  19.3802512 #> 52   26.9564401   6.0529444  30.8506808   7.7267423  15.6607036 195.5424206 #> 53  181.9821865 192.0027488 174.7016583 193.1560964 196.9286575  13.7726807 #> 54  192.4174278 202.5464836 185.1421623 203.6799894 207.4130566  18.7543768 #> 55  177.4913123 185.7572904 170.1852202 187.5526336 191.8995194   4.6696612 #> 56   17.8416069  17.5528222  15.9778028  17.1209957  23.2294839 175.0008213 #> 57  176.1187650 186.7984972 168.8562406 187.6884564 191.2390758  18.9677654 #> 58  193.7614476 199.6104575 186.4779024 202.3082042 207.3945088  19.7171537 #> 59    0.7561348  26.6346026   6.9151862  18.9445097  16.6722579 181.7069579 #> 60  180.6196324 191.2919650 173.3582224 192.1946191 195.7462071  18.5382735 #> 61    2.8043540  25.8516380   5.6003558  18.7615262  17.5644897 180.1000972 #> 62  175.6133773 185.6088732 168.3307475 186.7574962 190.5403540  14.4555282 #> 63   31.9061389  20.7872140  38.0107831  16.5664570  15.4028492 208.6687044 #> 64    2.8012269  28.2731933   9.7547984  19.7686340  15.6960896 184.4387695 #> 65  145.4963347 156.4255809 138.2309279 157.1379083 160.6159605  39.8459773 #> 66   18.2526243  18.7440125  24.6777460   9.2263985   1.6955344 197.6651583 #> 67   11.9951889  15.1977767  15.0155405   8.8500736  12.5721610 184.5127468 #> 68   27.3208404  10.7078661  32.1350370   8.5684592  13.5346928 199.4360708 #> 69   10.3755701  27.4629763  17.6727840  17.7191649  10.1859650 192.4710096 #> 70   15.2197349  18.0876620  21.4591109   8.1684520   2.1921315 194.4149822 #> 71   11.5517611  20.1869709  18.0512266  10.4485109   5.1202516 191.7899127 #> 72   24.9085429   7.9252224  25.4884312  13.3382326  22.5230030 182.3444510 #> 73   13.3999515  21.2275388  10.7064521  18.3419018  22.3013468 174.4299476 #> 74  180.4932244 189.2386995 173.1902910 190.8648491 195.0577002   4.5848008 #> 75  173.6693133 184.4132936 166.4082070 185.2731164 188.8025715  20.0370326 #> 76   11.6981087  25.6750991   6.8164896  21.7550929  24.0871571 172.4462127 #> 77  194.1473608 203.7033807 186.8584233 205.0563947 208.9810246  16.6264088 #> 78   23.7197631   7.9942221  28.0356960   4.4520073  12.1496907 194.9879437 #> 79  153.5628248 164.1623099 146.2902095 165.0249178 168.6117916  32.0538544 #> 80    0.9254998  26.8553675   8.2270447  18.7790644  15.8006258 183.0420587 #> 81  175.8257589 185.3595310 168.5331908 186.6820918 190.6186092  11.4574076 #> 82   17.8868319  10.6049793  19.2666873   9.3110876  16.9270828 182.9773957 #> 83  182.7503561 191.8993154 175.4524869 193.3810275 197.4423556   7.4443474 #> 84  170.8243432 180.7558491 163.5390597 181.9172266 185.7229787  16.4254449 #> 85    9.5110049  18.8591003  15.0828644   9.9942550   8.4827184 188.0503002 #> 86   20.1735811  23.9591334  27.2060468  14.6214861   5.5808392 201.4092256 #> 87  186.6973064 196.6245344 179.4154537 197.8230386 201.6256292  14.3145522 #> 88  178.3926271 187.2232979 171.0903236 188.8131890 192.9789444   6.0206083 #> 89  189.6782789 199.2771418 182.3894737 200.6052966 204.5167474  13.6687304 #> 90  171.1615978 180.1810686 163.8605478 181.6837809 185.7899455  12.2366926 #> 91    9.4329905  27.0433690   4.0123306  22.1374390  23.3064079 173.5498106 #> 92  158.3254617 166.6995426 151.0191008 168.4047786 172.7208657  23.7965197 #> 93   19.5928520  11.2533671  24.4277002   1.9278625   8.1530536 193.8238115 #> 94  172.1561183 180.9146277 164.8525572 182.5162204 186.7065678  10.6233382 #> 95  181.5763834 191.1986669 174.2866018 192.5010602 196.4067580  10.7995867 #> 96  185.2510887 193.5961408 177.9456202 195.3801116 199.7005630   3.5831351 #> 97  171.7735182 181.5080978 164.4841160 182.7457928 186.6168941  14.8197497 #> 98   15.9773443  22.3472934  12.3005018  20.5577469  25.0751983 171.8465298 #> 99  209.4314241 217.6361025 202.1262653 219.5181649 223.8799307  27.4079430 #> 100  17.1622124  33.8608854   9.9231705  30.2979969  31.9731606 165.0740335 #>              37          38          39          40          41          42 #> 2                                                                           #> 3                                                                           #> 4                                                                           #> 5                                                                           #> 6                                                                           #> 7                                                                           #> 8                                                                           #> 9                                                                           #> 10                                                                          #> 11                                                                          #> 12                                                                          #> 13                                                                          #> 14                                                                          #> 15                                                                          #> 16                                                                          #> 17                                                                          #> 18                                                                          #> 19                                                                          #> 20                                                                          #> 21                                                                          #> 22                                                                          #> 23                                                                          #> 24                                                                          #> 25                                                                          #> 26                                                                          #> 27                                                                          #> 28                                                                          #> 29                                                                          #> 30                                                                          #> 31                                                                          #> 32                                                                          #> 33                                                                          #> 34                                                                          #> 35                                                                          #> 36                                                                          #> 37                                                                          #> 38  176.1156800                                                             #> 39    7.8203682 183.3889099                                                 #> 40   28.7326098 198.7118131  21.4852622                                     #> 41   29.9491606 190.7790341  24.7906278  12.2105340                         #> 42   27.8973051 187.2562685  23.4632938  14.4955364   3.5362266             #> 43  172.9845961   3.1311021 180.2580611 195.5940259 187.6787236 184.1552514 #> 44  167.7672577  11.6240034 174.9016451 189.5992180 181.3301152 177.8210772 #> 45   36.7439877 199.6139717  30.4555245  11.1673726   8.9792256  12.5034719 #> 46   32.1131684 180.7441197  29.6449198  23.9325219  12.0331460   9.4724945 #> 47  189.1206990  14.6854666 196.4930015 212.2762308 204.5908859 201.0613990 #> 48  170.4198279   8.3514755 177.7885964 193.6155729 186.0130597 182.4813494 #> 49  164.5133083  17.4690839 171.9828737 188.3738055 181.1649843 177.6288729 #> 50  159.2553393  18.2101508 166.4098654 181.2399689 173.0748484 169.5604109 #> 51   14.5010349 179.2496560  12.2696705  19.6723892  16.3733483  13.7833052 #> 52  171.9289587  14.2821307 179.4018065 195.7861961 188.5480774 185.0121134 #> 53   37.4618066 199.0998157  31.3595094  12.5822461   8.8560105  12.2997720 #> 54   45.8500457 209.5927711  38.9693747  17.6871621  19.2619844  22.7688517 #> 55   24.8064449 193.9609170  18.0015417   4.7618220  10.0062214  11.2936344 #> 56  151.9988431  24.6242913 159.3574582 175.2069483 167.6853253 164.1518012 #> 57   37.7863640 193.4482989  32.8410657  17.8937845   8.0573168   9.9920269 #> 58   33.2171145 209.2990107  25.9597293  20.6746717  32.6694592  34.3472981 #> 59  160.2585326  19.3013334 167.3353533 181.8079919 173.4400809 169.9357744 #> 60   40.4199637 197.9559605  34.8608627  17.3655432  10.5541169  13.3480690 #> 61  158.5230762  20.1150627 165.6233147 180.2098437 171.9107521 168.4026793 #> 62   33.2429807 192.7086634  27.9936403  13.4673943   3.2958491   6.2025876 #> 63  185.5509033  12.7012639 192.9479179 208.8731859 201.2885434 197.7568279 #> 64  163.2061722  18.3968493 170.2434091 184.5253080 176.0441264 172.5465955 #> 65   34.3220565 162.8317983  35.9905010  39.5288432  29.0300514  25.7220453 #> 66  175.2793660   1.0310295 182.5429991 197.8219115 189.8652998 186.3433276 #> 67  161.9417243  14.1973865 169.2303850 184.6860397 176.8801289 173.3529179 #> 68  176.0183288  11.5454241 183.4610767 199.6644655 192.2907092 188.7557666 #> 69  171.1074622  12.6944916 178.1766305 192.5629729 184.1121723 180.6133207 #> 70  172.0913101   4.2708687 179.3417209 194.5685269 186.5907241 183.0693782 #> 71  169.7270439   7.7366009 176.9279295 191.9269910 183.8231133 180.3065755 #> 72  158.5747061  22.7189602 166.0664129 182.6035306 175.5176174 171.9814460 #> 73  151.9528297  24.1735726 159.2172351 174.6004206 166.7879453 163.2605284 #> 74   29.4895906 197.1500296  22.7010389   3.5438668   8.8409692  11.4480788 #> 75   36.8943631 191.0150306  32.3718612  19.0326766   7.9625784   9.0146493 #> 76  150.4212294  26.2727214 157.6001343 172.5876158 164.5466015 161.0265596 #> 77   44.4381374 211.1262383  37.1995534  15.7271165  20.3474892  23.8709613 #> 78  171.6691780  10.9641480 179.0934532 195.2103429 187.7925594 184.2580341 #> 79   30.9685970 170.8106881  30.9824733  31.6597039  20.8667631  17.6082873 #> 80  161.6426308  18.4654785 168.7111110 183.1395263 174.7426707 171.2400694 #> 81   30.5951959 192.7588947  25.0180498  10.5554970   2.0692957   5.5100715 #> 82  159.8349555  17.7633656 167.2229539 183.1907269 175.7155336 172.1815230 #> 83   33.2659349 199.5603251  26.5278936   6.2437116   9.3606500  12.6404355 #> 84   30.2936246 187.8863621  25.9167459  15.6772447   3.5659845   2.4541793 #> 85  165.8892203  10.7934482 173.1056734 188.1950358 180.1563507 176.6370044 #> 86  179.3588980   5.2826580 186.5636768 201.5426012 193.3976964 189.8833800 #> 87   40.3507984 203.7920823  33.7468978  13.1427975  13.2467161  16.7666667 #> 88   28.3668656 195.0762016  21.8911495   5.2147567   7.0072158   9.3755002 #> 89   40.9706578 206.6637738  33.9778778  12.6142697  15.8852565  19.4126704 #> 90   24.8061438 187.8974733  19.8315027  11.8574744   5.1448352   3.9688551 #> 91  151.7954381  25.6531938 158.9239289 173.6733478 165.4907109 161.9766142 #> 92   16.7626584 174.7849257  16.5957078  23.9269870  18.1777788  14.9604420 #> 93  170.8776118   7.6369653 178.2380359 194.0200809 186.3874422 182.8563412 #> 94   23.8234417 188.7980080  18.4199963  10.3724811   6.3754443   5.9019587 #> 95   34.9346834 198.5536495  28.6260650   9.6155541   7.7759020  11.3065241 #> 96   31.4768043 201.7684730  24.0690731   3.0801620  14.1929661  16.8596270 #> 97   29.5222037 188.7685531  24.8399846  14.0851017   2.1381151   1.8283478 #> 98  149.2486898  26.8701572 156.5330362 172.0260897 164.2917189 160.7622008 #> 99   53.1994662 225.9428263  45.3815771  27.2326986  36.6119124  39.8999756 #> 100 143.5749905  34.3168186 150.6457889 165.1849743 156.9191762 153.4084172 #>              43          44          45          46          47          48 #> 2                                                                           #> 3                                                                           #> 4                                                                           #> 5                                                                           #> 6                                                                           #> 7                                                                           #> 8                                                                           #> 9                                                                           #> 10                                                                          #> 11                                                                          #> 12                                                                          #> 13                                                                          #> 14                                                                          #> 15                                                                          #> 16                                                                          #> 17                                                                          #> 18                                                                          #> 19                                                                          #> 20                                                                          #> 21                                                                          #> 22                                                                          #> 23                                                                          #> 24                                                                          #> 25                                                                          #> 26                                                                          #> 27                                                                          #> 28                                                                          #> 29                                                                          #> 30                                                                          #> 31                                                                          #> 32                                                                          #> 33                                                                          #> 34                                                                          #> 35                                                                          #> 36                                                                          #> 37                                                                          #> 38                                                                          #> 39                                                                          #> 40                                                                          #> 41                                                                          #> 42                                                                          #> 43                                                                          #> 44    9.5557259                                                             #> 45  196.5173706 190.1028902                                                 #> 46  177.6616594 171.0595574  19.5818288                                     #> 47   17.4993901  26.1162046 213.4623848 194.7227176                         #> 48    6.5838044  14.1653738 194.8995557 176.2368389  18.7047537             #> 49   15.4774491  20.8104019 190.0969152 171.7050037  25.5680613   9.1177304 #> 50   15.3248506   8.5677400 181.8715262 162.8944584  32.8219225  16.8151102 #> 51  176.1278321 170.2659745  24.4024062  17.8105475 192.7384842 174.0641768 #> 52   13.5843881  21.7115022 197.4761785 179.0508019  18.7217499   7.5522488 #> 53  196.0067308 189.5390283   1.5513693  18.7515926 212.9827129 194.4370577 #> 54  206.5021965 199.9918705  10.2983407  28.9980155 223.4964941 204.9596290 #> 55  190.8426616 184.8638464  12.6530373  20.6960496 207.5182155 188.8564421 #> 56   21.5590786  20.0389622 176.5859733 158.0076088  37.1407239  18.4375769 #> 57  190.3679174 183.7308073   8.7171246  12.7241689 207.4399814 188.9589542 #> 58  206.1679397 200.8560413  30.7682690  43.7383492 222.3358484 203.6342503 #> 59   16.7532161   8.0954396 182.1937934 163.1091997  33.9648370  19.5025654 #> 60  194.8756998 188.2343395   6.4976793  17.2289596 211.9476124 193.4653847 #> 61   17.3886436   9.4266343 180.6801254 161.6329579  34.7980172  19.4477110 #> 62  189.6148068 183.1627303   6.9958323  12.6390137 206.5858298 188.0386259 #> 63   15.1363854  24.3249025 210.1747055 191.5017109   4.0023516  15.2754837 #> 64   16.2507032   6.7740466 184.7705722 165.6267563  32.8214037  20.1050445 #> 65  159.7544458 153.1024611  37.3614552  17.9759121 176.8534586 158.4030168 #> 66    2.3686466  10.6015675 198.6963094 179.8138830  15.7094648   8.2656756 #> 67   11.0731484  10.3472766 185.7391463 166.9641390  27.7695177   9.8706616 #> 68   11.8475937  21.0327106 201.2041646 182.6807463  14.0765810   7.6765518 #> 69   11.7016800   4.7761024 192.8431585 173.7053022  26.0409481  17.5032291 #> 70    1.6663036   7.8903933 195.4187880 176.5284031  18.9114695   7.6292701 #> 71    5.4058222   4.1710664 192.6286176 173.6709224  22.4039236  10.3104679 #> 72   20.3148689  23.6182458 184.4609785 166.1672208  31.7045783  14.5273572 #> 73   21.0435312  17.2185903 175.6485268 156.8864325  37.8365853  19.5384658 #> 74  194.0373264 187.9209776   8.2748971  20.7563534 210.8008454 192.1630771 #> 75  187.9358668 181.2850867  10.8017857  10.3299100 205.0164196 186.5424794 #> 76   23.2059311  17.4757197 173.3694998 154.4751733  40.5122496  22.8413301 #> 77  208.0256425 201.6689084  11.6516319  31.1985367 224.9295837 206.3443928 #> 78   10.0297173  18.1847256 196.7017504 178.1561727  17.8294748   4.0281183 #> 79  167.7270594 161.1478343  29.1808184   9.9410050 184.7827325 166.2958449 #> 80   16.0491331   7.0270045 183.4893694 164.3885740  33.0767729  19.2449485 #> 81  189.6572089 183.3305033   7.2077719  14.0381862 206.5549283 187.9698598 #> 82   14.9209302  16.6472777 184.6201550 166.0572293  29.2984822  10.6493826 #> 83  196.4530944 190.2223083   4.9561649  21.2834022 213.2874141 194.6742012 #> 84  184.7911164 178.3634502  11.7401302   8.4740580 201.7513760 183.1991384 #> 85    7.8727197   4.8587297 188.9750934 170.0586193  25.3708328  10.3654580 #> 86    7.5908934  12.2930983 202.1926789 183.2013207  14.8599978  13.6113269 #> 87  200.6975299 194.2489540   4.2691229  23.4740945 217.6597951 199.1055218 #> 88  191.9645113 185.8274904   8.5806675  18.7573283 208.7429581 190.1102995 #> 89  203.5637094 197.2007178   7.2155277  26.7934493 220.4740474 201.8925749 #> 90  184.7880256 178.6093909  13.1410355  12.9022625 201.5986455 182.9782705 #> 91   22.6770394  15.9783516 174.2863834 155.3107968  40.1476581  23.1180836 #> 92  171.6672757 165.6885020  26.9076323  15.9185442 188.3614637 169.7067070 #> 93    5.9069547  13.7453513 195.2697691 176.5874165  18.2683473   0.7151254 #> 94  185.6852074 179.5771944  13.3311404  14.8720751 202.4502012 183.8140295 #> 95  195.4536406 189.0947584   1.8294931  19.0059812 212.3666199 193.7877729 #> 96  198.6512395 192.6398159  11.0477821  26.1609730 215.3420725 196.6832362 #> 97  185.6699650 179.2944152  10.8787113   9.9584032 202.5994177 184.0305947 #> 98   23.7395986  20.1130489 173.1646790 154.4557440  40.2991983  21.8044139 #> 99  222.8246017 216.8242854  29.0065703  48.3416710 239.4903251 220.8234561 #> 100  31.3265587  24.4209323 165.7010563 146.6937322  48.7726231  31.3693141 #>              49          50          51          52          53          54 #> 2                                                                           #> 3                                                                           #> 4                                                                           #> 5                                                                           #> 6                                                                           #> 7                                                                           #> 8                                                                           #> 9                                                                           #> 10                                                                          #> 11                                                                          #> 12                                                                          #> 13                                                                          #> 14                                                                          #> 15                                                                          #> 16                                                                          #> 17                                                                          #> 18                                                                          #> 19                                                                          #> 20                                                                          #> 21                                                                          #> 22                                                                          #> 23                                                                          #> 24                                                                          #> 25                                                                          #> 26                                                                          #> 27                                                                          #> 28                                                                          #> 29                                                                          #> 30                                                                          #> 31                                                                          #> 32                                                                          #> 33                                                                          #> 34                                                                          #> 35                                                                          #> 36                                                                          #> 37                                                                          #> 38                                                                          #> 39                                                                          #> 40                                                                          #> 41                                                                          #> 42                                                                          #> 43                                                                          #> 44                                                                          #> 45                                                                          #> 46                                                                          #> 47                                                                          #> 48                                                                          #> 49                                                                          #> 50   19.7729705                                                             #> 51  168.7494143 161.8705382                                                 #> 52    7.4214764  23.4874227 176.1643958                                     #> 53  189.6946178 181.3264657  24.7685248 197.0675449                         #> 54  200.2358875 191.7964206  34.3909634 207.6075787  10.5446023             #> 55  183.6120674 176.4997285  14.9268288 191.0244122  13.7443932  21.0564320 #> 56   14.5021042  13.2777286 155.6443096  21.3925699 176.1411540 186.6712239 #> 57  184.4248927 175.5818021  23.7753136 191.7723881   7.3591180  16.5876497 #> 58  197.7199205 192.3605420  33.1188932 205.1341102  32.3131719  32.5258548 #> 59   23.4677887   4.0291592 162.5235980  26.5816359 181.6167622 192.0573133 #> 60  188.9225262 180.0877534  26.9045592 196.2716173   4.9509741  12.2739134 #> 61   22.6118801   2.8432869 160.8963458  26.2579710 180.1144420 190.5660968 #> 62  183.2979612 174.9435433  19.6178197 190.6701695   6.3990497  16.9381189 #> 63   21.6681435  30.3447206 189.3125769  14.7346232 209.7110580 220.2328388 #> 64   25.2547339   7.0530490 165.2917046  27.4953291 184.1747429 194.5954282 #> 65  154.0006569 144.9535068  24.6208815 161.3258039  36.6422270  46.9690923 #> 66   17.3541154  17.2145784 178.3678666  14.6069703 198.1787207 208.6692923 #> 67   12.0140551   7.8469297 165.1920924  15.8353073 185.2483616 195.7566197 #> 68   11.6606846  24.4877785 180.0638773   4.6652733 200.7743869 211.3090908 #> 69   25.0158191  12.6121879 173.3083425  24.9815079 192.2497667 202.6725806 #> 70   16.1754081  13.9418087 175.1231092  14.9103172 194.8988115 205.3877833 #> 71   17.8138382  10.7909289 172.5272745  17.8480437 192.0898729 202.5645546 #> 72    6.1410279  20.2609455 162.9642262  13.4183447 184.0784316 194.6222500 #> 73   17.9519069   9.2676982 155.1139075  24.0509800 175.1599599 185.6697888 #> 74  187.0499104 179.5947942  18.8408320 194.4549057   9.5449266  16.3610381 #> 75  182.0318553 173.1411814  22.6388674 189.3759937   9.5574961  19.0485580 #> 76   22.3612919   8.9081231 153.1777238  28.0651738 172.8465700 183.3342718 #> 77  201.4478970 193.4194236  34.1049899 208.8368718  12.4708796   4.7151926 #> 78    7.8425392  20.5034182 175.6190940   3.5904591 196.2665542 206.7996248 #> 79  161.7756172 152.9718495  18.8605493 169.1186003  28.4831446  38.8587477 #> 80   23.7536067   4.9311940 163.8672302  26.4756664 182.9073448 193.3427589 #> 81  183.0919549 175.0682949  17.4864334 190.4780324   7.3226549  17.5002834 #> 82    7.2794486  13.3202478 163.6148629  13.4966010 184.1797712 194.7112765 #> 83  189.6738643 181.9305355  22.1148860 197.0708936   6.4293491  12.6000428 #> 84  178.4467905 170.1347989  16.0748139 185.8198424  11.2478275  21.7906412 #> 85   16.0673101   7.4521677 168.7740268  17.7209973 188.4475266 198.9311272 #> 86   22.7250084  20.3229974 182.1526635  19.3768444 201.6449580 212.1117335 #> 87  194.3287030 186.0302364  28.4628911 201.7056263   4.7308852   6.0372708 #> 88  185.0245624 177.5069423  17.0687535 192.4276217   9.6034378  17.6152104 #> 89  197.0143897 188.9527230  30.0161193 204.4014328   8.1463724   5.0921999 #> 90  177.9579190 170.2999216  11.3867493 185.3558026  13.4053893  23.3254426 #> 91   23.7037167   7.5853593 154.3166014  28.8984903 173.7411078 184.2112727 #> 92  164.5248899 157.3211481   5.2466599 171.9329744  26.9945903  37.1586631 #> 93    9.8325124  16.7487679 174.4757460   8.0306672 194.8026130 205.3230366 #> 94  178.7172264 171.2473187  11.1166350 186.1207036  13.8160611  23.2775580 #> 95  188.9275065 180.8441821  22.7284321 196.3123401   2.9989032  11.7642429 #> 96  191.4499081 184.2853861  22.7522766 198.8619908  12.5789985  15.7432047 #> 97  179.2182083 171.0478917  15.5289120 186.5976086  10.5782892  21.0914414 #> 98   19.1865192  12.0570321 152.5185080  25.7357319 172.6888635 183.2055849 #> 99  215.5212655 208.4699387  46.7753090 222.9370696  30.1430851  22.3104244 #> 100  30.5957933  16.2206463 145.8702894  36.5600943 165.1458927 175.6080564 #>              55          56          57          58          59          60 #> 2                                                                           #> 3                                                                           #> 4                                                                           #> 5                                                                           #> 6                                                                           #> 7                                                                           #> 8                                                                           #> 9                                                                           #> 10                                                                          #> 11                                                                          #> 12                                                                          #> 13                                                                          #> 14                                                                          #> 15                                                                          #> 16                                                                          #> 17                                                                          #> 18                                                                          #> 19                                                                          #> 20                                                                          #> 21                                                                          #> 22                                                                          #> 23                                                                          #> 24                                                                          #> 25                                                                          #> 26                                                                          #> 27                                                                          #> 28                                                                          #> 29                                                                          #> 30                                                                          #> 31                                                                          #> 32                                                                          #> 33                                                                          #> 34                                                                          #> 35                                                                          #> 36                                                                          #> 37                                                                          #> 38                                                                          #> 39                                                                          #> 40                                                                          #> 41                                                                          #> 42                                                                          #> 43                                                                          #> 44                                                                          #> 45                                                                          #> 46                                                                          #> 47                                                                          #> 48                                                                          #> 49                                                                          #> 50                                                                          #> 51                                                                          #> 52                                                                          #> 53                                                                          #> 54                                                                          #> 55                                                                          #> 56  170.4469903                                                             #> 57   17.2218662 170.7317531                                                 #> 58   23.0560411 185.2111527  38.4583015                                     #> 59  177.0790069  17.0917276 175.7699536 193.2948133                         #> 60   17.9130748 175.2358964   4.5079198  37.2641458 180.2717384             #> 61  175.4768598  15.2425962 174.3042483 191.5814452   2.0749315 178.8078275 #> 62   12.2917069 169.7421103   5.0054208  34.1420626 175.2456956   7.2867609 #> 63  204.1134888  33.6682717 204.2230700 218.7679537  31.8749609 208.7298222 #> 64  179.8035409  20.3275944 178.2678966 196.2026206   3.5128195 182.7660117 #> 65   35.3162497 140.2183416  30.6293226  57.0311725 145.1450688  35.1344984 #> 66  193.0718904  23.9263650 192.5163338 208.4578463  18.2715741 197.0238751 #> 67  179.9317300  10.7216576 179.6796245 195.1317388  11.4537591 184.1874124 #> 68  194.9028484  24.6992923 195.4047866 209.2316810  27.0642616 199.9076932 #> 69  187.8384681  24.7532620 186.3475248 204.1363131  10.8525639 190.8457872 #> 70  189.8194245  21.0404365 189.2298913 205.2625840  15.1834442 193.7373601 #> 71  187.1832040  19.8526237 186.3611429 202.8672657  11.5656708 190.8674385 #> 72  177.8424312  10.9032622 178.8806689 191.7727672  24.2562013 183.3734774 #> 73  169.8467271   5.2884920 169.6034475 185.1308304  12.6452561 174.1110963 #> 74    4.7084873 173.7755431  14.3829921  24.2172581 180.0938442  14.1311434 #> 75   17.7594109 168.3233965   2.4671747  39.7019767 173.3216539   6.9504893 #> 76  167.8422483   9.8153428 167.1777153 183.5449787  11.0088650 171.6852817 #> 77   19.8013142 188.0069918  19.4477522  28.2583045 193.7722268  15.5409671 #> 78  190.4490115  20.1567488 190.8803302 204.8852936  23.3874653 195.3838605 #> 79   27.6290328 148.0683243  22.6640520  49.9205690 153.2052018  27.1697256 #> 80  178.4122554  18.1823238 177.0442622 194.6707774   1.4399063 181.5451318 #> 81    9.0098756 169.6345227   8.2762815  31.1731409 175.4457792   9.8702444 #> 82  178.4300512   8.0544528 178.7813976 193.0514294  17.2596479 183.2852405 #> 83    8.5296688 176.3101562  12.6181286  26.0269964 182.3619601  11.3300531 #> 84   13.0203945 164.8981777   7.7834340  35.9577160 170.4536725  11.5004464 #> 85  183.4486416  16.0460906 182.7564740 199.0397576   9.2890761 187.2636259 #> 86  196.8001793  28.7687343 195.8838341 212.5020974  20.3873028 200.3890694 #> 87   15.7475558 180.8001172  11.6515526  30.8984420 186.3304653   8.0021922 #> 88    4.1650012 171.7277482  13.3586609  25.7180438 177.9949236  13.7656963 #> 89   16.1686032 183.5593259  15.3372551  28.2679286 189.3033186  11.7731827 #> 90    7.9347411 164.6081534  13.0722843  30.8743487 170.7669097  15.6732316 #> 91  168.9345344  12.1988080 167.9992009 184.8787996   8.8055017 172.5053077 #> 92   19.1795710 151.3044505  24.5643831  38.3531704 157.9105510  28.2738509 #> 93  189.2614656  18.8806175 189.3086773 204.0906429  19.3171247 193.8154615 #> 94    6.1425361 165.4285194  14.4324086  28.9473095 171.7549615  16.6194402 #> 95   10.8416379 175.4580535   9.1666027  29.6213156 181.2001797   7.7733447 #> 96    7.8388789 178.2761244  18.8001222  19.7737249 184.8426304  17.5230892 #> 97   11.4189928 165.7123527   8.2790572  34.3432881 171.3978210  11.5238317 #> 98  167.2703733   5.0161702 167.1763228 182.4362694  15.2302062 171.6833178 #> 99   31.9819402 202.4087533  37.4090933  24.9783218 209.0243404  33.7160443 #> 100 160.4513744  16.8647131 159.3764045 176.6053173  16.6898698 163.8817705 #>              61          62          63          64          65          66 #> 2                                                                           #> 3                                                                           #> 4                                                                           #> 5                                                                           #> 6                                                                           #> 7                                                                           #> 8                                                                           #> 9                                                                           #> 10                                                                          #> 11                                                                          #> 12                                                                          #> 13                                                                          #> 14                                                                          #> 15                                                                          #> 16                                                                          #> 17                                                                          #> 18                                                                          #> 19                                                                          #> 20                                                                          #> 21                                                                          #> 22                                                                          #> 23                                                                          #> 24                                                                          #> 25                                                                          #> 26                                                                          #> 27                                                                          #> 28                                                                          #> 29                                                                          #> 30                                                                          #> 31                                                                          #> 32                                                                          #> 33                                                                          #> 34                                                                          #> 35                                                                          #> 36                                                                          #> 37                                                                          #> 38                                                                          #> 39                                                                          #> 40                                                                          #> 41                                                                          #> 42                                                                          #> 43                                                                          #> 44                                                                          #> 45                                                                          #> 46                                                                          #> 47                                                                          #> 48                                                                          #> 49                                                                          #> 50                                                                          #> 51                                                                          #> 52                                                                          #> 53                                                                          #> 54                                                                          #> 55                                                                          #> 56                                                                          #> 57                                                                          #> 58                                                                          #> 59                                                                          #> 60                                                                          #> 61                                                                          #> 62  173.7387736                                                             #> 63   32.5127419 203.3127234                                                 #> 64    5.5877377 177.8122408  31.0980943                                     #> 65  143.6758566  30.3656261 173.6594069 147.6545795                         #> 66   19.0954667 191.7883411  13.7237011  17.3753302 161.8977309             #> 67   10.6867967 178.8528472  24.7169904  13.4123237 149.0878751  13.4100433 #> 68   27.0979514 194.3755627  10.1044190  27.3837976 164.9067937  12.1425612 #> 69   12.6681640 185.8861482  24.9516114   8.0802264 155.7334888  11.8048137 #> 70   15.8974894 188.5089778  16.6920816  14.5964168 158.6102837   3.2944527 #> 71   12.4527977 185.7050701  20.3679775  10.8473004 155.7337290   6.7063526 #> 72   22.9381335 177.6847321  27.8091239  26.7185536 148.5182104  22.4346863 #> 73   10.6456814 168.7640859  34.6904109  16.0771307 139.0180393  23.3270720 #> 74  178.5187638   9.9254380 207.4306265 182.7730214  36.9314936 196.2518616 #> 75  171.8586124   5.5888420 201.8050560 175.8155559  28.1877850 190.0821366 #> 76    8.9544036 166.4573266  37.6280010  14.4987746 136.5598154  25.3387314 #> 77  192.2483771  18.6474618 221.6197609 196.3644884  49.0130869 210.2127030 #> 78   23.2108237 189.8675777  14.0101739  24.1096094 160.3736232  11.1915612 #> 79  151.7214621  22.1853886 181.5607202 155.7370581   8.1875876 169.8814702 #> 80    3.4776719 176.5384429  31.1121225   2.1795350 146.4218153  17.4345532 #> 81  173.9122813   3.2909267 203.2452574 178.0564637  31.0974719 191.8466610 #> 82   16.0800845 177.7807286  25.7286416  19.6096027 148.2715391  17.2405379 #> 83  180.8101253   9.1014506 209.9472476 185.0021998  38.3482922 198.6546438 #> 84  168.9405089   4.8542166 198.4736115 173.0313131  25.7327170 186.9674191 #> 85    9.6222811 182.0595632  22.9279354   9.7745596 152.1335768   9.8156934 #> 86   21.6515176 195.2630235  14.2723109  18.5963608 165.2546218   5.4088550 #> 87  184.8248584  11.0867546 214.3802114 188.8932789  41.3731122 202.8723695 #> 88  176.4234818   8.5967169 205.3793686 180.6683206  34.7866249 194.1765648 #> 89  187.7800217  14.2048928 217.1680274 191.8952003  44.5662852 205.7496846 #> 90  169.2021924   8.4405204 198.2502134 173.4301160  27.6750935 186.9947583 #> 91    6.8542915 167.3581990  37.4704362  12.1988203 137.3712740  24.6777297 #> 92  156.3038412  21.1556674 184.9679331 160.6452966  19.5694179 173.8949246 #> 93   19.3370888 188.4044997  14.9145083  19.8011594 158.7452818   7.5533148 #> 94  170.1764892   9.5822645 199.0821762 174.4408679  29.2244359 187.9000332 #> 95  179.6745474   6.3905523 209.0632540 183.7969935  36.5811984 197.6395440 #> 96  183.2482341  14.8561826 211.9418259 187.5533534  42.2384720 200.8775729 #> 97  169.8737426   4.3858614 199.3059397 173.9934469  26.9018604 187.8529960 #> 98   13.1832406 166.2914521  37.0495877  18.7116670 136.6098267  26.0486183 #> 99  207.4320051  35.7423390 236.0766472 211.7291572  65.6172938 225.0535888 #> 100  15.0265444 158.7662268  46.0161227  19.6771968 128.7472807  33.3439087 #>              67          68          69          70          71          72 #> 2                                                                           #> 3                                                                           #> 4                                                                           #> 5                                                                           #> 6                                                                           #> 7                                                                           #> 8                                                                           #> 9                                                                           #> 10                                                                          #> 11                                                                          #> 12                                                                          #> 13                                                                          #> 14                                                                          #> 15                                                                          #> 16                                                                          #> 17                                                                          #> 18                                                                          #> 19                                                                          #> 20                                                                          #> 21                                                                          #> 22                                                                          #> 23                                                                          #> 24                                                                          #> 25                                                                          #> 26                                                                          #> 27                                                                          #> 28                                                                          #> 29                                                                          #> 30                                                                          #> 31                                                                          #> 32                                                                          #> 33                                                                          #> 34                                                                          #> 35                                                                          #> 36                                                                          #> 37                                                                          #> 38                                                                          #> 39                                                                          #> 40                                                                          #> 41                                                                          #> 42                                                                          #> 43                                                                          #> 44                                                                          #> 45                                                                          #> 46                                                                          #> 47                                                                          #> 48                                                                          #> 49                                                                          #> 50                                                                          #> 51                                                                          #> 52                                                                          #> 53                                                                          #> 54                                                                          #> 55                                                                          #> 56                                                                          #> 57                                                                          #> 58                                                                          #> 59                                                                          #> 60                                                                          #> 61                                                                          #> 62                                                                          #> 63                                                                          #> 64                                                                          #> 65                                                                          #> 66                                                                          #> 67                                                                          #> 68   17.4165499                                                             #> 69   15.0910772  23.5463736                                                 #> 70   10.3804670  13.4280953  10.1696945                                     #> 71    9.2443078  16.9068807   7.2837766   3.7491296                         #> 72   13.4988206  17.7877189  28.2177751  20.6622820  21.4386270             #> 73   10.0932533  26.6475791  21.6664100  20.1479178  18.0864999  15.5719106 #> 74  183.1630183 198.2895368 190.8232137 192.9904805 190.3055848 181.3180172 #> 75  177.2544406 192.9997260 183.8953221 186.7952165 183.9215138 176.4967064 #> 76   12.9939438  30.2636842  21.3740150  22.0540685  19.3528890  20.2523528 #> 77  197.2234660 212.5989336 204.4348162 206.9382014 204.1691674 195.7783615 #> 78   13.1210622   4.5627582  21.3921403  11.3258525  14.2768066  13.9287012 #> 79  157.0248993 172.7429478 163.8144499 166.5965899 163.7462345 156.2469560 #> 80   11.7808387  26.7107494   9.4656991  14.4397596  10.7455452  24.8855315 #> 81  178.8503900 194.2312969 186.1232933 188.5732376 185.8135115 177.4343183 #> 82    6.3932198  16.6460067  21.3308289  14.8500413  14.8906060   7.1287716 #> 83  185.6126435 200.8673338 193.0628049 195.3865491 192.6612525 183.9755372 #> 84  174.0218960 189.5286691 181.1036443 183.6890301 180.8933354 172.8316320 #> 85    5.6926662  17.8137371   9.4842131   6.5242441   3.9299486  18.7688721 #> 86   18.0721604  16.1654569  11.2609381   7.7456292   9.6368407  27.8401736 #> 87  189.9304386 205.4250992 196.9677641 199.5933900 196.7915023 188.6996926 #> 88  181.0967985 196.2526275 188.7201716 190.9138409 188.2214427 179.3015882 #> 89  192.7649898 208.1566066 199.9655441 202.4747767 199.7032433 191.3519838 #> 90  173.9349507 189.1574212 181.4847004 183.7293047 181.0215588 172.2573719 #> 91   13.2896573  30.7054118  19.5119350  21.3859426  18.3640512  22.1980439 #> 92  160.7618213 175.7871716 168.6759212 170.6416296 168.0036493 158.7802569 #> 93   10.0167934   7.7634593  16.9649429   7.0078451   9.8205641  15.2148856 #> 94  174.8108958 189.9485310 182.4888753 184.6388839 181.9562676 172.9929942 #> 95  184.6560019 200.0602658 191.8664187 194.3646538 191.5940071 183.2734448 #> 96  187.7468528 202.7378641 195.5934148 197.6231673 194.9759477 185.6812169 #> 97  174.8815522 190.3275348 182.0629518 184.5770535 181.7997830 173.5831203 #> 98   12.6979973  28.6526702  24.5358768  22.9075978  20.9503207  15.9183638 #> 99  211.9122675 226.8390759 219.7716045 221.8007062 219.1590760 209.7270958 #> 100  21.5045139  38.8139471  27.5332652  30.0512697  27.0114409  27.7605671 #>              73          74          75          76          77          78 #> 2                                                                           #> 3                                                                           #> 4                                                                           #> 5                                                                           #> 6                                                                           #> 7                                                                           #> 8                                                                           #> 9                                                                           #> 10                                                                          #> 11                                                                          #> 12                                                                          #> 13                                                                          #> 14                                                                          #> 15                                                                          #> 16                                                                          #> 17                                                                          #> 18                                                                          #> 19                                                                          #> 20                                                                          #> 21                                                                          #> 22                                                                          #> 23                                                                          #> 24                                                                          #> 25                                                                          #> 26                                                                          #> 27                                                                          #> 28                                                                          #> 29                                                                          #> 30                                                                          #> 31                                                                          #> 32                                                                          #> 33                                                                          #> 34                                                                          #> 35                                                                          #> 36                                                                          #> 37                                                                          #> 38                                                                          #> 39                                                                          #> 40                                                                          #> 41                                                                          #> 42                                                                          #> 43                                                                          #> 44                                                                          #> 45                                                                          #> 46                                                                          #> 47                                                                          #> 48                                                                          #> 49                                                                          #> 50                                                                          #> 51                                                                          #> 52                                                                          #> 53                                                                          #> 54                                                                          #> 55                                                                          #> 56                                                                          #> 57                                                                          #> 58                                                                          #> 59                                                                          #> 60                                                                          #> 61                                                                          #> 62                                                                          #> 63                                                                          #> 64                                                                          #> 65                                                                          #> 66                                                                          #> 67                                                                          #> 68                                                                          #> 69                                                                          #> 70                                                                          #> 71                                                                          #> 72                                                                          #> 73                                                                          #> 74  173.0719921                                                             #> 75  167.1798473  15.4888418                                                 #> 76    4.6841914 170.9817331 164.7437537                                     #> 77  187.1309705  15.3464996  21.8261224 184.8940276                         #> 78   22.1162226 193.8196121 188.4736080  25.8206968 208.1055520             #> 79  146.9465925  28.9257763  20.2577900 144.5429294  40.8319997 168.2175860 #> 80   13.8976484 181.4158331 174.5948129  12.4305496 195.0720546  23.1923698 #> 81  168.7577355   7.0768440   8.7772614 166.5314521  18.3748394 189.7360407 #> 82   10.7330230 181.7773664 176.3738642  15.0841604 196.0334129  12.1024809 #> 83  175.5194967   3.8278197  14.2337633 173.3576179  12.0275872 196.3847124 #> 84  163.9323456  12.3732688   6.6007774 161.6385862  23.3534728 185.0217130 #> 85   14.1602674 186.5946922 180.3200813  15.6139617 200.5036340  14.3488191 #> 86   27.5861389 199.9096768 193.4413986  28.9863119 213.7420971  16.1734119 #> 87  179.8409383  11.0676233  14.0103561 177.5421434   7.8213073 200.9203269 #> 88  171.0051140   2.1512187  14.1786011 168.9008654  17.0367313 191.7795039 #> 89  182.6727114  11.5278698  17.6464477 180.4298610   4.4692894 203.6614020 #> 90  163.8422239   9.4167174  12.5553150 161.7081994  23.6375111 184.6769228 #> 91    6.9147203 172.0199024 165.5590322   2.8125583 185.8350334  26.3855629 #> 92  150.6754324  22.5542397  22.9724100 148.6627501  37.4353737 171.3252851 #> 93   19.8146089 192.5576629 186.8905629  23.0095266 206.7211930   4.4568384 #> 94  164.7198187   8.3522549  14.1536386 162.6312449  23.1912451 185.4766425 #> 95  174.5638334   6.5492955  10.9763983 172.3198437  12.5752495 195.5633000 #> 96  177.6604983   5.4151169  20.2580531 175.6383246  13.2198352 198.2826911 #> 97  164.7901234  10.8163169   7.5318786 162.5303978  22.3747080 185.8260174 #> 98    2.8993667 170.5228662 164.7572213   5.5528629 184.6304540  24.0925337 #> 99  201.8278422  29.0287818  39.6935807 199.8201940  18.2224328 222.3931504 #> 100  12.6457163 163.5004410 156.9343137   8.5506551 177.2602490  34.3691294 #>              79          80          81          82          83          84 #> 2                                                                           #> 3                                                                           #> 4                                                                           #> 5                                                                           #> 6                                                                           #> 7                                                                           #> 8                                                                           #> 9                                                                           #> 10                                                                          #> 11                                                                          #> 12                                                                          #> 13                                                                          #> 14                                                                          #> 15                                                                          #> 16                                                                          #> 17                                                                          #> 18                                                                          #> 19                                                                          #> 20                                                                          #> 21                                                                          #> 22                                                                          #> 23                                                                          #> 24                                                                          #> 25                                                                          #> 26                                                                          #> 27                                                                          #> 28                                                                          #> 29                                                                          #> 30                                                                          #> 31                                                                          #> 32                                                                          #> 33                                                                          #> 34                                                                          #> 35                                                                          #> 36                                                                          #> 37                                                                          #> 38                                                                          #> 39                                                                          #> 40                                                                          #> 41                                                                          #> 42                                                                          #> 43                                                                          #> 44                                                                          #> 45                                                                          #> 46                                                                          #> 47                                                                          #> 48                                                                          #> 49                                                                          #> 50                                                                          #> 51                                                                          #> 52                                                                          #> 53                                                                          #> 54                                                                          #> 55                                                                          #> 56                                                                          #> 57                                                                          #> 58                                                                          #> 59                                                                          #> 60                                                                          #> 61                                                                          #> 62                                                                          #> 63                                                                          #> 64                                                                          #> 65                                                                          #> 66                                                                          #> 67                                                                          #> 68                                                                          #> 69                                                                          #> 70                                                                          #> 71                                                                          #> 72                                                                          #> 73                                                                          #> 74                                                                          #> 75                                                                          #> 76                                                                          #> 77                                                                          #> 78                                                                          #> 79                                                                          #> 80  154.4882092                                                             #> 81   22.9357382 176.7501354                                                 #> 82  156.1182829  17.8166173 177.6621391                                     #> 83   30.2046854 183.6740728   7.2970355 184.3256558                         #> 84   17.5465952 171.7492698   5.5673701 172.9358735  12.8415047             #> 85  160.1290922   8.9018234 182.1423342  11.8468045 188.9713555 177.2428226 #> 86  173.2815984  19.2694509 195.3912855  22.4789196 202.2519789 190.4555265 #> 87   33.2131151 187.6224102  11.4636383 188.8363590   7.2477761  15.9086052 #> 88   26.7932965 179.3154215   5.4701960 179.7329704   5.0778514  10.4628978 #> 89   36.3822967 190.6029814  13.9253686 191.5873060   7.9212642  18.8882537 #> 90   19.8197119 172.0847074   6.1014412 172.6208986  11.7186050   6.2990743 #> 91  145.3876204  10.2453637 167.4846408  16.4636634 174.3499255 162.5495727 #> 92   14.5228441 159.2460035  19.7177452 159.2954205  25.4298926  16.8323500 #> 93  166.6464344  19.0094298 188.3464202  11.1733593 195.0598316 183.5662875 #> 94   21.4893039 173.0785161   6.7718324 173.4320114  11.1653489   8.1390957 #> 95   28.3939784 182.5010089   5.8438743 183.4874145   3.5958681  10.8507780 #> 96   34.2812961 186.1725741  12.3244938 186.2613738   6.2553434  17.7475950 #> 97   18.7340182 172.6981704   4.2061635 173.7454943  11.4985219   1.6145388 #> 98  144.5148545  16.5393032 166.2558356  12.2416823 172.9941552 161.4556443 #> 99   57.4728557 210.3531071  34.5427527 210.3847194  27.2697828  40.0213616 #> 100 136.7746663  18.0678439 158.9174888  23.3727799 165.8030307 153.9625320 #>              85          86          87          88          89          90 #> 2                                                                           #> 3                                                                           #> 4                                                                           #> 5                                                                           #> 6                                                                           #> 7                                                                           #> 8                                                                           #> 9                                                                           #> 10                                                                          #> 11                                                                          #> 12                                                                          #> 13                                                                          #> 14                                                                          #> 15                                                                          #> 16                                                                          #> 17                                                                          #> 18                                                                          #> 19                                                                          #> 20                                                                          #> 21                                                                          #> 22                                                                          #> 23                                                                          #> 24                                                                          #> 25                                                                          #> 26                                                                          #> 27                                                                          #> 28                                                                          #> 29                                                                          #> 30                                                                          #> 31                                                                          #> 32                                                                          #> 33                                                                          #> 34                                                                          #> 35                                                                          #> 36                                                                          #> 37                                                                          #> 38                                                                          #> 39                                                                          #> 40                                                                          #> 41                                                                          #> 42                                                                          #> 43                                                                          #> 44                                                                          #> 45                                                                          #> 46                                                                          #> 47                                                                          #> 48                                                                          #> 49                                                                          #> 50                                                                          #> 51                                                                          #> 52                                                                          #> 53                                                                          #> 54                                                                          #> 55                                                                          #> 56                                                                          #> 57                                                                          #> 58                                                                          #> 59                                                                          #> 60                                                                          #> 61                                                                          #> 62                                                                          #> 63                                                                          #> 64                                                                          #> 65                                                                          #> 66                                                                          #> 67                                                                          #> 68                                                                          #> 69                                                                          #> 70                                                                          #> 71                                                                          #> 72                                                                          #> 73                                                                          #> 74                                                                          #> 75                                                                          #> 76                                                                          #> 77                                                                          #> 78                                                                          #> 79                                                                          #> 80                                                                          #> 81                                                                          #> 82                                                                          #> 83                                                                          #> 84                                                                          #> 85                                                                          #> 86   13.4814450                                                             #> 87  193.1450077 206.3497681                                                 #> 88  184.5142951 197.8233359  11.9840824                                     #> 89  196.0390519 209.2753047   3.7720318  12.9987534                         #> 90  177.3221326 190.6188459  17.3130625   7.2755791  19.3131271             #> 91   14.8620931  27.9070677 178.4448954 169.9309072 181.3682377 162.7218278 #> 92  164.2693789 177.6208197  31.1298022  20.5804336  33.1559052  13.8612187 #> 93   10.1099292  12.8962166 199.4734422 190.5028877 202.2682196 183.3662798 #> 94  178.2440270 191.5613452  17.3488013   6.3088982  18.9891810   1.9895794 #> 95  187.9291457 201.1668659   5.7541117   6.7536729   8.1101410  11.5629017 #> 96  191.2467503 204.5901071  12.0014962   7.5022794  10.6693032  14.5923075 #> 97  178.1385100 191.3703066  15.1207546   8.8736543  17.9063030   5.0376165 #> 98   17.0209329  30.4093625 177.3637915 168.4608971 180.1748494 161.3090152 #> 99  215.4277287 228.7739964  25.8018514  31.1628491  22.0738308  38.4380236 #> 100  23.5282915  36.5076849 169.8529115 161.4066576 172.7925120 154.1885367 #>              91          92          93          94          95          96 #> 2                                                                           #> 3                                                                           #> 4                                                                           #> 5                                                                           #> 6                                                                           #> 7                                                                           #> 8                                                                           #> 9                                                                           #> 10                                                                          #> 11                                                                          #> 12                                                                          #> 13                                                                          #> 14                                                                          #> 15                                                                          #> 16                                                                          #> 17                                                                          #> 18                                                                          #> 19                                                                          #> 20                                                                          #> 21                                                                          #> 22                                                                          #> 23                                                                          #> 24                                                                          #> 25                                                                          #> 26                                                                          #> 27                                                                          #> 28                                                                          #> 29                                                                          #> 30                                                                          #> 31                                                                          #> 32                                                                          #> 33                                                                          #> 34                                                                          #> 35                                                                          #> 36                                                                          #> 37                                                                          #> 38                                                                          #> 39                                                                          #> 40                                                                          #> 41                                                                          #> 42                                                                          #> 43                                                                          #> 44                                                                          #> 45                                                                          #> 46                                                                          #> 47                                                                          #> 48                                                                          #> 49                                                                          #> 50                                                                          #> 51                                                                          #> 52                                                                          #> 53                                                                          #> 54                                                                          #> 55                                                                          #> 56                                                                          #> 57                                                                          #> 58                                                                          #> 59                                                                          #> 60                                                                          #> 61                                                                          #> 62                                                                          #> 63                                                                          #> 64                                                                          #> 65                                                                          #> 66                                                                          #> 67                                                                          #> 68                                                                          #> 69                                                                          #> 70                                                                          #> 71                                                                          #> 72                                                                          #> 73                                                                          #> 74                                                                          #> 75                                                                          #> 76                                                                          #> 77                                                                          #> 78                                                                          #> 79                                                                          #> 80                                                                          #> 81                                                                          #> 82                                                                          #> 83                                                                          #> 84                                                                          #> 85                                                                          #> 86                                                                          #> 87                                                                          #> 88                                                                          #> 89                                                                          #> 90                                                                          #> 91                                                                          #> 92  149.7567349                                                             #> 93   23.2006454 170.1083109                                                 #> 94  163.6731169  14.2888262 184.2079233                                     #> 95  173.2598041  25.3971885 194.1625513  11.6254125                         #> 96  176.7174035  26.9850697 197.0868929  13.2492390   9.8479137             #> 97  163.4632660  16.7876848 184.4023497   6.7516810   9.8035754  16.2095004 #> 98    8.2967507 148.1044976  22.1357652 162.1712810 172.0674405 175.0887622 #> 99  200.9021533  51.1591515 221.2311596  37.3138824  29.3524675  24.1847851 #> 100   8.6678578 141.2778730  31.5184755 155.1570270 164.6855131 168.2240764 #>              97          98          99 #> 2                                       #> 3                                       #> 4                                       #> 5                                       #> 6                                       #> 7                                       #> 8                                       #> 9                                       #> 10                                      #> 11                                      #> 12                                      #> 13                                      #> 14                                      #> 15                                      #> 16                                      #> 17                                      #> 18                                      #> 19                                      #> 20                                      #> 21                                      #> 22                                      #> 23                                      #> 24                                      #> 25                                      #> 26                                      #> 27                                      #> 28                                      #> 29                                      #> 30                                      #> 31                                      #> 32                                      #> 33                                      #> 34                                      #> 35                                      #> 36                                      #> 37                                      #> 38                                      #> 39                                      #> 40                                      #> 41                                      #> 42                                      #> 43                                      #> 44                                      #> 45                                      #> 46                                      #> 47                                      #> 48                                      #> 49                                      #> 50                                      #> 51                                      #> 52                                      #> 53                                      #> 54                                      #> 55                                      #> 56                                      #> 57                                      #> 58                                      #> 59                                      #> 60                                      #> 61                                      #> 62                                      #> 63                                      #> 64                                      #> 65                                      #> 66                                      #> 67                                      #> 68                                      #> 69                                      #> 70                                      #> 71                                      #> 72                                      #> 73                                      #> 74                                      #> 75                                      #> 76                                      #> 77                                      #> 78                                      #> 79                                      #> 80                                      #> 81                                      #> 82                                      #> 83                                      #> 84                                      #> 85                                      #> 86                                      #> 87                                      #> 88                                      #> 89                                      #> 90                                      #> 91                                      #> 92                                      #> 93                                      #> 94                                      #> 95                                      #> 96                                      #> 97                                      #> 98  162.3008328                         #> 99   38.7486019 199.2489959             #> 100 154.8864074  11.8503276 192.4081475"},{"path":"https://tobiste.github.io/structr/reference/dot-or_eigen_helper.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function for Eigenvalues and Eigenvectors of a Set of Vectors — .or_eigen_helper","title":"Helper function for Eigenvalues and Eigenvectors of a Set of Vectors — .or_eigen_helper","text":"Helper function Eigenvalues Eigenvectors Set Vectors","code":""},{"path":"https://tobiste.github.io/structr/reference/dot-or_eigen_helper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function for Eigenvalues and Eigenvectors of a Set of Vectors — .or_eigen_helper","text":"","code":".or_eigen_helper(x, scaled = FALSE)"},{"path":"https://tobiste.github.io/structr/reference/dot-or_eigen_helper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function for Eigenvalues and Eigenvectors of a Set of Vectors — .or_eigen_helper","text":"x Object class \"Vec3\", \"Line\" \"Plane\" scaled logical. Whether Eigenvectors scaled Eigenvalues (effective x Cartesian coordinates).","code":""},{"path":"https://tobiste.github.io/structr/reference/drillcore.html","id":null,"dir":"Reference","previous_headings":"","what":"Orientation of structures from drill core orientation angles — drillcore","title":"Orientation of structures from drill core orientation angles — drillcore","text":"Calculates orientation plane line internal core angles (alpha, beta, gamma) oriented drill cores","code":""},{"path":"https://tobiste.github.io/structr/reference/drillcore.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Orientation of structures from drill core orientation angles — drillcore","text":"","code":"drillcore_transformation(azi, inc, alpha, beta, gamma = NULL)"},{"path":"https://tobiste.github.io/structr/reference/drillcore.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Orientation of structures from drill core orientation angles — drillcore","text":"azi numeric. Angle North borehole trajectory projected horizontal. angle measured clockwise north value 0° 360°. inc numeric. Acute angle horizontal plane trajectory borehole. value inclination can −90° 90°, inc>0° corresponds borehole pointing downwards. alpha numeric. Acute dihedral angle geological plane trajectory borehole. angle restricted 0° 90°, 90° corresponds plane perpendicular borehole, .e. trajectory borehole parallel normal vector plane. beta numeric. Angle reference line (line top roof borehole profile) lower inflexion point fracture trace borehole wall, .e. perimeter borehole tangent fracture trace. angle measured clockwise looking direction borehole trajectory can hence 0° 360°. gamma (optional) numeric. Linear feature plane measured clockwise direction ellipse long axis hole end (positive angle). measured clockwise plane facing hole, angle negative.","code":""},{"path":"https://tobiste.github.io/structr/reference/drillcore.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Orientation of structures from drill core orientation angles — drillcore","text":"object class \"Plane\". gamma specified, \"Line\" object returned.","code":""},{"path":"https://tobiste.github.io/structr/reference/drillcore.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Orientation of structures from drill core orientation angles — drillcore","text":"Stigsson, M., & Munier, R. (2013). Orientation uncertainty goes bananas: algorithm visualise uncertainty sample space stereonets oriented objects measured boreholes. Computers Geosciences, 56, 56–61. https://doi.org/10.1016/j.cageo.2013.03.001","code":""},{"path":"https://tobiste.github.io/structr/reference/drillcore.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Orientation of structures from drill core orientation angles — drillcore","text":"","code":"# examples from Roger Marjoribanks (2016); # http://rogermarjoribanks.info/wp-content/uploads/2016/03/Plotting-alpha-to-locate-P.jpg azi <- 225 inc <- 45  # single alpha-beta measurement drillcore_transformation(azi, inc, alpha = 60, beta = 320) #> Plane object (n = 1): #> dip_direction           dip  #>      25.00392      70.02959  drillcore_transformation(azi, inc, 45, 220) #> Plane object (n = 1): #> dip_direction           dip  #>     329.43276      27.99089   # example from Stigsson and Munier: drillcore_transformation(120, 55, 50, 270) #> Plane object (n = 1): #> dip_direction           dip  #>      94.35502      51.13358   # multiple alpha-beta measurements my_alphas <- c(60, 45) my_betas <- c(320, 220) res <- drillcore_transformation(azi, inc, alpha = my_alphas, beta = my_betas)  # Plot core-axis, and planes in stereonet plot(Line(azi, inc), lab = \"core-axis\") points(res, col = 2:3) lines(res, col = 2:3) text(res, labels = c(\"A\", \"B\"), col = 2:3, pos = 4)  # gamma measurements my_gammas <- c(20, -10) res2 <- drillcore_transformation(azi, inc, my_alphas, my_betas, my_gammas) points(res2, col = 2:3) text(res2, labels = c(\"lA\", \"lB\"), col = 2:3, pos = 4)"},{"path":"https://tobiste.github.io/structr/reference/ellipse.html","id":null,"dir":"Reference","previous_headings":"","what":"Add an Ellipse to existing plot — ellipse","title":"Add an Ellipse to existing plot — ellipse","text":"Add Ellipse existing plot","code":""},{"path":"https://tobiste.github.io/structr/reference/ellipse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add an Ellipse to existing plot — ellipse","text":"","code":"ellipse(   x = 0,   y = x,   radius.x = 1,   radius.y = radius.x,   rot = 0,   nv = 512,   border = par(\"fg\"),   col = par(\"bg\"),   lty = par(\"lty\"),   lwd = par(\"lwd\"),   plot = TRUE )"},{"path":"https://tobiste.github.io/structr/reference/ellipse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add an Ellipse to existing plot — ellipse","text":"x, y x y co-ordinates center(s) ellipse(s). radius.x scalar vector giving semi-major axis ellipse. radius.y scalar vector giving semi-minor axis ellipse. rot angle rotation radians. nv number vertices draw ellipses. border color borders. default par(\"fg\"). Use border = NA omit borders. col color(s) fill shade annulus sector . default NA (also NULL) means fill (say draw transparent). lty line type borders shading; defaults \"solid\". lwd line width borders shading. plot logical. TRUE structure plotted. FALSE points calculated returned. Use want combine several geometric structures single polygon.","code":""},{"path":"https://tobiste.github.io/structr/reference/ellipse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add an Ellipse to existing plot — ellipse","text":"function invisibly returns list calculated coordinates shapes.","code":""},{"path":"https://tobiste.github.io/structr/reference/ellipse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add an Ellipse to existing plot — ellipse","text":"","code":"plot(c(0, 1), c(0, 1), type = \"n\") ellipse(.5, .5, radius.x = 0.5, radius.y = .25, col = \"darkgreen\", border = \"red\")"},{"path":"https://tobiste.github.io/structr/reference/ellipsoid-params.html","id":null,"dir":"Reference","previous_headings":"","what":"Ellipsoid shape parameters — ellipsoid-params","title":"Ellipsoid shape parameters — ellipsoid-params","text":"Ellipsoid shape parameters","code":""},{"path":"https://tobiste.github.io/structr/reference/ellipsoid-params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ellipsoid shape parameters — ellipsoid-params","text":"","code":"ell_volume(s)  ell_lode(s)  ell_nadai(s)  ell_jelinek(s)  ell_flinn(s)  ell_size_invariant(s)  ell_strain_invariant(s)  ell_shape_invariant(s)"},{"path":"https://tobiste.github.io/structr/reference/ellipsoid-params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ellipsoid shape parameters — ellipsoid-params","text":"s numeric. 3-element vector giving ellipsoid's semi-axis lengths, order (can square-roots eigenvalues).","code":""},{"path":"https://tobiste.github.io/structr/reference/ellipsoid-params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ellipsoid shape parameters — ellipsoid-params","text":"positive numeric","code":""},{"path":"https://tobiste.github.io/structr/reference/ellipsoid-params.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Ellipsoid shape parameters — ellipsoid-params","text":"$$e_i = \\log s_i$$ \\(s1 \\geq s2 \\geq s3\\) semi-axis lengths ellipsoid. Lode's shape parameter: $$\\nu = \\frac{2 e_2 - e_1 - e_3}{e_1-e_3}$$ \\(e_1 \\geq e_2 \\geq e_3\\). Note \\(\\nu\\)  undefined spheres, arbitrarily declare \\(\\nu=0\\) . Otherwise \\(-1 \\geq \\nu \\geq 1\\). \\(\\nu=-1\\) prolate spheroids \\(\\nu=1\\) oblate spheroids. Octahedral shear strain \\(e_s\\) (Nadai 1963): $$e_s = \\sqrt{\\frac{(e_1 - e_2)^2 + (e_2 - e_3)^2 + (e_1 - e_3)^2 }{3}}$$ Strain symmetry (Flinn 1963): $$k = \\frac{s_1/s_2 - 1}{s_2/s_3 - 1}$$ strain intensity (Flinn 1963): $$d = \\sqrt{(s_1/s_2 - 1)^2 + (s_2/s_3 - 1)^2}$$ Jelinek (1981)'s \\(P_j\\) parameter: $$P_j = e^{\\sqrt{2 \\vec{v}\\cdot \\vec{v}}}$$ \\(\\vec{v} = e_i - \\frac{\\sum e_i}{3}\\)","code":""},{"path":"https://tobiste.github.io/structr/reference/ellipsoid-params.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Ellipsoid shape parameters — ellipsoid-params","text":"Flinn, Derek.(1963): \"statistical analysis fabric diagrams.\" Geological Journal 3.2: 247-253. Lode, Walter (1926): \"Versuche über den Einfluß der mittleren Hauptspannung auf das Fließen der Metalle Eisen, Kupfer und Nickel“ (\"Experiments influence mean principal stress flow metals iron, copper nickel\"], Zeitschrift für Physik, vol. 36 (November), pp. 913–939, DOI: 10.1007/BF01400222 Nadai, ., Hodge, P. G., Jr. (1963): \"Theory Flow Fracture Solids, vol. II.\" ASME. J. Appl. Mech. December 1963; 30(4): 640. https://doi.org/10.1115/1.3636654 Jelinek, Vit. \"Characterization magnetic fabric rocks.\" Tectonophysics 79.3-4 (1981): T63-T67.","code":""},{"path":[]},{"path":"https://tobiste.github.io/structr/reference/ellipsoid-params.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ellipsoid shape parameters — ellipsoid-params","text":"","code":"# Generate some random data set.seed(1) dat <- rvmf(100, k = 20) s <- principal_stretch(dat)  # Volume of ellipsoid ell_volume(s) #> [1] 189.6644  #  Size-related tensor invariant of ellipsoids ell_size_invariant(s) #> [1] 3.812844  # Strain-related tensor invariant of ellipsoids ell_strain_invariant(s) #> [1] 4.122989  # Shape-related tensor invariant of ellipsoids ell_shape_invariant(s) #> [1] 1.370287  # Lode's shape parameter ell_lode(s) #> [1] -0.9524619  # Nadai's octahedral shear strain ell_nadai(s) #> [1] 1.202446  # Jelinek Pj parameter ell_jelinek(s) #> [1] 5.476767  # Flinn's intensity and symmetry parameters ell_flinn(s) #> $k #> [1] 91.0627 #>  #> $d #> [1] 3.283228 #>"},{"path":"https://tobiste.github.io/structr/reference/example_lines.html","id":null,"dir":"Reference","previous_headings":"","what":"Example lines — example_lines","title":"Example lines — example_lines","text":"example data set","code":""},{"path":"https://tobiste.github.io/structr/reference/example_lines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example lines — example_lines","text":"","code":"data('example_lines')"},{"path":"https://tobiste.github.io/structr/reference/example_lines.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example lines — example_lines","text":"object class Line","code":""},{"path":"https://tobiste.github.io/structr/reference/example_lines.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example lines — example_lines","text":"","code":"data(\"example_lines\") head(example_lines) #> Line object (n = 6): #>      azimuth plunge #> [1,]      54     13 #> [2,]      61     15 #> [3,]      74     14 #> [4,]      80     19 #> [5,]      63     17 #> [6,]      76     10"},{"path":"https://tobiste.github.io/structr/reference/example_lines_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Example lines — example_lines_df","title":"Example lines — example_lines_df","text":"example data set","code":""},{"path":"https://tobiste.github.io/structr/reference/example_lines_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example lines — example_lines_df","text":"","code":"data('example_lines_df')"},{"path":"https://tobiste.github.io/structr/reference/example_lines_df.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example lines — example_lines_df","text":"object class data.frame","code":""},{"path":"https://tobiste.github.io/structr/reference/example_lines_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example lines — example_lines_df","text":"","code":"data(\"example_lines_df\") head(example_lines_df) #> # A tibble: 6 × 4 #>   trend plunge quality feature_type #>   <dbl>  <dbl>   <dbl> <chr>        #> 1    54     13       3 stretching   #> 2    61     15       3 stretching   #> 3    74     14      NA stretching   #> 4    80     19      NA stretching   #> 5    63     17      NA stretching   #> 6    76     10      NA stretching"},{"path":"https://tobiste.github.io/structr/reference/example_planes.html","id":null,"dir":"Reference","previous_headings":"","what":"Example planes — example_planes","title":"Example planes — example_planes","text":"example data set","code":""},{"path":"https://tobiste.github.io/structr/reference/example_planes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example planes — example_planes","text":"","code":"data('example_planes')"},{"path":"https://tobiste.github.io/structr/reference/example_planes.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example planes — example_planes","text":"object class Plane","code":""},{"path":"https://tobiste.github.io/structr/reference/example_planes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example planes — example_planes","text":"","code":"data(\"example_planes\") head(example_planes) #> Plane object (n = 6): #>      dip_direction dip #> [1,]           142  52 #> [2,]           135  43 #> [3,]           148  42 #> [4,]           150  46 #> [5,]           139  51 #> [6,]           158  51"},{"path":"https://tobiste.github.io/structr/reference/example_planes_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Example planes — example_planes_df","title":"Example planes — example_planes_df","text":"example data set","code":""},{"path":"https://tobiste.github.io/structr/reference/example_planes_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example planes — example_planes_df","text":"","code":"data('example_planes_df')"},{"path":"https://tobiste.github.io/structr/reference/example_planes_df.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example planes — example_planes_df","text":"object class data.frame","code":""},{"path":"https://tobiste.github.io/structr/reference/example_planes_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example planes — example_planes_df","text":"","code":"data(\"example_planes_df\") head(example_planes_df) #> # A tibble: 6 × 4 #>   dipdir   dip quality feature_type #>    <dbl> <dbl>   <dbl> <chr>        #> 1    142    52       3 foliation    #> 2    135    43       3 foliation    #> 3    148    42       3 foliation    #> 4    150    46       3 foliation    #> 5    139    51       3 foliation    #> 6    158    51       3 foliation"},{"path":"https://tobiste.github.io/structr/reference/fabric_indexes.html","id":null,"dir":"Reference","previous_headings":"","what":"Fabric intensity and shape indices — fabric_indexes","title":"Fabric intensity and shape indices — fabric_indexes","text":"Fabric intensity shape indices","code":""},{"path":"https://tobiste.github.io/structr/reference/fabric_indexes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fabric intensity and shape indices — fabric_indexes","text":"","code":"fabric_indexes(x)"},{"path":"https://tobiste.github.io/structr/reference/fabric_indexes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fabric intensity and shape indices — fabric_indexes","text":"x object class \"Vec3\", \"Line\", \"Plane\".","code":""},{"path":"https://tobiste.github.io/structr/reference/fabric_indexes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fabric intensity and shape indices — fabric_indexes","text":"numeric vector containing fabric shape intensity indices: P Point (Vollmer 1990). Range: (0, 1) G Girdle (Vollmer 1990). Range: (0, 1) R Random (Vollmer 1990). Range: (0, 1) B Cylindricity (Vollmer 1990). Range: (0, 1) C Cylindricity Fabric strength (Woodcock 1977). Range: (0, Inf) Cylindricity Fabric intensity (Lisle 1985). Range: (0, 5) D \"Distance\" uniformity, linear R P, R G (Vollmer 2020). Range: (0, 1). End members : uniform D = 0, girdle D = 0.5, cluster D = 1. 99% level test uniformity sample size 300 D = 0.1.","code":""},{"path":[]},{"path":"https://tobiste.github.io/structr/reference/fabric_indexes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fabric intensity and shape indices — fabric_indexes","text":"","code":"set.seed(20250411) mu <- Line(120, 50) x <- rvmf(100, mu = mu, k = 1) fabric_indexes(x) #>          P          G          R          B          C          I          D  #> 13.7165502  6.7772231 79.5062266 20.4937734  0.4980001  0.1230532 71.7398529"},{"path":"https://tobiste.github.io/structr/reference/fault-plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Add fault data to existing plot — fault-plot","title":"Add fault data to existing plot — fault-plot","text":"Add fault data existing plot","code":""},{"path":"https://tobiste.github.io/structr/reference/fault-plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add fault data to existing plot — fault-plot","text":"","code":"fault_plot(x, type = c(\"angelier\", \"hoeppner\"), ...)  hoeppner(x, pch = 1, col = \"black\", cex = 1, bg = NULL, points = TRUE, ...)  angelier(   x,   pch = 1,   lwd = 1,   lty = 1,   col = \"black\",   cex = 1,   points = TRUE,   bg = NULL,   ... )"},{"path":"https://tobiste.github.io/structr/reference/fault-plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add fault data to existing plot — fault-plot","text":"x \"Fault\" object type character. One \"angelier\" (\"Angelier plot\") \"hoeppner\" (\"Hoeppner plot\"). See details. ... arguments passed stereo_arrows() points logical. Whether lineation points (Angelier plot) poles (Hoeppner plot) added plot lty, lwd, cex, pch, col, bg plotting parameters","code":""},{"path":"https://tobiste.github.io/structr/reference/fault-plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add fault data to existing plot — fault-plot","text":"Angelier plot shows planes great circles lineations points. Fault striae plotted vectors top lineation pointing movement direction hangingwall. Easy read case homogeneous small datasets. Hoeppner plot shows planes poles lineations shown. Fault striae plotted vectors top poles pointing movement direction hangingwall. Useful case large heterogeneous datasets.","code":""},{"path":"https://tobiste.github.io/structr/reference/fault-plot.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Add fault data to existing plot — fault-plot","text":"Angelier, J. Tectonic analysis fault slip data sets, J. Geophys. Res. 89 (B7), 5835-5848 (1984) Hoeppener, R. Tektonik im Schiefergebirge. Geol Rundsch 44, 26-58 (1955). https://doi.org/10.1007/BF01802903","code":""},{"path":[]},{"path":"https://tobiste.github.io/structr/reference/fault-plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add fault data to existing plot — fault-plot","text":"","code":"f <- Fault(   c(\"a\" = 120, \"b\" = 125, \"c\" = 100),   c(60, 62, 50),   c(110, 25, 30),   c(58, 9, 23),   c(1, -1, 1) )  stereoplot(title = \"Angelier plot\") angelier(f, col = 1:nrow(f), pch = 16, scale = 0.1)   stereoplot(title = \"Hoeppner plot\") hoeppner(f, col = 1:nrow(f), cex = 1, scale = 0.1, points = FALSE)"},{"path":"https://tobiste.github.io/structr/reference/fault-tensor.html","id":null,"dir":"Reference","previous_headings":"","what":"Fault displacement tensor — fault-tensor","title":"Fault displacement tensor — fault-tensor","text":"Creates fault displacement tensor displacement components. dip direction know, tensor rotated geographic reference frame.","code":""},{"path":"https://tobiste.github.io/structr/reference/fault-tensor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fault displacement tensor — fault-tensor","text":"","code":"fault_tensor(h, s, v, dip_direction = NULL)  fault_tensor_decomposition(ftensor, dip_direction = NULL)"},{"path":"https://tobiste.github.io/structr/reference/fault-tensor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fault displacement tensor — fault-tensor","text":"h, s, v numeric. heave, strike-slip, vertical throw displacement dip_direction (optional) dip direction degrees. ftensor Fault displacement tensor. 3x3 matrix. NULL, fault tensor given fault displacement coordinates. Otherwise, tensor geographic reference frame.","code":""},{"path":"https://tobiste.github.io/structr/reference/fault-tensor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fault displacement tensor — fault-tensor","text":"fault_tensor() returns 3x3 matrix class \"ftensor\" containing fault displacement tensor. fault_tensor_analysis() returns list containing principal fault displacement tensor fault orientation.","code":""},{"path":"https://tobiste.github.io/structr/reference/fault-tensor.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fault displacement tensor — fault-tensor","text":"x axis tensor = heave, y = strike slip, z = vertical throw (positive thrusting, negative normal faulting) principal fault displacement tensor. can rotated fault plane orientation retrieve slip components rake. fault displacement tensor gives displacements directions following properties: square root tensor's trace (.e. sum diagonal elements) equals net slip fault plane. determinant tensor relates volumetric strain : det(F) - 1, (fault_tensor_decomposition()) retrieves principal fault displacement tensor using Singular Value Decomposition Matrix fault orientation dip direction known. orientation net-slip vector lineation component fault orientation.","code":""},{"path":"https://tobiste.github.io/structr/reference/fault-tensor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fault displacement tensor — fault-tensor","text":"","code":"A_princ <- fault_tensor(s = 2, v = -5, h = 3) print(A_princ) #>      [,1] [,2] [,3] #> [1,]    3    0    0 #> [2,]    0    2    0 #> [3,]    0    0   -5 #> attr(,\"class\") #> [1] \"matrix\"  \"array\"   \"ftensor\" det(A_princ) #> [1] -30  A_geo <- fault_tensor(s = 2, v = -5, h = 3, dip_direction = 45) print(A_geo) #>         [,1]      [,2] [,3] #> [1,] 2.12132  1.414214    0 #> [2,] 2.12132 -1.414214    0 #> [3,] 0.00000  0.000000   -5 #> attr(,\"class\") #> [1] \"matrix\"  \"array\"   \"ftensor\" det(A_geo) #> [1] 30  fault_tensor_decomposition(A_geo, dip_direction = 45) #> $displacements #>           dip    delta     rake verticalthrow horizontalthrow heave  dipslip #> [1,] 300.9638 56.30993 71.06818            -5        3.605551     3 5.830952 #>      strikeslip  netslip #> [1,]          2 6.164414 #>  #> $fault #> Fault object (n = 1): #> dip_direction           dip       azimuth        plunge         sense  #>      45.00000     300.96376     258.69007      54.20424      -1.00000  #>  #> $strain_tensor #>      [,1] [,2] [,3] #> [1,]  3.0 -1.5 -1.5 #> [2,] -1.0  1.0 -1.0 #> [3,]  2.5  2.5 15.0 #>  #> $volumetric_strain #> [1] 19 #>  #> $shear_strain #> [1] 5.196152 #>"},{"path":"https://tobiste.github.io/structr/reference/fault_analysis.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple fault analysis — fault_analysis","title":"Simple fault analysis — fault_analysis","text":"Calculates PT-axes, kinematic plane (M), dihedra separation plane (d)","code":""},{"path":"https://tobiste.github.io/structr/reference/fault_analysis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple fault analysis — fault_analysis","text":"","code":"fault_analysis(x, ptangle = 90)"},{"path":"https://tobiste.github.io/structr/reference/fault_analysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple fault analysis — fault_analysis","text":"x object class \"Fault\" ptangle numeric. angle P T axes degrees (90° default).","code":""},{"path":"https://tobiste.github.io/structr/reference/fault_analysis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simple fault analysis — fault_analysis","text":"list","code":""},{"path":"https://tobiste.github.io/structr/reference/fault_analysis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simple fault analysis — fault_analysis","text":"","code":"f <- Fault(c(120, 120, 100), c(60, 60, 50), c(110, 25, 30), c(58, 9, 23), c(1, -1, 1)) fault_analysis(f) #> $p #> Line object (n = 3): #>       azimuth   plunge #> [1,] 314.9694 75.19695 #> [2,] 248.4032 15.30354 #> [3,] 342.4517 46.65113 #>  #> $t #> Line object (n = 3): #>       azimuth   plunge #> [1,] 116.2068 14.04837 #> [2,] 345.9417 25.61490 #> [3,] 241.3308 10.31892 #>  #> $m #> Plane object (n = 3): #>      dip_direction      dip #> [1,]      27.35344 85.42739 #> [2,]     310.64119 30.43222 #> [3,]     322.06010 48.49732 #>  #> $d #> Plane object (n = 3): #>      dip_direction      dip #> [1,]      289.7677 31.20915 #> [2,]      208.8622 83.16168 #> [3,]      210.2233 67.19865 #>"},{"path":"https://tobiste.github.io/structr/reference/fault_displacements.html","id":null,"dir":"Reference","previous_headings":"","what":"Fault displacement components — fault_displacements","title":"Fault displacement components — fault_displacements","text":"Calculate fault displacement (least three) components fault displacement system","code":""},{"path":"https://tobiste.github.io/structr/reference/fault_displacements.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fault displacement components — fault_displacements","text":"","code":"fault_displacements(   dip = NULL,   delta = NULL,   rake = NULL,   verticalthrow = NULL,   dipslip = NULL,   heave = NULL,   netslip = NULL,   horizontalthrow = NULL,   strikeslip = NULL )"},{"path":"https://tobiste.github.io/structr/reference/fault_displacements.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fault displacement components — fault_displacements","text":"dip fault's dip angle (degrees) delta angle horizontal displacement vector fault's strike (degrees) rake (degrees) verticalthrow vertical throw dipslip dip slip component heave apparent horizontal offset perpendicular strike netslip offset fault plane parallel fault's motion direction horizontalthrow apparent horizontal offset parallel fault's motion direction strikeslip strike-slip component","code":""},{"path":"https://tobiste.github.io/structr/reference/fault_displacements.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fault displacement components — fault_displacements","text":"array","code":""},{"path":"https://tobiste.github.io/structr/reference/fault_displacements.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fault displacement components — fault_displacements","text":"see vignette description fault displacement components","code":""},{"path":"https://tobiste.github.io/structr/reference/fault_displacements.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fault displacement components — fault_displacements","text":"","code":"if (FALSE) { # \\dontrun{ fault_displacements(strikeslip = 2, verticalthrow = -5, heave = 3) } # }"},{"path":"https://tobiste.github.io/structr/reference/fault_from_rake.html","id":null,"dir":"Reference","previous_headings":"","what":"Fault from plane and rake — Fault_from_rake","title":"Fault from plane and rake — Fault_from_rake","text":"Fault plane rake","code":""},{"path":"https://tobiste.github.io/structr/reference/fault_from_rake.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fault from plane and rake — Fault_from_rake","text":"","code":"Fault_from_rake(p, rake, ...)"},{"path":"https://tobiste.github.io/structr/reference/fault_from_rake.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fault from plane and rake — Fault_from_rake","text":"p object class \"Plane\" rake Angle degrees range  −180° 180° ... optional arguments passed Fault()","code":""},{"path":"https://tobiste.github.io/structr/reference/fault_from_rake.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fault from plane and rake — Fault_from_rake","text":"\"Fault\" object","code":""},{"path":"https://tobiste.github.io/structr/reference/fault_from_rake.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fault from plane and rake — Fault_from_rake","text":"Rake used describe direction fault motion respect strike (measured anticlockwise horizontal, positive; values −180° 180°): left-lateral strike slip: rake near 0° right-lateral strike slip: rake near 180° normal: rake near −90° reverse/thrust: rake near +90°","code":""},{"path":"https://tobiste.github.io/structr/reference/fault_from_rake.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fault from plane and rake — Fault_from_rake","text":"","code":"fr <- Fault_from_rake(Plane(c(120, 120, 100), c(60, 60, 50)), c(84.7202, -10, 30)) plot(fr, col = 1:3)   fr2 <- Fault_from_rake(Plane(c(90, 90, 90), c(80, 40, 10)), c(10, 20, 90)) plot(fr2, col = 1:3)"},{"path":"https://tobiste.github.io/structr/reference/fisher_ftest.html","id":null,"dir":"Reference","previous_headings":"","what":"Test of mean orientations — fisher_ftest","title":"Test of mean orientations — fisher_ftest","text":"Test null-hypothesis samples drawn Fisher population.","code":""},{"path":"https://tobiste.github.io/structr/reference/fisher_ftest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test of mean orientations — fisher_ftest","text":"","code":"fisher_ftest(x, y, alpha = 0.05, na.rm = TRUE)"},{"path":"https://tobiste.github.io/structr/reference/fisher_ftest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test of mean orientations — fisher_ftest","text":"x, y objects class \"Vec3\", \"Line\", \"Plane\". alpha numeric. Significance level confidence angle (default 0.05 95% confidence angle). na.rm logical. Whether NA values removed computation proceeds.","code":""},{"path":"https://tobiste.github.io/structr/reference/fisher_ftest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test of mean orientations — fisher_ftest","text":"list indicating F-statistic p-value.","code":""},{"path":"https://tobiste.github.io/structr/reference/fisher_ftest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test of mean orientations — fisher_ftest","text":"","code":"set.seed(20250411) x <- rvmf(100, mu = Line(120, 50), k = 20) y <- rvmf(100, mu = Line(180, 45), k = 20)  stereoplot() stereo_point(x, col = 1) stereo_point(y, col = 2)   fisher_ftest(x, y) #> Reject null-hypothesis #>    F stat   p-value  #> 264.17684   3.01851"},{"path":"https://tobiste.github.io/structr/reference/fisher_statistics.html","id":null,"dir":"Reference","previous_headings":"","what":"Fisher's statistics — fisher_statistics","title":"Fisher's statistics — fisher_statistics","text":"Estimates concentration parameter, angular standard deviation, confidence limit.","code":""},{"path":"https://tobiste.github.io/structr/reference/fisher_statistics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fisher's statistics — fisher_statistics","text":"","code":"fisher_statistics(x, w = NULL, conf.level = 0.95, na.rm = TRUE)"},{"path":"https://tobiste.github.io/structr/reference/fisher_statistics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fisher's statistics — fisher_statistics","text":"x object class \"Vec3\", \"Line\", \"Plane\". w numeric. Optional weights observation. conf.level numeric. Level confidence. na.rm logical. Whether NA values removed computation proceeds.","code":""},{"path":"https://tobiste.github.io/structr/reference/fisher_statistics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fisher's statistics — fisher_statistics","text":"list, \"k\" estimated concentration parameter \\(\\kappa\\) von Mises-Fisher distribution \"csd\" estimated angular standard deviation enclosing 63% orientation data. Angle degrees x spherical object, raidan otherwise. \"alpha\" Confidence limit given conf.level. Angle degrees x spherical object, raidan otherwise.","code":""},{"path":"https://tobiste.github.io/structr/reference/fisher_statistics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fisher's statistics — fisher_statistics","text":"","code":"set.seed(20250411) x <- rvmf(100, mu = Line(120, 50), k = 5) fisher_statistics(x) #> $k #> [1] 4.416173 #>  #> $csd #> [1] 38.54446 #>  #> $csd_2s #> [1] 66.62006 #>  #> $alpha #> [1] 7.640117 #>"},{"path":"https://tobiste.github.io/structr/reference/flinn_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Flinn diagram — flinn_plot","title":"Flinn diagram — flinn_plot","text":"Flinn diagram","code":""},{"path":"https://tobiste.github.io/structr/reference/flinn_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flinn diagram — flinn_plot","text":"","code":"flinn_plot(R_XY, R_YZ, main = \"Flinn diagram\", R.max = NULL, log = FALSE, ...)"},{"path":"https://tobiste.github.io/structr/reference/flinn_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flinn diagram — flinn_plot","text":"R_XY ratio maximum strain intermediate strain R_YZ ratio intermediate strain minimum strain main character. main title (top). R.max numeric. Maximum aspect ratio scaling. log logical. Whether axes logarithmic scale. ... plotting arguments passed graphics::points()","code":""},{"path":"https://tobiste.github.io/structr/reference/flinn_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flinn diagram — flinn_plot","text":"plot stored object, multiplication factors X, Y Z.","code":""},{"path":"https://tobiste.github.io/structr/reference/flinn_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flinn diagram — flinn_plot","text":"","code":"data(holst) R_XY <- holst[, \"R_XY\"] R_YZ <- holst[, \"R_YZ\"] flinn_plot(R_XY, R_YZ, log = FALSE, col = \"#B63679\", pch = 16)  flinn_plot(R_XY, R_YZ, log = TRUE, col = \"#B63679\", pch = 16)"},{"path":"https://tobiste.github.io/structr/reference/geodesic-line.html","id":null,"dir":"Reference","previous_headings":"","what":"The Frechet (geodesic \\(L^2\\)) mean of a set of lines — geodesic-line","title":"The Frechet (geodesic \\(L^2\\)) mean of a set of lines — geodesic-line","text":"iterative algorithm computing Frechet mean — line minimizes Frechet variance. iterations continue error squared epsilon achieved steps iterations used. Try multiple seeds, improve chances finding global optimum.","code":""},{"path":"https://tobiste.github.io/structr/reference/geodesic-line.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Frechet (geodesic \\(L^2\\)) mean of a set of lines — geodesic-line","text":"","code":"geodesic_mean_line(x, ...)  geodesic_var_line(x, ...)  geodesic_meanvariance_line(x, seeds = 5L, steps = 100L)"},{"path":"https://tobiste.github.io/structr/reference/geodesic-line.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"The Frechet (geodesic \\(L^2\\)) mean of a set of lines — geodesic-line","text":"lineMeanVariance geologyGeometry (J.R. Davis)","code":""},{"path":"https://tobiste.github.io/structr/reference/geodesic-line.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Frechet (geodesic \\(L^2\\)) mean of a set of lines — geodesic-line","text":"x object class \"Vec3\", \"Line\", \"Plane\" ... parameters passed geodesic_meanvariance_line() seeds positive integer. many x try seeds steps positive integer. Bound many iterations use.","code":""},{"path":"https://tobiste.github.io/structr/reference/geodesic-line.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Frechet (geodesic \\(L^2\\)) mean of a set of lines — geodesic-line","text":"geodesic_meanvariance_line returns list consisting $variance (numeric), $mean (line), $error (integer) $min.eigenvalue (numeric). geodesic_mean_line geodesic_var_line convenience wrapper return mean variance, respectively.","code":""},{"path":"https://tobiste.github.io/structr/reference/geodesic-line.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Frechet (geodesic \\(L^2\\)) mean of a set of lines — geodesic-line","text":"Error 0 min.eigenvalue positive. Otherwise problem optimization. error non-zero, try increasing steps.","code":""},{"path":"https://tobiste.github.io/structr/reference/geodesic-line.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Frechet (geodesic \\(L^2\\)) mean of a set of lines — geodesic-line","text":"Davis, J. R., & Titus, S. J. (2017). Modern methods analysis three-dimensional orientational data. Journal Structural Geology, 96, 65–89. https://doi.org/10.1016/j.jsg.2017.01.002","code":""},{"path":[]},{"path":"https://tobiste.github.io/structr/reference/geodesic-line.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Frechet (geodesic \\(L^2\\)) mean of a set of lines — geodesic-line","text":"","code":"geodesic_meanvariance_line(example_lines) #> $variance #> [1] 0.06118261 #>  #> $mean #> Line object (n = 1): #>  azimuth   plunge  #> 69.64016 14.87899  #>  #> $error #> [1] 0 #>  #> $min.eigenvalue #> [1] 0 #>  geodesic_mean_line(example_lines) #> Line object (n = 1): #>  azimuth   plunge  #> 69.63944 14.87954  geodesic_var_line(example_lines) #> [1] 0.06118261"},{"path":"https://tobiste.github.io/structr/reference/geodesic-mean.html","id":null,"dir":"Reference","previous_headings":"","what":"The Frechet (geodesic \\(L^2\\)) mean — geodesic-mean","title":"The Frechet (geodesic \\(L^2\\)) mean — geodesic-mean","text":"iterative algorithm computing Frechet mean, .e. vector minimizes Frechet variance.","code":""},{"path":"https://tobiste.github.io/structr/reference/geodesic-mean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Frechet (geodesic \\(L^2\\)) mean — geodesic-mean","text":"","code":"geodesic_mean(x, ...)  geodesic_var(x, ...)"},{"path":"https://tobiste.github.io/structr/reference/geodesic-mean.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"The Frechet (geodesic \\(L^2\\)) mean — geodesic-mean","text":"geologyGeometry (J.R. Davis)","code":""},{"path":"https://tobiste.github.io/structr/reference/geodesic-mean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Frechet (geodesic \\(L^2\\)) mean — geodesic-mean","text":"x object class \"Vec3\", \"Line\", \"Plane\", \"Pair\", \"Fault\". ... parameters passed geodesic_meanvariance_line() (x Vec3, Line Plane) geodesic_mean_pair() (x Pair Fault).","code":""},{"path":"https://tobiste.github.io/structr/reference/geodesic-mean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Frechet (geodesic \\(L^2\\)) mean — geodesic-mean","text":"geodesic_mean returns mean vector object class x. geodesic_var returns variance numeric number.","code":""},{"path":"https://tobiste.github.io/structr/reference/geodesic-mean.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Frechet (geodesic \\(L^2\\)) mean — geodesic-mean","text":"Davis, J. R., & Titus, S. J. (2017). Modern methods analysis three-dimensional orientational data. Journal Structural Geology, 96, 65–89. https://doi.org/10.1016/j.jsg.2017.01.002","code":""},{"path":[]},{"path":"https://tobiste.github.io/structr/reference/geodesic-mean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Frechet (geodesic \\(L^2\\)) mean — geodesic-mean","text":"","code":"geodesic_mean(example_planes) #> Plane object (n = 1): #> dip_direction           dip  #>      345.9172       75.3472  geodesic_var(example_planes) #> [1] 0.2656372"},{"path":"https://tobiste.github.io/structr/reference/ggMohr.html","id":null,"dir":"Reference","previous_headings":"","what":"Mohr Circle plot — ggMohr","title":"Mohr Circle plot — ggMohr","text":"Plots Mohr Circle diagram using ggplot functionality.","code":""},{"path":"https://tobiste.github.io/structr/reference/ggMohr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mohr Circle plot — ggMohr","text":"","code":"ggMohr(   sigma1,   sigma2,   sigma3 = NULL,   coulomb = c(70, 0.6),   sliding = 0.81,   units = \"MPa\",   fill = \"gray\",   alpha = 0.5,   ... )"},{"path":"https://tobiste.github.io/structr/reference/ggMohr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mohr Circle plot — ggMohr","text":"sigma1, sigma2, sigma3 numeric. Magnitudes major, intermediate, minor principal stresses. two principal stresses given, one Mohr Circle drawn, otherwise three. coulomb numeric 2 element vector. Coulomb criterion containing cohesion coefficient sliding: (c(70, 0.6)) sliding Sliding criteria (0.81 default) units units sigma1, sigma2, sigma3 cohesion (\"MPa\" default) fill fill color Mohr circle spanned sigma1 sigma3 alpha opacity Mohr circle spanned sigma1 sigma3 ... optional parameters passed ggforce::geom_circle()","code":""},{"path":"https://tobiste.github.io/structr/reference/ggMohr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Mohr Circle plot — ggMohr","text":"subcaption gives mean stress \\(\\sigma_m\\), differential stress \\(\\sigma_d\\), fracture angles \\(\\theta_f\\) \\(\\alpha_f = 90 - \\theta_f\\)","code":""},{"path":[]},{"path":"https://tobiste.github.io/structr/reference/ggMohr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mohr Circle plot — ggMohr","text":"","code":"ggMohr(1025, 450, 250)"},{"path":"https://tobiste.github.io/structr/reference/ggframe.html","id":null,"dir":"Reference","previous_headings":"","what":"Stereoplot Perimeter — ggframe","title":"Stereoplot Perimeter — ggframe","text":"Adds frame stereographic projection","code":""},{"path":"https://tobiste.github.io/structr/reference/ggframe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stereoplot Perimeter — ggframe","text":"","code":"ggframe(n = 10000, color = \"black\", fill = NA, lwd = 1, ...)"},{"path":"https://tobiste.github.io/structr/reference/ggframe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stereoplot Perimeter — ggframe","text":"n integer. Resolution line. color, fill, lwd Graphical parameters ... optional graphical parameters passed ggplot2::geom_polygon()","code":""},{"path":"https://tobiste.github.io/structr/reference/ggstereo.html","id":null,"dir":"Reference","previous_headings":"","what":"Stereoplot using ggplot — ggstereo","title":"Stereoplot using ggplot — ggstereo","text":"Stereoplot using ggplot","code":""},{"path":"https://tobiste.github.io/structr/reference/ggstereo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stereoplot using ggplot — ggstereo","text":"","code":"ggstereo(   data = NULL,   mapping = aes(),   earea = TRUE,   centercross = TRUE,   grid = FALSE,   grid.spacing = 10,   grid.rot = 0,   ... )"},{"path":"https://tobiste.github.io/structr/reference/ggstereo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stereoplot using ggplot — ggstereo","text":"data Default dataset use plot. already data.frame, converted one ggplot2::fortify(). specified, must supplied layer added plot. mapping Default list aesthetic mappings use plot. specified, must supplied layer added plot. earea logical. Whether projection equal-area (\"Schmidt net\") (TRUE, default), equal-angle (\"Wulff net\") (FALSE). centercross logical. Whether center cross added. grid logical. Whether grid added. grid.spacing numeric. Grid spacing degree grid.rot numeric. Angle (degrees) rotate grid. ... argument passed ggplot2::geom_polygon()","code":""},{"path":"https://tobiste.github.io/structr/reference/ggstereo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stereoplot using ggplot — ggstereo","text":"ggplot","code":""},{"path":"https://tobiste.github.io/structr/reference/ggstereo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stereoplot using ggplot — ggstereo","text":"","code":"if (require(\"mapproj\")) {   test_data <- rbind(     rvmf(100, mu = Line(90, 45), k = 10),     rvmf(50, mu = Line(0, 0), k = 20)   )    ggstereo(grid = TRUE) +     ggplot2::geom_point(data = gg(test_data), ggplot2::aes(x = x, y = y))    ggstereo(earea = FALSE, centercross = TRUE) +     ggplot2::geom_point(data = gg(test_data), ggplot2::aes(x = x, y = y)) } #> Loading required package: mapproj #> Loading required package: maps"},{"path":"https://tobiste.github.io/structr/reference/ggstereocontour.html","id":null,"dir":"Reference","previous_headings":"","what":"Stereoplot contouring using ggplot — ggstereocontour","title":"Stereoplot contouring using ggplot — ggstereocontour","text":"Stereoplot contouring using ggplot","code":""},{"path":"https://tobiste.github.io/structr/reference/ggstereocontour.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stereoplot contouring using ggplot — ggstereocontour","text":"","code":"geom_contour_stereo(   data,   ngrid = 200,   hw = NULL,   optimal_bw = c(\"cross\", \"rot\"),   norm = FALSE,   threshold = 0,   ... )  geom_contourf_stereo(   data,   ngrid = 200,   hw = NULL,   optimal_bw = c(\"cross\", \"rot\"),   norm = FALSE,   smooth = FALSE,   threshold = 0,   ... )"},{"path":"https://tobiste.github.io/structr/reference/ggstereocontour.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stereoplot contouring using ggplot — ggstereocontour","text":"data Default dataset use plot. already data.frame, converted one ggplot2::fortify(). specified, must supplied layer added plot. ngrid integer. Resolution density calculation. hw numeric. Kernel bandwidth degree. optimal_bw character. Calculates optimal kernel bandwidth using cross-validation algorithm ('cross') rule--thumb ('rot') suggested Garcia-Portugues (2013). Ignored hw specified. norm logical. densities normalized? threshold numeric. Cut-low densities. ... arguments passed ggplot2::geom_contour(), ggplot2::geom_contour_filled(), ggplot2::geom_tile() smooth logical. Whether ggplot2::geom_tile() used plotting.","code":""},{"path":"https://tobiste.github.io/structr/reference/ggstereocontour.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stereoplot contouring using ggplot — ggstereocontour","text":"ggplot","code":""},{"path":"https://tobiste.github.io/structr/reference/ggstereocontour.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Stereoplot contouring using ggplot — ggstereocontour","text":"Garcia Portugues, E. (2013). Exact risk improvement bandwidth selectors kernel density estimation directional data. Electronic Journal Statistics, 7, 1655-1685.","code":""},{"path":"https://tobiste.github.io/structr/reference/ggstereocontour.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stereoplot contouring using ggplot — ggstereocontour","text":"","code":"if (require(\"mapproj\")) {   test_data <- rbind(     rvmf(100, mu = Line(90, 45), k = 10),     rvmf(50, mu = Line(0, 0), k = 20)   )    ggstereo() +     geom_contourf_stereo(gg(test_data)) +     ggplot2::scale_fill_viridis_d(option = \"A\") +     # guides(fill = guide_colorsteps(barheight = unit(8, \"cm\"), show.limits = TRUE)) +     geom_contour_stereo(gg(test_data), color = \"grey\") +     ggplot2::geom_point(data = gg(test_data), ggplot2::aes(x = x, y = y), color = \"lightgrey\") +     ggframe()    ggstereo() +     geom_contourf_stereo(gg(test_data), norm = TRUE, bins = 50, threshold = .1) +     ggplot2::scale_fill_viridis_d(option = \"A\") } #> Warning: Contour data has duplicated x, y coordinates. #> ℹ 19800 duplicated rows have been dropped. #> Warning: Removed 11663 rows containing non-finite outside the scale range #> (`stat_contour_filled()`)."},{"path":"https://tobiste.github.io/structr/reference/gradient.html","id":null,"dir":"Reference","previous_headings":"","what":"Velocity gradient and Deformation gradient tensors — gradient","title":"Velocity gradient and Deformation gradient tensors — gradient","text":"Calculates velocity gradient tensor matrix logarithm  deformation gradient tensor divided given time, deformation gradient tensor accumulated time.","code":""},{"path":"https://tobiste.github.io/structr/reference/gradient.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Velocity gradient and Deformation gradient tensors — gradient","text":"","code":"velgrad_from_defgrad(R, time = 1)  defgrad_from_velgrad(V, time = 1, steps = 1)"},{"path":"https://tobiste.github.io/structr/reference/gradient.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Velocity gradient and Deformation gradient tensors — gradient","text":"R 3x3 matrix. Deformation gradient tensor. time numeric. Total time (default 1) V 3x3 matrix. Velocity gradient tensor. steps numeric. Time increments (default 1)","code":""},{"path":"https://tobiste.github.io/structr/reference/gradient.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Velocity gradient and Deformation gradient tensors — gradient","text":"3x3 matrix. steps > 1, list matrices returned.","code":""},{"path":"https://tobiste.github.io/structr/reference/gradient.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Velocity gradient and Deformation gradient tensors — gradient","text":"","code":"D <- defgrad_from_comp(xx = 2, xy = 1, zz = 0.5) L <- velgrad_from_defgrad(D, time = 10) L #>            [,1]       [,2]        [,3] #> [1,] 0.06931472 0.06931472  0.00000000 #> [2,] 0.00000000 0.00000000  0.00000000 #> [3,] 0.00000000 0.00000000 -0.06931472 defgrad_from_velgrad(L, time = 10, steps = 2) #> $`0` #>      [,1] [,2] [,3] #> [1,]    1    0    0 #> [2,]    0    1    0 #> [3,]    0    0    1 #> attr(,\"class\") #> [1] \"defgrad\" #>  #> $`2` #>          [,1]      [,2]      [,3] #> [1,] 1.148698 0.1486984 0.0000000 #> [2,] 0.000000 1.0000000 0.0000000 #> [3,] 0.000000 0.0000000 0.8705506 #> attr(,\"class\") #> [1] \"defgrad\" #>  #> $`4` #>          [,1]      [,2]      [,3] #> [1,] 1.319508 0.3195079 0.0000000 #> [2,] 0.000000 1.0000000 0.0000000 #> [3,] 0.000000 0.0000000 0.7578583 #> attr(,\"class\") #> [1] \"defgrad\" #>  #> $`6` #>          [,1]      [,2]     [,3] #> [1,] 1.515717 0.5157166 0.000000 #> [2,] 0.000000 1.0000000 0.000000 #> [3,] 0.000000 0.0000000 0.659754 #> attr(,\"class\") #> [1] \"defgrad\" #>  #> $`8` #>          [,1]      [,2]      [,3] #> [1,] 1.741101 0.7411011 0.0000000 #> [2,] 0.000000 1.0000000 0.0000000 #> [3,] 0.000000 0.0000000 0.5743492 #> attr(,\"class\") #> [1] \"defgrad\" #>  #> $`10` #>      [,1] [,2] [,3] #> [1,]    2    1  0.0 #> [2,]    0    1  0.0 #> [3,]    0    0  0.5 #> attr(,\"class\") #> [1] \"defgrad\" #>"},{"path":"https://tobiste.github.io/structr/reference/gray_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Example data from Gray et al. 1980 to find best small and great circle — gray_example","title":"Example data from Gray et al. 1980 to find best small and great circle — gray_example","text":"example data set","code":""},{"path":"https://tobiste.github.io/structr/reference/gray_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example data from Gray et al. 1980 to find best small and great circle — gray_example","text":"","code":"data('gray_example')"},{"path":"https://tobiste.github.io/structr/reference/gray_example.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example data from Gray et al. 1980 to find best small and great circle — gray_example","text":"object class data.frame","code":""},{"path":"https://tobiste.github.io/structr/reference/gray_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example data from Gray et al. 1980 to find best small and great circle — gray_example","text":"","code":"data(\"gray_example\") head(gray_example) #>   Strike Dip DipDir Facing     Type #> 1    142  58      W      L Cleavage #> 2    155  63      W      L Cleavage #> 3    166  82      W      L Cleavage #> 4    177  83      E      U Cleavage #> 5      9  68      E      U Cleavage #> 6     11  60      E      U Cleavage"},{"path":"https://tobiste.github.io/structr/reference/head-sphere.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the First or Last Parts of an Object — head-sphere","title":"Return the First or Last Parts of an Object — head-sphere","text":"Returns first last parts vector.","code":""},{"path":"https://tobiste.github.io/structr/reference/head-sphere.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the First or Last Parts of an Object — head-sphere","text":"","code":"# S3 method for class 'spherical' head(x, n = 6L, ...)  # S3 method for class 'spherical' tail(x, n = 6L, ...)"},{"path":"https://tobiste.github.io/structr/reference/head-sphere.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the First or Last Parts of an Object — head-sphere","text":"x objects class \"Vec3\", \"Line\", \"Plane\", \"Pair\", \"Fault n integer vector length dim(x) (1,     non-dimensioned objects).  logical silently coerced     integer.  Values specify indices     selected corresponding dimension (along length)     object. positive value n[] includes first/last     n[] indices dimension, negative value     excludes last/first abs(n[]), including remaining     indices. NA non-specified values (length(n) <       length(dim(x))) select indices dimension. Must     contain least one non-missing value. ... arguments passed methods.","code":""},{"path":"https://tobiste.github.io/structr/reference/head-sphere.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return the First or Last Parts of an Object — head-sphere","text":"","code":"x <- rvmf(n = 10) head(x) #> Vector (Vec3) object (n = 6): #>              x         y          z #> [1,] 0.9016009 0.3974547 -0.1707209 #> [2,] 0.7732423 0.4680730 -0.4277897 #> [3,] 0.8273097 0.3650897  0.4269287 #> [4,] 0.8536098 0.4788177  0.2051438 #> [5,] 0.1528231 0.4973021 -0.8540115 #> [6,] 0.8680537 0.2950271 -0.3993016 tail(x) #> Vector (Vec3) object (n = 6): #>              x           y          z #> [1,] 0.1528231  0.49730213 -0.8540115 #> [2,] 0.8680537  0.29502706 -0.3993016 #> [3,] 0.9325515  0.16204763  0.3226271 #> [4,] 0.7800932  0.03814777  0.6244993 #> [5,] 0.4910608 -0.82311239  0.2852109 #> [6,] 0.7289309 -0.52076667  0.4443667"},{"path":"https://tobiste.github.io/structr/reference/holst.html","id":null,"dir":"Reference","previous_headings":"","what":"3D strain data — holst","title":"3D strain data — holst","text":"Example data Holst Fossen (1987) containing 3D strain data 17 localities West Norwegian Caledonides. data gives  difference  \\(\\epsilon_1\\) \\(\\epsilon_2\\) (e1e2) \\(\\epsilon_2\\) \\(\\epsilon_3\\) (e2e3)","code":""},{"path":"https://tobiste.github.io/structr/reference/holst.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"3D strain data — holst","text":"","code":"data('holst')"},{"path":"https://tobiste.github.io/structr/reference/holst.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"3D strain data — holst","text":"object class matrix","code":""},{"path":"https://tobiste.github.io/structr/reference/holst.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"3D strain data — holst","text":"","code":"data(\"holst\") head(holst) #>          R_XY      R_YZ #> [1,] 1.030455 30.876643 #> [2,] 1.072508 27.112639 #> [3,] 1.040811 25.028120 #> [4,] 1.072508 27.938342 #> [5,] 1.150274 20.085537 #> [6,] 2.117000  9.025013"},{"path":"https://tobiste.github.io/structr/reference/hsu_fabric_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Fabric plot of Hsü (1965) — hsu_fabric_plot","title":"Fabric plot of Hsü (1965) — hsu_fabric_plot","text":"Fabric plot Hsü (1965)","code":""},{"path":"https://tobiste.github.io/structr/reference/hsu_fabric_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fabric plot of Hsü (1965) — hsu_fabric_plot","text":"","code":"hsu_fabric_plot(x, labels = NULL, add = FALSE, es.max = 3, ...)"},{"path":"https://tobiste.github.io/structr/reference/hsu_fabric_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fabric plot of Hsü (1965) — hsu_fabric_plot","text":"x object class \"Vec3\", \"Line\", \"Plane\". labels character. text labels add logical. data plotted existing plot? es.max maximum strain scaling. ... optional parameters passed hsu_plot()","code":""},{"path":"https://tobiste.github.io/structr/reference/hsu_fabric_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fabric plot of Hsü (1965) — hsu_fabric_plot","text":"plot stored object, list containing Lode parameter lode natural octahedral strain es.","code":""},{"path":"https://tobiste.github.io/structr/reference/hsu_fabric_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fabric plot of Hsü (1965) — hsu_fabric_plot","text":"","code":"set.seed(20250411) mu <- Line(120, 50) x <- rvmf(100, mu = mu, k = 1) hsu_fabric_plot(x, labels = \"x\")  set.seed(20250411) y <- rvmf(100, mu = mu, k = 20) hsu_fabric_plot(y, labels = \"y\", col = \"red\", add = TRUE)"},{"path":"https://tobiste.github.io/structr/reference/hsu_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Hsü plot — hsu_plot","title":"Hsü plot — hsu_plot","text":"3D strain diagram using Hsü (1965) method display natural octahedral strain Lode parameter.","code":""},{"path":"https://tobiste.github.io/structr/reference/hsu_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hsü plot — hsu_plot","text":"","code":"hsu_plot(R_XY, R_YZ, main = \"Hsü diagram\", es.max = NULL, ...)"},{"path":"https://tobiste.github.io/structr/reference/hsu_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hsü plot — hsu_plot","text":"R_XY ratio maximum strain intermediate strain R_YZ ratio intermediate strain minimum strain main character. main title (top). es.max maximum strain scaling. ... plotting arguments passed graphics::points()","code":""},{"path":"https://tobiste.github.io/structr/reference/hsu_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hsü plot — hsu_plot","text":"plot stored object, Lode parameter Lode natural octahedral strain es.","code":""},{"path":"https://tobiste.github.io/structr/reference/hsu_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hsü plot — hsu_plot","text":"","code":"R_XY <- holst[, \"R_XY\"] R_YZ <- holst[, \"R_YZ\"] hsu_plot(R_XY, R_YZ, col = \"#B63679\", pch = 16)"},{"path":"https://tobiste.github.io/structr/reference/hypercontour.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates densities for fabric and strain data — hypercontour","title":"Calculates densities for fabric and strain data — hypercontour","text":"Densities hyperboloidal projections geological fabric finite strain data density calculations done unit hyperboloid (Vollmer, 2018). Options given equidistant (Elliott), equal-area, stereographic, orthographic, exponential, radial projections, polar azimuthal cylindrical (cartesian, RfPhi-type) plots.","code":""},{"path":"https://tobiste.github.io/structr/reference/hypercontour.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates densities for fabric and strain data — hypercontour","text":"","code":"hypercontour(   r,   phi,   proj = c(\"eqd\", \"eqa\", \"stg\", \"ort\", \"gno\", \"lin\", \"rdl\", \"rfp\"),   normalize = TRUE,   rmax = NULL,   kappa = 40,   nnodes = 50L )"},{"path":"https://tobiste.github.io/structr/reference/hypercontour.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates densities for fabric and strain data — hypercontour","text":"r numeric. Aspect ratio deformed object (long axis / short axis) phi numeric. Orientation long axis deformed object (degrees) proj character. Projection,  'eqd' equidistant (Elliot plot), 'eqa' equal-area, 'stg' stereographic, 'ort' orthographic, 'gno' gnomonic, 'lin' exponential (linear R), 'rdl' radial, 'rfp' Rf/phi (cylindrical instead polar). normalize logical. rmax maximum R value (NULL, computed automatically) kappa smoothing parameter nnodes grid resolution. higher accurate slower, 30 good, 50 recommended final plots, default = 50.","code":""},{"path":"https://tobiste.github.io/structr/reference/hypercontour.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates densities for fabric and strain data — hypercontour","text":"list : x, y: vectors projection coordinates density grid z: density matrix points: projected data points frame: plot frame (circle square)","code":""},{"path":"https://tobiste.github.io/structr/reference/hypercontour.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculates densities for fabric and strain data — hypercontour","text":"data must comma delimited csv text file one (R, phi) pair per line, R = strain ratio (max/min), phi = orientation long (max) axis x. Contours equally spaced probability density distribution.","code":""},{"path":"https://tobiste.github.io/structr/reference/hypercontour.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculates densities for fabric and strain data — hypercontour","text":"Vollmer, F.W., 2018. Automatic contouring geological fabric finite strain data unit hyperboloid. Computers & Geosciences, https://doi.org/10.1016/j.cageo.2018.03.006","code":""},{"path":[]},{"path":"https://tobiste.github.io/structr/reference/hypercontour.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates densities for fabric and strain data — hypercontour","text":"","code":"data(ramsay) out <- hypercontour(ramsay[, \"R\"], ramsay[, \"phi\"], proj = \"rfp\") head(out$z) #>          [,1]     [,2]     [,3]     [,4]     [,5]     [,6]     [,7]     [,8] #> [1,] 114.3282 114.3282 114.3282 114.3282 114.3282 114.3282 114.3282 114.3282 #> [2,] 114.3282 114.3282 114.3282 114.3282 114.3282 114.3282 114.3282 114.3282 #> [3,] 114.3282 114.3282 114.3282 114.3282 114.3282 114.3282 114.3282 114.3282 #> [4,] 114.3282 114.3282 114.3282 114.3282 114.3282 114.3282 114.3282 114.3282 #> [5,] 114.3282 114.3282 114.3282 114.3282 114.3282 114.3282 114.3282 114.3282 #> [6,] 114.3282 114.3282 114.3282 114.3282 114.3282 114.3282 114.3282 114.3282 #>          [,9]    [,10]    [,11]    [,12]    [,13]    [,14]    [,15]    [,16] #> [1,] 114.3282 114.3282 110.3759 90.39486 71.71766 55.57557 42.31459 31.79472 #> [2,] 114.3282 114.3282 109.8026 87.77160 68.14104 51.77714 38.72344 28.62373 #> [3,] 114.3282 114.3282 109.3024 85.53477 65.15324 48.66214 35.82725 26.10478 #> [4,] 114.3282 114.3282 108.8825 83.69222 62.73330 46.17674 33.54702 24.14481 #> [5,] 114.3282 114.3282 108.5486 82.24874 60.86130 44.27499 31.81850 22.67076 #> [6,] 114.3282 114.3282 108.3055 81.20715 59.52034 42.92046 30.59254 21.62821 #>         [,17]    [,18]     [,19]    [,20]    [,21]    [,22]    [,23]    [,24] #> [1,] 23.65548 17.47228 12.838195 9.399737 6.867117 5.011499 3.656806 2.670043 #> [2,] 20.97854 15.28258 11.087781 8.024332 5.800334 4.192203 3.032234 2.196518 #> [3,] 18.88088 13.58759  9.747476 6.981120 4.997739 3.579927 2.567942 1.845867 #> [4,] 17.26551 12.29393  8.732227 6.195800 4.396479 3.122852 2.222102 1.584916 #> [5,] 16.05851 11.33230  7.980477 5.615835 3.953087 2.785899 1.966970 1.392093 #> [6,] 15.20611 10.65335  7.449226 5.205180 3.638230 2.545751 1.784362 1.253436 #>          [,25]     [,26]     [,27]     [,28]     [,29]     [,30]     [,31] #> [1,] 1.9521005 1.4298573 1.0497537 0.7727642 0.5705568 0.4226101 0.3140789 #> [2,] 1.5944958 1.1605000 0.8471758 0.6205022 0.4560938 0.3364912 0.2491959 #> [3,] 1.3303243 0.9617137 0.6976078 0.5078804 0.3711665 0.2723172 0.2005832 #> [4,] 1.1336709 0.8135197 0.5858272 0.4234234 0.3072099 0.2237553 0.1636016 #> [5,] 0.9880052 0.7034094 0.5024745 0.3601987 0.2591365 0.1871050 0.1355821 #> [6,] 0.8827435 0.6234467 0.4416521 0.3138564 0.2237583 0.1600409 0.1148352 #>           [,32]      [,33]      [,34]      [,35]      [,36]      [,37] #> [1,] 0.23422800 0.17529125 0.13164443 0.09920805 0.07501696 0.05691056 #> [2,] 0.18525429 0.13824398 0.10354882 0.07784291 0.05872303 0.04444710 #> [3,] 0.14832587 0.11010627 0.08204127 0.06135027 0.04603545 0.03465615 #> [4,] 0.12007565 0.08845769 0.06539963 0.04851867 0.03611295 0.02696240 #> [5,] 0.09859452 0.07194411 0.05267168 0.03868455 0.02849764 0.02105331 #> [6,] 0.08265803 0.05967923 0.04321583 0.03138271 0.02285115 0.01668149 #>           [,38]       [,39]       [,40]       [,41]       [,42]       [,43] #> [1,] 0.04331016 0.033058597 0.025304957 0.019421296 0.014942568 0.011523099 #> [2,] 0.03374787 0.025700094 0.019625587 0.015025319 0.011530598 0.008867948 #> [3,] 0.02616950 0.019817539 0.015047166 0.011453086 0.008737099 0.006678920 #> [4,] 0.02018894 0.015158076 0.011409500 0.008607936 0.006508213 0.004930356 #> [5,] 0.01559546 0.011581596 0.008620997 0.006431222 0.004807360 0.003600229 #> [6,] 0.01220698 0.008952946 0.006580306 0.004846054 0.003575477 0.002642576 #>            [,44]       [,45]       [,46]        [,47]        [,48]        [,49] #> [1,] 0.008904999 0.006895160 0.005348462 0.0041554596 0.0032333295 0.0025191895 #> [2,] 0.006833709 0.005275634 0.004079476 0.0031592009 0.0024497928 0.0019019611 #> [3,] 0.005115175 0.003924238 0.003015234 0.0023200216 0.0017873442 0.0013785223 #> [4,] 0.003741760 0.002844370 0.002165433 0.0016507896 0.0012600032 0.0009627936 #> [5,] 0.002700850 0.002029352 0.001527019 0.0011505596 0.0008679642 0.0006555065 #> [6,] 0.001956210 0.001450265 0.001076654 0.0008003071 0.0005955906 0.0004437218 #>             [,50] #> [1,] 0.0019651470 #> [2,] 0.0014782219 #> [3,] 0.0010642846 #> [4,] 0.0007364260 #> [5,] 0.0004955555 #> [6,] 0.0003309096"},{"path":"https://tobiste.github.io/structr/reference/inertia.html","id":null,"dir":"Reference","previous_headings":"","what":"Inertia tensor — inertia","title":"Inertia tensor — inertia","text":"Inertia tensor","code":""},{"path":"https://tobiste.github.io/structr/reference/inertia.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inertia tensor — inertia","text":"","code":"# S3 method for class 'spherical' inertia_tensor(x, w = NULL)  inertia_tensor(x, w = NULL)"},{"path":"https://tobiste.github.io/structr/reference/inertia.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inertia tensor — inertia","text":"x Object class \"Vec3\", \"Line\" \"Plane\" w numeric. weightings","code":""},{"path":"https://tobiste.github.io/structr/reference/inertia.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inertia tensor — inertia","text":"3 x 3 matrix","code":""},{"path":"https://tobiste.github.io/structr/reference/inertia.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Inertia tensor — inertia","text":"$$D = n - (x_i, y_i, z_i) (x_i, y_i, z_i)^T$$","code":""},{"path":[]},{"path":"https://tobiste.github.io/structr/reference/inertia.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inertia tensor — inertia","text":"","code":"set.seed(20250411) x <- rfb(100, mu = Line(120, 50), k = 1, A = diag(c(10, 0, 0))) inertia_tensor(x) #>           [,1]      [,2]     [,3] #> [1,]  91.41807 111.36165 104.7624 #> [2,] 111.36165  62.19023 102.3517 #> [3,] 104.76237 102.35167  46.3917"},{"path":"https://tobiste.github.io/structr/reference/lines.spherical.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Lines to a Plot — lines.spherical","title":"Add Lines to a Plot — lines.spherical","text":"Add Lines Plot","code":""},{"path":"https://tobiste.github.io/structr/reference/lines.spherical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Lines to a Plot — lines.spherical","text":"","code":"# S3 method for class 'spherical' lines(x, ang = 90, ...)"},{"path":"https://tobiste.github.io/structr/reference/lines.spherical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Lines to a Plot — lines.spherical","text":"x objects class \"Vec3\", \"Line\", \"Plane\", \"Pair\", \"Fault\". ang numeric. Conical angle degrees. ... arguments passed graphics::lines()","code":""},{"path":"https://tobiste.github.io/structr/reference/lines.spherical.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Lines to a Plot — lines.spherical","text":"","code":"set.seed(20250411) stereoplot() lines(rvmf(n = 5), ang = runif(5, 0, 90), col = 1:5)"},{"path":"https://tobiste.github.io/structr/reference/mean-pair.html","id":null,"dir":"Reference","previous_headings":"","what":"Mean orientation of a set of pairs or faults — mean-pair","title":"Mean orientation of a set of pairs or faults — mean-pair","text":"Frechet (geodesic \\(L^2\\)) mean variance pair foliations lineations","code":""},{"path":"https://tobiste.github.io/structr/reference/mean-pair.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mean orientation of a set of pairs or faults — mean-pair","text":"","code":"geodesic_mean_pair(x, group = NULL)  geodesic_var_pair(x, group = NULL)"},{"path":"https://tobiste.github.io/structr/reference/mean-pair.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mean orientation of a set of pairs or faults — mean-pair","text":"oriMeanVariance geologyGeometry (J.R. Davis)","code":""},{"path":"https://tobiste.github.io/structr/reference/mean-pair.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mean orientation of a set of pairs or faults — mean-pair","text":"x object class \"Pair\" \"Fault\" group character. Symmetry group x. One \"orthorhombic\" (line--plane symmetry, e.g. foliation-lineations, cylindrical fold orientations, triaxial ellipsoid orientations, earthquake focal mechanisms, olivine), \"triclinic\" (ray--plane symmetry, e.g. faults slip directions), \"trigonal\" (e.g. alpha-quartz), \"hexagonal\" (e.g. beta-quartz), \"trivial\" (rotations). NULL, group automatically picked based class x.","code":""},{"path":"https://tobiste.github.io/structr/reference/mean-pair.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mean orientation of a set of pairs or faults — mean-pair","text":"object class \"Pair\" \"Fault\", respectively","code":""},{"path":"https://tobiste.github.io/structr/reference/mean-pair.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Mean orientation of a set of pairs or faults — mean-pair","text":"Davis, J. R., & Titus, S. J. (2017). Modern methods analysis three-dimensional orientational data. Journal Structural Geology, 96, 65–89. https://doi.org/10.1016/j.jsg.2017.01.002","code":""},{"path":[]},{"path":"https://tobiste.github.io/structr/reference/mean-pair.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mean orientation of a set of pairs or faults — mean-pair","text":"","code":"my_fault <- Fault(   c(\"a\" = 120, \"b\" = 120, \"c\" = 100),   c(60, 60, 50),   c(110, 25, 30),   c(58, 9, 23),   c(1, -1, 1) ) geodesic_mean_pair(my_fault) #> Fault object (n = 1): #> dip_direction           dip       azimuth        plunge         sense  #>     109.11409      59.36207     131.87199      57.28751       1.00000  geodesic_var_pair(my_fault) #> [1] 0.721249"},{"path":"https://tobiste.github.io/structr/reference/mean_strain_ellipse.html","id":null,"dir":"Reference","previous_headings":"","what":"Mean strain ellipse — mean_strain_ellipse","title":"Mean strain ellipse — mean_strain_ellipse","text":"determines shape orientation strain ellipse using deformed elliptical objects strain markers. algorithm based mean shape matrix eigenvalues (Shimamoto Ikeda, 1976).","code":""},{"path":"https://tobiste.github.io/structr/reference/mean_strain_ellipse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mean strain ellipse — mean_strain_ellipse","text":"","code":"mean_strain_ellipse(r, phi, boot = TRUE, resamples = 1000, boot.values = FALSE)"},{"path":"https://tobiste.github.io/structr/reference/mean_strain_ellipse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mean strain ellipse — mean_strain_ellipse","text":"r numeric. Aspect ratio deformed object (long axis / short axis) phi numeric. Orientation long axis deformed object (degrees) boot logical. Whether 95% confidence interval bootstrapping calculated. TRUE default. resamples integer. Number bootstrap resamples (1000 default). Ignored boot = FALSE. boot.values logical. Whether bootstrapped R phi values added output. FALSE default.","code":""},{"path":"https://tobiste.github.io/structr/reference/mean_strain_ellipse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mean strain ellipse — mean_strain_ellipse","text":"list. R gives mean aspect ratio strain ellipse, phi gives orientation long axis. boot=TRUE, bootstrapped 95% confidence interval mean aspect ratio (R_CI) orientation (phi_CI) added. boot.values=TRUE, matrix containing bootstrapped R phi values added.","code":""},{"path":"https://tobiste.github.io/structr/reference/mean_strain_ellipse.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Mean strain ellipse — mean_strain_ellipse","text":"Shimamoto, T., Ikeda, Y., 1976. simple algebraic method strain estimation ellipsoidal objects. Tectonophysics 36, 315–337. doi: 10.1016/0040-1951(76)90107-4","code":""},{"path":[]},{"path":"https://tobiste.github.io/structr/reference/mean_strain_ellipse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mean strain ellipse — mean_strain_ellipse","text":"","code":"set.seed(20250411) data(ramsay) mean_strain_ellipse(ramsay[, \"R\"], ramsay[, \"phi\"]) #> $R #> [1] 1.628138 #>  #> $phi #> [1] 25.73632 #>  #> $R_CI #> [1] 1.59275 1.66359 #>  #> $phi_CI #> [1] 24.71905 26.75180 #>"},{"path":"https://tobiste.github.io/structr/reference/mean_strain_ellipse_ramsay.html","id":null,"dir":"Reference","previous_headings":"","what":"Mean strain ellipse after Ramsay (1967) — mean_strain_ellipse_ramsay","title":"Mean strain ellipse after Ramsay (1967) — mean_strain_ellipse_ramsay","text":"Mean strain ellipse Ramsay (1967)","code":""},{"path":"https://tobiste.github.io/structr/reference/mean_strain_ellipse_ramsay.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mean strain ellipse after Ramsay (1967) — mean_strain_ellipse_ramsay","text":"","code":"mean_strain_ellipse_ramsay(   r,   phi = NULL,   boot = TRUE,   resamples = 1000,   boot.values = FALSE )"},{"path":"https://tobiste.github.io/structr/reference/mean_strain_ellipse_ramsay.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mean strain ellipse after Ramsay (1967) — mean_strain_ellipse_ramsay","text":"r numeric. Aspect ratio deformed object (long axis / short axis) phi numeric. Orientation long axis deformed object (degrees) boot logical. Whether 95% confidence interval bootstrapping calculated. TRUE default. resamples integer. Number bootstrap resamples (1000 default). Ignored boot = FALSE. boot.values logical. Whether bootstrapped R phi values added output. FALSE default.","code":""},{"path":"https://tobiste.github.io/structr/reference/mean_strain_ellipse_ramsay.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mean strain ellipse after Ramsay (1967) — mean_strain_ellipse_ramsay","text":"list. R aspect ratio strain ellipse, Ri initial aspect ratio, Fl fluctuation angle (Ramsay 1967), phi mean orientation strain ellipse long axis. boot=TRUE, bootstrapped 95% confidence interval values added. boot.values=TRUE, matrix containing bootstrapped R phi values added.","code":""},{"path":"https://tobiste.github.io/structr/reference/mean_strain_ellipse_ramsay.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Mean strain ellipse after Ramsay (1967) — mean_strain_ellipse_ramsay","text":"Ramsay (1976), Folding Fracturing Rocks, McGraw-Hill Book COmpany.","code":""},{"path":[]},{"path":"https://tobiste.github.io/structr/reference/mean_strain_ellipse_ramsay.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mean strain ellipse after Ramsay (1967) — mean_strain_ellipse_ramsay","text":"","code":"data(ramsay) mean_strain_ellipse_ramsay(ramsay[, \"R\"], ramsay[, \"phi\"]) #> $R #> [1] 1.850135 #>  #> $Ri #> [1] 1.762033 #>  #> $Fl #> [1] 65.79613 #>  #> $phi #> [1] 25.83207 #>  #> $R_CI #> [1] 1.633095 1.944634 #>  #> $Ri_CI #> [1] 1.540705 1.762033 #>  #> $Fl_CI #> [1] 46.67333 65.79613 #>  #> $phi_CI #> [1] 24.86458 26.85261 #>"},{"path":"https://tobiste.github.io/structr/reference/oriHexagonalTrapezohedralGroup.html","id":null,"dir":"Reference","previous_headings":"","what":"Hexagonal trapezohedral is the point group of beta-quartz. — oriHexagonalTrapezohedralGroup","title":"Hexagonal trapezohedral is the point group of beta-quartz. — oriHexagonalTrapezohedralGroup","text":"Hexagonal trapezohedral point group beta-quartz.","code":""},{"path":"https://tobiste.github.io/structr/reference/oriHexagonalTrapezohedralGroup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hexagonal trapezohedral is the point group of beta-quartz. — oriHexagonalTrapezohedralGroup","text":"","code":"oriHexagonalTrapezohedralGroup()"},{"path":"https://tobiste.github.io/structr/reference/oriLineInPlaneGroup.html","id":null,"dir":"Reference","previous_headings":"","what":"Line-in-plane symmetry is applicable to foliation-lineations, cylindrical fold orientations, triaxial ellipsoid orientations, and earthquake focal mechanisms (and olivine). — oriLineInPlaneGroup","title":"Line-in-plane symmetry is applicable to foliation-lineations, cylindrical fold orientations, triaxial ellipsoid orientations, and earthquake focal mechanisms (and olivine). — oriLineInPlaneGroup","text":"Line--plane symmetry applicable foliation-lineations, cylindrical fold orientations, triaxial ellipsoid orientations, earthquake focal mechanisms (olivine).","code":""},{"path":"https://tobiste.github.io/structr/reference/oriLineInPlaneGroup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Line-in-plane symmetry is applicable to foliation-lineations, cylindrical fold orientations, triaxial ellipsoid orientations, and earthquake focal mechanisms (and olivine). — oriLineInPlaneGroup","text":"","code":"oriLineInPlaneGroup()"},{"path":"https://tobiste.github.io/structr/reference/oriRayInPlaneGroup.html","id":null,"dir":"Reference","previous_headings":"","what":"Ray-in-plane symmetry is applicable to faults-with-slip-directions, such as slickensides (and certain minerals). — oriRayInPlaneGroup","title":"Ray-in-plane symmetry is applicable to faults-with-slip-directions, such as slickensides (and certain minerals). — oriRayInPlaneGroup","text":"Ray--plane symmetry applicable faults--slip-directions, slickensides (certain minerals).","code":""},{"path":"https://tobiste.github.io/structr/reference/oriRayInPlaneGroup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ray-in-plane symmetry is applicable to faults-with-slip-directions, such as slickensides (and certain minerals). — oriRayInPlaneGroup","text":"","code":"oriRayInPlaneGroup()"},{"path":"https://tobiste.github.io/structr/reference/oriTrigonalTrapezohedralGroup.html","id":null,"dir":"Reference","previous_headings":"","what":"Trigonal trapezohedral is the point group of alpha-quartz. — oriTrigonalTrapezohedralGroup","title":"Trigonal trapezohedral is the point group of alpha-quartz. — oriTrigonalTrapezohedralGroup","text":"Trigonal trapezohedral point group alpha-quartz.","code":""},{"path":"https://tobiste.github.io/structr/reference/oriTrigonalTrapezohedralGroup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trigonal trapezohedral is the point group of alpha-quartz. — oriTrigonalTrapezohedralGroup","text":"","code":"oriTrigonalTrapezohedralGroup()"},{"path":"https://tobiste.github.io/structr/reference/oriTrivialGroup.html","id":null,"dir":"Reference","previous_headings":"","what":"When trivial symmetry is used, the orientations are simply rotations. This case is so important that we have separate code, in rot.R, for doing it. But let's include the trivial group, for completeness. — oriTrivialGroup","title":"When trivial symmetry is used, the orientations are simply rotations. This case is so important that we have separate code, in rot.R, for doing it. But let's include the trivial group, for completeness. — oriTrivialGroup","text":"trivial symmetry used, orientations simply rotations. case important separate code, rot.R, . include trivial group, completeness.","code":""},{"path":"https://tobiste.github.io/structr/reference/oriTrivialGroup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"When trivial symmetry is used, the orientations are simply rotations. This case is so important that we have separate code, in rot.R, for doing it. But let's include the trivial group, for completeness. — oriTrivialGroup","text":"","code":"oriTrivialGroup()"},{"path":"https://tobiste.github.io/structr/reference/ortensor.html","id":null,"dir":"Reference","previous_headings":"","what":"Orientation tensor — ortensor","title":"Orientation tensor — ortensor","text":"3D orientation tensor, characterize data distribution using eigenvalue method. See (Watson 1966, Scheidegger 1965).","code":""},{"path":"https://tobiste.github.io/structr/reference/ortensor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Orientation tensor — ortensor","text":"","code":"# S3 method for class 'spherical' ortensor(x, norm = TRUE, w = NULL)  ortensor(x, norm = TRUE, w = NULL)"},{"path":"https://tobiste.github.io/structr/reference/ortensor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Orientation tensor — ortensor","text":"x Object class \"Vec3\", \"Line\" \"Plane\" norm logical. Whether tensor normalized . w numeric. weightings","code":""},{"path":"https://tobiste.github.io/structr/reference/ortensor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Orientation tensor — ortensor","text":"matrix","code":""},{"path":"https://tobiste.github.io/structr/reference/ortensor.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Orientation tensor — ortensor","text":"normalized orientation tensor given $$D = \\frac{1}{n} (x_i, y_i, z_i) (x_i, y_i, z_i)^T$$ n = 1","code":""},{"path":[]},{"path":"https://tobiste.github.io/structr/reference/ortensor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Orientation tensor — ortensor","text":"","code":"set.seed(20250411) x <- rfb(100, mu = Line(120, 50), k = 1, A = diag(c(10, 0, 0))) ortensor(x) #>             [,1]        [,2]        [,3] #> [1,]  0.08677571 -0.11084719 -0.06088691 #> [2,] -0.11084719  0.38081365 -0.00302476 #> [3,] -0.06088691 -0.00302476  0.53241064"},{"path":"https://tobiste.github.io/structr/reference/ot_eigen.html","id":null,"dir":"Reference","previous_headings":"","what":"Eigenvalues and Eigenvectors of a Set of Vectors — ot_eigen","title":"Eigenvalues and Eigenvectors of a Set of Vectors — ot_eigen","text":"Decomposition Orientation Tensor Eigenvectors Eigenvalues","code":""},{"path":"https://tobiste.github.io/structr/reference/ot_eigen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Eigenvalues and Eigenvectors of a Set of Vectors — ot_eigen","text":"","code":"ot_eigen(x, scaled = FALSE)"},{"path":"https://tobiste.github.io/structr/reference/ot_eigen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Eigenvalues and Eigenvectors of a Set of Vectors — ot_eigen","text":"x Object class \"Vec3\", \"Line\" \"Plane\" scaled logical. Whether Eigenvectors scaled Eigenvalues (effective x Cartesian coordinates).","code":""},{"path":"https://tobiste.github.io/structr/reference/ot_eigen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Eigenvalues and Eigenvectors of a Set of Vectors — ot_eigen","text":"list containing values Eigenvalues vectors Eigenvectors coordinate system x","code":""},{"path":[]},{"path":"https://tobiste.github.io/structr/reference/ot_eigen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Eigenvalues and Eigenvectors of a Set of Vectors — ot_eigen","text":"","code":"set.seed(20250411) mu <- rvmf(n = 1) x <- rfb(100, mu = mu, k = 1, A = diag(c(10, 0, 0))) x_eigen <- ot_eigen(x) x_eigen #> eigen() decomposition #> $values #> [1] 50.541199 45.262237  4.196564 #>  #> $vectors #> Vector (Vec3) object (n = 3): #>              x           y          z #> [1,] 0.7993535 -0.08669737 -0.5945734 #> [2,] 0.5229724  0.58762940  0.6174072 #> [3,] 0.2958612 -0.80447204  0.5150640 #>  plot(x, col = \"grey\") points(mu, col = 4) text(mu, labels = \"Mean\", col = 4, pos = 4) points(x_eigen$vectors, col = c(1, 2, 3)) text(x_eigen$vectors, col = c(1, 2, 3), labels = c(\"E1\", \"E2\", \"E3\"), pos = 4)"},{"path":"https://tobiste.github.io/structr/reference/pair_correct.html","id":null,"dir":"Reference","previous_headings":"","what":"Orthogonalization of plane and line measurement — pair_correct","title":"Orthogonalization of plane and line measurement — pair_correct","text":"line plane  rotated opposite directions half angle slip plane normal vector vector pperpendicular .","code":""},{"path":"https://tobiste.github.io/structr/reference/pair_correct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Orthogonalization of plane and line measurement — pair_correct","text":"","code":"misfit_pair(x)  correct_pair(x)"},{"path":"https://tobiste.github.io/structr/reference/pair_correct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Orthogonalization of plane and line measurement — pair_correct","text":"x object class \"Pair\" \"Fault\"","code":""},{"path":"https://tobiste.github.io/structr/reference/pair_correct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Orthogonalization of plane and line measurement — pair_correct","text":"misfit_pair returns list orthogonalized plane line measurements (3d vectors) misfit angles (radians). correct_pair returns orthogonalized vectors.","code":""},{"path":"https://tobiste.github.io/structr/reference/pair_correct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Orthogonalization of plane and line measurement — pair_correct","text":"","code":"p <- Pair(120, 60, 110, 58, correction = FALSE) misfit_pair(p) #> $fvec #> Vector (Vec3) object (n = 1): #>          x          y          z  #>  0.4306074 -0.7432627  0.5119940  #>  #> $lvec #> Vector (Vec3) object (n = 1): #>          x          y          z  #> -0.1752467  0.4876291  0.8552815  #>  #> $misfit #> [1] 0.02793105 #>   correct_pair(p) #> Pair object (n = 1): #> dip_direction           dip       azimuth        plunge  #>     120.08575      59.20326     109.76769      58.79085"},{"path":"https://tobiste.github.io/structr/reference/plot.spherical.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot spherical objects — plot.spherical","title":"Plot spherical objects — plot.spherical","text":"Plot spherical objects","code":""},{"path":"https://tobiste.github.io/structr/reference/plot.spherical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot spherical objects — plot.spherical","text":"","code":"# S3 method for class 'spherical' plot(x, upper.hem = FALSE, earea = TRUE, grid.params = list(), ...)"},{"path":"https://tobiste.github.io/structr/reference/plot.spherical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot spherical objects — plot.spherical","text":"x objects class \"Vec3\", \"Line\", \"Plane\", \"Pair\", \"Fault\". upper.hem logical. Whether projection shown upper hemisphere (TRUE) lower hemisphere (FALSE, default). earea logical. Projection, either TRUE Lambert equal-area projection (default), FALSE meridional stereographic projection. grid.params list. ... parameters passed stereo_point(), stereo_smallcircle(), stereo_greatcircle(), fault_plot()","code":""},{"path":"https://tobiste.github.io/structr/reference/plot.spherical.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot spherical objects — plot.spherical","text":"","code":"plot(Line(c(90, 80), c(10, 75)), lab = c(\"L1\", \"L2\"))  plot(Plane(120, 30), col = \"red\")  plot(Pair(120, 50, 36, 8))  plot(Fault(120, 50, 36, 8, -1))"},{"path":"https://tobiste.github.io/structr/reference/points.spherical.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Points to a Plot — points.spherical","title":"Add Points to a Plot — points.spherical","text":"Add Points Plot","code":""},{"path":"https://tobiste.github.io/structr/reference/points.spherical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Points to a Plot — points.spherical","text":"","code":"# S3 method for class 'spherical' points(x, upper.hem = FALSE, earea = TRUE, ...)"},{"path":"https://tobiste.github.io/structr/reference/points.spherical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Points to a Plot — points.spherical","text":"x objects class \"Vec3\", \"Line\", \"Plane\", \"Pair\", \"Fault\". upper.hem logical. Whether projection shown upper hemisphere (TRUE) lower hemisphere (FALSE, default). earea logical. Projection, either TRUE Lambert equal-area projection (default), FALSE meridional stereographic projection. ... arguments passed graphics::points()","code":""},{"path":"https://tobiste.github.io/structr/reference/points.spherical.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Points to a Plot — points.spherical","text":"","code":"stereoplot() points(rvmf(n = 100)) points(Plane(120, 30), col = \"red\", pch = 19)"},{"path":"https://tobiste.github.io/structr/reference/prepare-ggplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare points and lines for ggplot — prepare-ggplot","title":"Prepare points and lines for ggplot — prepare-ggplot","text":"Prepare points lines ggplot","code":""},{"path":"https://tobiste.github.io/structr/reference/prepare-ggplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare points and lines for ggplot — prepare-ggplot","text":"","code":"gg(x, ...)  ggl(x, ..., d = 90, n = 1000)"},{"path":"https://tobiste.github.io/structr/reference/prepare-ggplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare points and lines for ggplot — prepare-ggplot","text":"x objects class \"Vec3\", \"Line\", \"Plane\", \"Pair\", \"Fault\". ... <data-masking> Name-value pairs. name gives name column output. value can : vector length 1, recycled correct length. vector length current group (whole data frame ungrouped). NULL, remove column. data frame tibble, create multiple columns output. d numeric. Cone angle (small circle radius) degrees. 90 (default) produces great circles. n integer. Resolution line.","code":""},{"path":"https://tobiste.github.io/structr/reference/prepare-ggplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare points and lines for ggplot — prepare-ggplot","text":"data.frame","code":""},{"path":"https://tobiste.github.io/structr/reference/prepare-ggplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare points and lines for ggplot — prepare-ggplot","text":"","code":"if (require(\"mapproj\")) {   x <- Plane(120, 85)   ggstereo() +     ggplot2::geom_point(data = gg(x), ggplot2::aes(x, y), color = \"red\") +     ggplot2::geom_path(data = ggl(x), ggplot2::aes(x, y), color = \"red\")    x2 <- Line(120, 5)   ggstereo() +     ggplot2::geom_point(data = gg(x2), ggplot2::aes(x, y), color = \"darkgreen\") +     ggplot2::geom_path(       data = ggl(x2, d = 8),       ggplot2::aes(x, y, group = group), color = \"darkgreen\"     )    x3 <- Plane(137, 71)   ggstereo() +     ggplot2::geom_point(data = gg(x3), ggplot2::aes(x, y), color = \"darkgreen\") +     ggplot2::geom_path(       data = ggl(x3, d = 90),       ggplot2::aes(x, y, group = group), color = \"darkgreen\", lwd = 1     ) +     ggplot2::geom_path(       data = ggl(x3, d = 90 + 11),       ggplot2::aes(x, y, group = group, color = \"sde <90\")     ) +     ggplot2::geom_path(       data = ggl(x3, d = 90 - 11),       ggplot2::aes(x, y, group = group, color = \"sde >90\")     ) }"},{"path":"https://tobiste.github.io/structr/reference/projected_mean.html","id":null,"dir":"Reference","previous_headings":"","what":"Projected Mean — projected_mean","title":"Projected Mean — projected_mean","text":"Eigenvector largest eigenvalue orientation tensor","code":""},{"path":"https://tobiste.github.io/structr/reference/projected_mean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Projected Mean — projected_mean","text":"","code":"projected_mean(x)"},{"path":"https://tobiste.github.io/structr/reference/projected_mean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Projected Mean — projected_mean","text":"x Object class \"Vec3\", \"Line\" \"Plane\"","code":""},{"path":"https://tobiste.github.io/structr/reference/projected_mean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Projected Mean — projected_mean","text":"Vector coordinate system x","code":""},{"path":[]},{"path":"https://tobiste.github.io/structr/reference/projected_mean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Projected Mean — projected_mean","text":"","code":"projected_mean(example_lines) #> Line object (n = 1): #>  azimuth   plunge  #> 69.09796 14.82125"},{"path":"https://tobiste.github.io/structr/reference/ramsay.html","id":null,"dir":"Reference","previous_headings":"","what":"R/phi data — ramsay","title":"R/phi data — ramsay","text":"Example strain data Ramsay Huber 1983","code":""},{"path":"https://tobiste.github.io/structr/reference/ramsay.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R/phi data — ramsay","text":"","code":"data('ramsay')"},{"path":"https://tobiste.github.io/structr/reference/ramsay.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"R/phi data — ramsay","text":"object class matrix","code":""},{"path":"https://tobiste.github.io/structr/reference/ramsay.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"R/phi data — ramsay","text":"","code":"data(\"ramsay\") head(ramsay) #>         R   phi #> [1,] 1.24 35.96 #> [2,] 1.52 27.59 #> [3,] 1.33 36.91 #> [4,] 1.78 27.31 #> [5,] 1.51 17.73 #> [6,] 1.70 24.45"},{"path":"https://tobiste.github.io/structr/reference/rfb.html","id":null,"dir":"Reference","previous_headings":"","what":"Spherical Fisher-Bingham distribution — rfb","title":"Spherical Fisher-Bingham distribution — rfb","text":"Simulation random values spherical Fisher-Bingham distribution.","code":""},{"path":"https://tobiste.github.io/structr/reference/rfb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spherical Fisher-Bingham distribution — rfb","text":"","code":"rfb(n = 100, mu = Vec3(1, 0, 0), k = 5, A)"},{"path":"https://tobiste.github.io/structr/reference/rfb.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Spherical Fisher-Bingham distribution — rfb","text":"Adapted Directional::rfb()","code":""},{"path":"https://tobiste.github.io/structr/reference/rfb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spherical Fisher-Bingham distribution — rfb","text":"n integer. number random samples generated mu object class \"Vec3\", \"Line\" \"Plane\" k numeric. concentration parameter (\\(\\kappa\\)) symmetric matrix","code":""},{"path":[]},{"path":"https://tobiste.github.io/structr/reference/rfb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spherical Fisher-Bingham distribution — rfb","text":"","code":"set.seed(20250411) x <- rfb(100, mu = Line(120, 50), k = 5, A = diag(c(-1, 0, 1))) plot(x)"},{"path":"https://tobiste.github.io/structr/reference/rhr.html","id":null,"dir":"Reference","previous_headings":"","what":"Converts strike into dip direction using right-hand rule — rhr","title":"Converts strike into dip direction using right-hand rule — rhr","text":"Converts strike dip direction using right-hand rule","code":""},{"path":"https://tobiste.github.io/structr/reference/rhr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converts strike into dip direction using right-hand rule — rhr","text":"","code":"rhr2dd(strike)  dd2rhr(dipdirection)"},{"path":"https://tobiste.github.io/structr/reference/rhr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converts strike into dip direction using right-hand rule — rhr","text":"strike strike direction degrees dipdirection strike direction degrees","code":""},{"path":"https://tobiste.github.io/structr/reference/rkent.html","id":null,"dir":"Reference","previous_headings":"","what":"Kent distribution — rkent","title":"Kent distribution — rkent","text":"Simulation random values spherical Kent distribution.","code":""},{"path":"https://tobiste.github.io/structr/reference/rkent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Kent distribution — rkent","text":"","code":"rkent(n = 100, mu = Vec3(1, 0, 0), k = 5, b)"},{"path":"https://tobiste.github.io/structr/reference/rkent.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Kent distribution — rkent","text":"Adapted Directional::rkent()","code":""},{"path":"https://tobiste.github.io/structr/reference/rkent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Kent distribution — rkent","text":"n integer. number random samples generated mu Mean orientation. object class description \"Vec3()\", \"Line()\", \"Plane\" k numeric. concentration parameter (\\(\\kappa\\)) b numeric. \\(\\beta\\) (ellipticity): \\(0 \\leq \\beta < \\kappa\\)","code":""},{"path":[]},{"path":"https://tobiste.github.io/structr/reference/rkent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Kent distribution — rkent","text":"","code":"set.seed(20250411) x <- rkent(100, mu = Line(120, 50), k = 5, b = 1) plot(x)"},{"path":"https://tobiste.github.io/structr/reference/runif.spherical.html","id":null,"dir":"Reference","previous_headings":"","what":"Uniformly distributed vectors — runif.spherical","title":"Uniformly distributed vectors — runif.spherical","text":"Create uniformly distributed vectors using algorithm Spherical Fibonacci Spiral points sphere algorithm (John Burkardt) Golden Section Spiral points sphere.","code":""},{"path":"https://tobiste.github.io/structr/reference/runif.spherical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uniformly distributed vectors — runif.spherical","text":"","code":"runif.spherical(   n = 100,   class = c(\"Vec3\", \"Line\", \"Plane\"),   method = c(\"gss\", \"sfs\", \"rotasym\") )"},{"path":"https://tobiste.github.io/structr/reference/runif.spherical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uniformly distributed vectors — runif.spherical","text":"n integer. number random samples generated class character. Coordinate class output vectors. method character. algorithm generating uniformly distributed vectors. Either \"sfs\" \"Spherical Fibonacci Spiral points sphere\", \"gss\" \"Golden Section Spiral points sphere\", algorithm rotasym::r_unif_sphere() rotasym package.","code":""},{"path":"https://tobiste.github.io/structr/reference/runif.spherical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uniformly distributed vectors — runif.spherical","text":"object class specified \"class\" argument","code":""},{"path":"https://tobiste.github.io/structr/reference/runif.spherical.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Uniformly distributed vectors — runif.spherical","text":"\"sfs\" algorithm John Burkardt (http://people.sc.fsu.edu/~jburkardt/), \"gss  http://www.softimageblog.com/archives/115","code":""},{"path":[]},{"path":"https://tobiste.github.io/structr/reference/runif.spherical.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Uniformly distributed vectors — runif.spherical","text":"","code":"set.seed(20250411) x1 <- runif.spherical(n = 100, \"Line\", method = \"sfs\") plot(x1)   x2 <- runif.spherical(n = 100, \"Line\", method = \"gss\") plot(x2)  x3 <- runif.spherical(n = 100, \"Line\", method = \"rotasym\") plot(x3)"},{"path":"https://tobiste.github.io/structr/reference/sigma13.html","id":null,"dir":"Reference","previous_headings":"","what":"Principle stresses — sigma13","title":"Principle stresses — sigma13","text":"calculates magnitudes directions principal stresses \\(\\sigma_1\\) \\(\\sigma_3\\)","code":""},{"path":"https://tobiste.github.io/structr/reference/sigma13.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Principle stresses — sigma13","text":"","code":"sigma13(sigma_x, sigma_z, tau_xz)"},{"path":"https://tobiste.github.io/structr/reference/sigma13.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Principle stresses — sigma13","text":"sigma_x numeric. Magnitude normal stress acting horizontal direction sigma_z numeric. Magnitude normal stress acting vertical direction tau_xz numeric. Magnitude shear stress acting plane \"sigma_x\"","code":""},{"path":"https://tobiste.github.io/structr/reference/sigma13.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Principle stresses — sigma13","text":"four-element list containing \"sigma1\" magnitude major principal stress \"sigma3\" magnitude minor principal stress \"theta1\" direction major principal stress (degrees) \"theta3\" direction minor principal stress (degrees)","code":""},{"path":"https://tobiste.github.io/structr/reference/sigma13.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Principle stresses — sigma13","text":"Kyle Elmy Jim Kaklamanos","code":""},{"path":"https://tobiste.github.io/structr/reference/sigma13.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Principle stresses — sigma13","text":"","code":"sigma13(sigma_x = 80, sigma_z = 120, tau_xz = 20) #> $sigma1 #> [1] 128.2843 #>  #> $sigma3 #> [1] 71.71573 #>  #> $theta1 #> [1] 22.5 #>  #> $theta3 #> [1] 112.5 #>"},{"path":"https://tobiste.github.io/structr/reference/simongomez.html","id":null,"dir":"Reference","previous_headings":"","what":"Example data set — simongomez","title":"Example data set — simongomez","text":"example data set","code":""},{"path":"https://tobiste.github.io/structr/reference/simongomez.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example data set — simongomez","text":"","code":"data('simongomez')"},{"path":"https://tobiste.github.io/structr/reference/simongomez.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example data set — simongomez","text":"object class data.frame","code":""},{"path":"https://tobiste.github.io/structr/reference/simongomez.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example data set — simongomez","text":"","code":"data(\"simongomez\") head(simongomez) #>   id Strike Dip Dip_direction Rake Direction sense dipdir ve #> 1  1     40  63             W   13         N     S    130 -1 #> 2  2    163  86             W    3         S     D    253  1 #> 3  3     37  84             W   14         N     S    127 -1 #> 4  4     25  83             E   11         N     S    115 -1 #> 5  5     38  85             E    7         N     S    128 -1 #> 6  6    148  72             W   16         S     D    238  1"},{"path":"https://tobiste.github.io/structr/reference/slerp.html","id":null,"dir":"Reference","previous_headings":"","what":"Spherical Linear Interpolation (Slerp) — slerp","title":"Spherical Linear Interpolation (Slerp) — slerp","text":"Returns spherical linear interpolation points two vectors","code":""},{"path":"https://tobiste.github.io/structr/reference/slerp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spherical Linear Interpolation (Slerp) — slerp","text":"","code":"slerp(x0, x1, t)"},{"path":"https://tobiste.github.io/structr/reference/slerp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spherical Linear Interpolation (Slerp) — slerp","text":"x0, x1 objects class \"Vec3\", \"Line\", \"Plane\" first last points interpolated arc. t numeric. Interpolation factor(s) (t = [0, 1]).","code":""},{"path":"https://tobiste.github.io/structr/reference/slerp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Spherical Linear Interpolation (Slerp) — slerp","text":"Slerp path spherical geometry equivalent path along line segment plane; great circle spherical geodesic.","code":""},{"path":"https://tobiste.github.io/structr/reference/slerp.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Spherical Linear Interpolation (Slerp) — slerp","text":"non-unit vectors interpolation uniform.","code":""},{"path":[]},{"path":"https://tobiste.github.io/structr/reference/slerp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spherical Linear Interpolation (Slerp) — slerp","text":"","code":"x0 <- Line(120, 7) x1 <- Line(10, 13) t <- seq(0, 1, .05) xslerp <- slerp(x0, x1, t)  plot(xslerp, col = assign_col(t)) points(rbind(x0, x1))"},{"path":"https://tobiste.github.io/structr/reference/sph_cluster.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster spherical data — sph_cluster","title":"Cluster spherical data — sph_cluster","text":"Finds k groups clusters using angular distance matrix","code":""},{"path":"https://tobiste.github.io/structr/reference/sph_cluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster spherical data — sph_cluster","text":"","code":"sph_cluster(   x,   k,   method = c(\"hclust\", \"kmeans\", \"diana\", \"agnes\", \"pam\", \"clara\", \"fanny\"),   ... )"},{"path":"https://tobiste.github.io/structr/reference/sph_cluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster spherical data — sph_cluster","text":"x object class \"Vec3\", \"Line\", \"Plane\". k integer. Number desired clusters. method character. Clustering method applied. Currently implemented \"hclust\" Hierarchical Clustering using stats::hclust(), default) \"kmeans\" K-Means Clustering using stats::kmeans()) \"pam\" Partitioning Around Medoids using cluster::pam() \"agnes\" Agglomerative hierarchical clustering using cluster::agnes() \"diana\" Divisive hierarchical clustering using cluster::diana() \"clara\" Clustering Large Applications using cluster::clara() \"fanny\" Fuzzy Analysis Clustering using cluster::fanny() ... optional arguments passed cluster algorithm.","code":""},{"path":"https://tobiste.github.io/structr/reference/sph_cluster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster spherical data — sph_cluster","text":"output applied cluster function","code":""},{"path":[]},{"path":"https://tobiste.github.io/structr/reference/sph_cluster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cluster spherical data — sph_cluster","text":"","code":"set.seed(20250411) x1 <- rvmf(100, mu = Line(90, 0), k = 20) x2 <- rvmf(100, mu = Line(0, 0), k = 20) x3 <- rvmf(100, mu = Line(0, 90), k = 20) x123 <- rbind(x1, x2, x3) cl <- sph_cluster(x123, k = 3) plot(x123, col = cl$cluster)"},{"path":"https://tobiste.github.io/structr/reference/split_trailing_letters.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse measurement and direction strings — split_trailing_letters","title":"Parse measurement and direction strings — split_trailing_letters","text":"Parse measurement direction strings","code":""},{"path":"https://tobiste.github.io/structr/reference/split_trailing_letters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse measurement and direction strings — split_trailing_letters","text":"","code":"split_trailing_letters(x)"},{"path":"https://tobiste.github.io/structr/reference/split_trailing_letters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse measurement and direction strings — split_trailing_letters","text":"x character number","code":""},{"path":"https://tobiste.github.io/structr/reference/split_trailing_letters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse measurement and direction strings — split_trailing_letters","text":"list","code":""},{"path":"https://tobiste.github.io/structr/reference/split_trailing_letters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse measurement and direction strings — split_trailing_letters","text":"","code":"test <- c(\"45NW\", \"4SE\") split_trailing_letters(test) #> $measurement #> 45NW  4SE  #>   45    4  #>  #> $direction #> 45NW  4SE  #> \"NW\" \"SE\"  #>"},{"path":"https://tobiste.github.io/structr/reference/stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Statistical estimators of the distribution of a set of vectors — stats","title":"Statistical estimators of the distribution of a set of vectors — stats","text":"Statistical estimators distribution set vectors","code":""},{"path":"https://tobiste.github.io/structr/reference/stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Statistical estimators of the distribution of a set of vectors — stats","text":"","code":"sph_mean(x, na.rm = TRUE, ...)  sph_sd(x, ...)  sph_var(x, ...)  sph_confidence_angle(x, w = NULL, alpha = 0.05, na.rm = TRUE)  rdegree(x, w = NULL, na.rm = FALSE)  sd_error(x, w = NULL, na.rm = FALSE)  delta(x, w = NULL, na.rm = TRUE)  estimate_k(x, w = NULL, na.rm = FALSE)"},{"path":"https://tobiste.github.io/structr/reference/stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Statistical estimators of the distribution of a set of vectors — stats","text":"x object class \"Vec3\", \"Line\", \"Plane\". na.rm logical. Whether NA values removed computation proceeds. ... arguments passed function call w numeric. Optional weights observation. alpha numeric. Significance level confidence angle (default 0.05 95% confidence angle).","code":""},{"path":"https://tobiste.github.io/structr/reference/stats.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Statistical estimators of the distribution of a set of vectors — stats","text":"sph_mean returns spherical arithmetic mean set vectors (object class x). sph_var returns spherical variance (numeric), based resultant length (Mardia 1972). sph_sd returns spherical standard deviation (numeric) given half apical angle cone mean vector. degrees x \"Plane\" \"Line\", radians otherwise. delta returns half apical angle cone containing ~63% data (degrees x \"Plane\" \"Line\", radians otherwise). enough large sample approaches angular standard deviation (\"csd\") Fisher statistics. rdegree returns degree preferred orientation vectors, range: (0, 1). sd_error returns spherical standard error (numeric). number data less 25, print additional message, output value might good estimator. sph_confidence_angle returns half-apical angle \\(q\\) cone mean \\(\\mu\\) (degrees x \"Plane\" \"Line\", radians otherwise). \\(100(1-\\alpha)\\%\\) confidence interval given \\(\\mu \\pm q\\). estimate_k returns estimated concentration von Mises-Fisher distribution \\(\\kappa\\) (Sra, 2011).","code":""},{"path":[]},{"path":"https://tobiste.github.io/structr/reference/stats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Statistical estimators of the distribution of a set of vectors — stats","text":"","code":"set.seed(20250411) x <- rvmf(100, mu = Line(120, 50), k = 5) sph_mean(x) #> Line object (n = 1): #>   azimuth    plunge  #> 115.21007  52.67744  sph_sd(x) #> [1] 40.82336 sph_var(x) #> [1] 0.224176 delta(x) #> [1] 39.1202 rdegree(x) #> [1] -0.9844835 sd_error(x) #> [1] 4.01451 sph_confidence_angle(x) #> [1] 6.965534 estimate_k(x) #> [1] 4.673486  #' weights: x2 <- Line(c(0, 0), c(0, 90)) sph_mean(x2) #> Line object (n = 1): #> azimuth  plunge  #>       0      45  sph_mean(x2, w = c(1, 2)) #> Line object (n = 1): #>  azimuth   plunge  #>  0.00000 63.43495  sph_var(x2) #> [1] 0.2928932 sph_var(x2, w = c(1, 2)) #> [1] 0.254644"},{"path":"https://tobiste.github.io/structr/reference/stereo-pair.html","id":null,"dir":"Reference","previous_headings":"","what":"Stereographic projection of pairs — stereo-pair","title":"Stereographic projection of pairs — stereo-pair","text":"Visualization pairs (planes lines) stereographic projection.","code":""},{"path":"https://tobiste.github.io/structr/reference/stereo-pair.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stereographic projection of pairs — stereo-pair","text":"","code":"stereo_pair(   x,   pch = 16,   col = 1,   lwd = 1,   lty = 1,   lab = NULL,   cex = 1,   greatcircles = TRUE,   upper.hem = FALSE,   earea = TRUE )"},{"path":"https://tobiste.github.io/structr/reference/stereo-pair.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stereographic projection of pairs — stereo-pair","text":"x Object class \"Fault\" pch, col, lwd, lty plotting parameters planes lines lab character. text labels cex character expansion labels greatcircles logical. Whether greatcircles displayed (TRUE, default) poles planes (FALSE) upper.hem logical. Whether projection shown upper hemisphere (TRUE) lower hemisphere (FALSE, default). earea logical TRUE Lambert equal-area projection (also \"Schmidt net\"; default), FALSE meridional stereographic projection (also \"Wulff net\" \"Stereonet\").","code":""},{"path":"https://tobiste.github.io/structr/reference/stereo-pair.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Stereographic projection of pairs — stereo-pair","text":"\"Plane\" objects displayed pole plane.","code":""},{"path":"https://tobiste.github.io/structr/reference/stereo-pair.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stereographic projection of pairs — stereo-pair","text":"","code":"faults <- Fault(   c(0, 90, 180, 270),   c(80, 45, 80, 45),   c(0, 170, 180, 315),   c(80, 10, 80, 36),   c(1, -1, 0, 1) ) # stereoplot() # stereo_fault(faults, col = 1:4) # stereo_fault(faults, col =1:4, hoeppner = TRUE) # legend(\"bottomright\", c(\"normal\", \"thrust\", \"unknown\", \"normal\"), fill = 1:4)  stereoplot() stereo_pair(faults, col = 1:4)"},{"path":"https://tobiste.github.io/structr/reference/stereo_arrows.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Arrows to a Stereoplot — stereo_arrows","title":"Add Arrows to a Stereoplot — stereo_arrows","text":"quiver plot displays displacement vectors pointing direction movement.","code":""},{"path":"https://tobiste.github.io/structr/reference/stereo_arrows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Arrows to a Stereoplot — stereo_arrows","text":"","code":"stereo_arrows(   x,   sense,   scale = 0.1,   angle = 10,   length = 0.1,   upper.hem = FALSE,   earea = TRUE,   ... )"},{"path":"https://tobiste.github.io/structr/reference/stereo_arrows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Arrows to a Stereoplot — stereo_arrows","text":"x object class \"Vec3\", \"Line\", \"Plane\". sense numeric. Sense line fault plane. Either 1or -1 normal thrust offset, respectively. \"sense\" sign fault's rake (see Fault_from_rake() details). scale numeric. Scales length vector. 0.1 default angle numeric. Angle shaft arrow edge arrow head. length numeric. Length edges arrow head (inches). upper.hem logical. Whether projection shown upper hemisphere (TRUE) lower hemisphere (FALSE, default). earea logical. Projection, either TRUE Lambert equal-area projection (default), FALSE meridional stereographic projection. ... arguments passed graphics::arrows()","code":""},{"path":[]},{"path":"https://tobiste.github.io/structr/reference/stereo_arrows.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Arrows to a Stereoplot — stereo_arrows","text":"","code":"set.seed(20250411) stereoplot() p <- rvmf(n = 100) points(p, pch = 16, cex = .5) stereo_arrows(p, sense = 1, col = \"red\")"},{"path":"https://tobiste.github.io/structr/reference/stereo_cones.html","id":null,"dir":"Reference","previous_headings":"","what":"Stereographic projection of cones — stereo_cones","title":"Stereographic projection of cones — stereo_cones","text":"Visualization smallcircles greatcircles stereographic projection.","code":""},{"path":"https://tobiste.github.io/structr/reference/stereo_cones.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stereographic projection of cones — stereo_cones","text":"","code":"stereo_smallcircle(   x,   d = 90,   col = 1,   N = 1000,   upper.hem = FALSE,   earea = TRUE,   lty = 1,   lwd = 1,   BALL.radius = 1,   ... )  stereo_greatcircle(x, ...)"},{"path":"https://tobiste.github.io/structr/reference/stereo_cones.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stereographic projection of cones — stereo_cones","text":"x object class \"Vec3\", \"Line\", \"Plane\", \"Pair\", \"Fault\". d numeric. conical angle degrees. col, lty, lwd color, line type, line width parameters N integer. number points calculate upper.hem logical. Whether projection shown upper hemisphere (TRUE) lower hemisphere (FALSE, default). earea logical TRUE Lambert equal-area projection (also \"Schmidt net\"; default), FALSE meridional stereographic projection (also \"Wulff net\" \"Stereonet\"). BALL.radius numeric size sphere ... optional graphical parameters","code":""},{"path":"https://tobiste.github.io/structr/reference/stereo_cones.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stereographic projection of cones — stereo_cones","text":"","code":"stereoplot() stereo_point(Line(90, 5), lab = \"L\") stereo_smallcircle(Line(90, 5), d = 10) stereo_point(Plane(120, 30), lab = \"P\", col = \"red\") stereo_greatcircle(Plane(120, 30), col = \"red\")   stereoplot() stereo_point(Line(c(129, 90), c(30, 5)), lab = c(\"L1\", \"L2\")) stereo_smallcircle(Line(c(129, 90), c(30, 5)), d = c(10, 5), col = 1:2, lty = 1:2, lwd = 1:2)"},{"path":"https://tobiste.github.io/structr/reference/stereo_confidence.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the bootstrapped confidence ellipse — stereo_confidence","title":"Plot the bootstrapped confidence ellipse — stereo_confidence","text":"Adds ellipse marking bootstrapped confidence interval arithmetic mean existing plot","code":""},{"path":"https://tobiste.github.io/structr/reference/stereo_confidence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the bootstrapped confidence ellipse — stereo_confidence","text":"","code":"stereo_confidence(   x,   params = list(),   col = par(\"col\"),   cex = par(\"cex\"),   pch = 16,   center = TRUE,   upper.hem = FALSE,   earea = TRUE,   BALL.radius = 1,   ... )"},{"path":"https://tobiste.github.io/structr/reference/stereo_confidence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the bootstrapped confidence ellipse — stereo_confidence","text":"x Spherical object list containing output earlier call confidence_ellipse() params list. Parameters passed confidence_ellipse() col Color ellipse center pch, cex Plotting symbol size ellipse center. Ignored center FALSE. center logical. Whether ellipse's center plotted? upper.hem logical. Whether projection shown upper hemisphere (TRUE) lower hemisphere (FALSE, default). earea logical TRUE Lambert equal-area projection (also \"Schmidt net\"; default), FALSE meridional stereographic projection (also \"Wulff net\" \"Stereonet\"). BALL.radius numeric size sphere ... graphical parameters passed graphics::lines()","code":""},{"path":"https://tobiste.github.io/structr/reference/stereo_confidence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the bootstrapped confidence ellipse — stereo_confidence","text":"output confidence_ellipse()","code":""},{"path":[]},{"path":"https://tobiste.github.io/structr/reference/stereo_confidence.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the bootstrapped confidence ellipse — stereo_confidence","text":"","code":"set.seed(20250411) plot(example_lines, col = \"grey\") stereo_confidence(example_lines, params = list(n = 100, res = 100), col = \"red\")"},{"path":"https://tobiste.github.io/structr/reference/stereo_contour.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot spherical densities in a stereonet — stereo_contour","title":"Plot spherical densities in a stereonet — stereo_contour","text":"Kamb counts densities sphere. contour plots contour lines, contourf displays contour plot areas contours filled, image creates dense grid colored rectangles.","code":""},{"path":"https://tobiste.github.io/structr/reference/stereo_contour.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot spherical densities in a stereonet — stereo_contour","text":"","code":"# S3 method for class 'spherical' contour(   x,   add = FALSE,   density.params = list(),   nlevels = 10L,   col.palette = viridis::viridis,   col = NULL,   col.params = list(),   ... )  contourf(   x,   add = FALSE,   density.params = list(),   nlevels = 10L,   col.palette = viridis::viridis,   col.params = list() )  # S3 method for class 'spherical' image(   x,   add = FALSE,   density.params = list(),   nlevels = 10L,   col.palette = viridis::viridis,   col.params = list(),   ... )"},{"path":"https://tobiste.github.io/structr/reference/stereo_contour.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot spherical densities in a stereonet — stereo_contour","text":"x object class \"Vec3\", \"Line\", \"Plane\" 'spherical.density' (plotting ). add logical. Whether contours added existing plot. density.params list parameters passed density.spherical nlevels integer. Number contour levels plotting col.palette color palette function used assign colors plot. col colour(s) contour lines drawn. NULL, lines color based col.palette. col.params list. Arguments passed col.palette ... optional parameters passed graphics::image() graphics::contour().","code":""},{"path":"https://tobiste.github.io/structr/reference/stereo_contour.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot spherical densities in a stereonet — stereo_contour","text":"list containing stereographic x coordinates grid, counts, density.","code":""},{"path":[]},{"path":"https://tobiste.github.io/structr/reference/stereo_contour.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot spherical densities in a stereonet — stereo_contour","text":"","code":"set.seed(20250411) x <- rfb(100, mu = Line(120, 10), k = 5, A = diag(c(-1, 0, 1)))  contour(x)   contourf(x,   col.params = list(direction = -1, begin = .05, end = .95, alpha = .75) ) stereo_point(x, col = \"black\", pch = 21)   image(x) stereo_point(x, col = \"lightgrey\", pch = 21)    # complete example: par(mfrow = c(1, 2)) wp <- 6 / ifelse(is.na(example_planes_df$quality), 6, example_planes_df$quality) my_planes <- Plane(example_planes_df$dipdir, example_planes_df$dip) fabric_p <- or_shape_params(my_planes)$Vollmer[\"D\"] my_planes_eig <- ot_eigen(my_planes)  stereoplot(guides = TRUE, col = \"grey96\") points(my_planes, col = \"grey\", pch = 16, cex = .5) contour(my_planes, add = TRUE, weights = wp) points(my_planes_eig$vectors[3, ], col = \"black\", pch = 16) lines(my_planes_eig$vectors[3, ], ang = 90, col = \"black\", pch = 16) title(   main = \"Planes\",   sub = paste0(     \"N: \", nrow(my_planes), \" | Fabric strength: \", round(fabric_p, 2),     \"\\nLambert equal area, lower hemisphere projection\"   ) )  my_lines <- Line(example_lines_df$trend, example_lines_df$plunge) wl <- 6 / ifelse(is.na(example_lines_df$quality), 6, example_lines_df$quality) fabric_l <- or_shape_params(my_lines)$Vollmer[\"D\"]  stereoplot(guides = TRUE, col = \"grey96\") points(my_lines, col = \"grey\", pch = 16, cex = .5) contour(my_lines, add = TRUE, weights = wl) points(sph_mean(my_lines, w = wl), col = \"black\", pch = 16) title(   main = \"Lines\",   sub = paste0(     \"N: \", nrow(my_lines), \" | Fabric strength: \", round(fabric_l, 2),     \"\\nLambert equal area, lower hemisphere projection\"   ) )"},{"path":"https://tobiste.github.io/structr/reference/stereo_coords.html","id":null,"dir":"Reference","previous_headings":"","what":"Stereographic projection — stereo_coords","title":"Stereographic projection — stereo_coords","text":"Transformation spherical coordinates stereographic projection","code":""},{"path":"https://tobiste.github.io/structr/reference/stereo_coords.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stereographic projection — stereo_coords","text":"","code":"stereo_coords(az, inc, upper.hem = FALSE, earea = TRUE, r = 1)"},{"path":"https://tobiste.github.io/structr/reference/stereo_coords.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stereographic projection — stereo_coords","text":"az, inc numeric vectors. Azimuth Inclination degrees. upper.hem logical. Whether projection shown upper hemisphere (TRUE) lower hemisphere (FALSE, default). earea logical TRUE Lambert equal-area projection (also \"Schmidt net\"; default), FALSE meridional stereographic projection (also \"Wulff net\" \"Stereonet\"). r numeric. Radius circle. Default 1 unit circle.","code":""},{"path":"https://tobiste.github.io/structr/reference/stereo_coords.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stereographic projection — stereo_coords","text":"two-column vector transformed coordinates","code":""},{"path":"https://tobiste.github.io/structr/reference/stereo_coords.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stereographic projection — stereo_coords","text":"","code":"stereo_coords(90, 10) #>            x            y #> inc 0.909039 5.566258e-17 stereo_coords(90, 10, earea = TRUE, upper.hem = TRUE) #>             x             y #> inc -0.909039 -1.669877e-16"},{"path":"https://tobiste.github.io/structr/reference/stereo_point.html","id":null,"dir":"Reference","previous_headings":"","what":"Stereographic projection of lines and planes — stereo_point","title":"Stereographic projection of lines and planes — stereo_point","text":"Visualization lines, planes stereographic projection.","code":""},{"path":"https://tobiste.github.io/structr/reference/stereo_point.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stereographic projection of lines and planes — stereo_point","text":"","code":"stereo_point(   x,   col = 1,   pch = 20,   lab = NULL,   text.pos = 4,   cex = 1,   upper.hem = FALSE,   earea = TRUE,   ... )"},{"path":"https://tobiste.github.io/structr/reference/stereo_point.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stereographic projection of lines and planes — stereo_point","text":"x object class \"Vec3\", \"Line\", \"Plane\". \"Pair\", \"Fault\" col color pch plotting character lab character. text labels text.pos position labels cex character expansion labels upper.hem logical. Whether projection shown upper hemisphere (TRUE) lower hemisphere (FALSE, default). earea logical TRUE Lambert equal-area projection (also \"Schmidt net\"; default), FALSE meridional stereographic projection (also \"Wulff net\" \"Stereonet\"). ... optional graphical parameters","code":""},{"path":"https://tobiste.github.io/structr/reference/stereo_point.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Stereographic projection of lines and planes — stereo_point","text":"\"Plane\" \"Fault\" objects displayed pole plane ().","code":""},{"path":"https://tobiste.github.io/structr/reference/stereo_point.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stereographic projection of lines and planes — stereo_point","text":"","code":"stereoplot() stereo_point(Line(c(90, 80), c(10, 75)), lab = c(\"L1\", \"L2\")) stereo_point(Plane(120, 30), lab = \"P\", col = \"red\")"},{"path":"https://tobiste.github.io/structr/reference/stereo_segment.html","id":null,"dir":"Reference","previous_headings":"","what":"Great-circle segment between two vectors — stereo_segment","title":"Great-circle segment between two vectors — stereo_segment","text":"Plots great-circle segment two vectors","code":""},{"path":"https://tobiste.github.io/structr/reference/stereo_segment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Great-circle segment between two vectors — stereo_segment","text":"","code":"stereo_segment(   x,   y,   upper.hem = FALSE,   earea = TRUE,   n = 100L,   BALL.radius = 1,   ... )"},{"path":"https://tobiste.github.io/structr/reference/stereo_segment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Great-circle segment between two vectors — stereo_segment","text":"x, y objects class \"Vec3\", \"Line\", \"Plane\" upper.hem logical. Whether projection shown upper hemisphere (TRUE) lower hemisphere (FALSE, default). earea logical TRUE Lambert equal-area projection (also \"Schmidt net\"; default), FALSE meridional stereographic projection (also \"Wulff net\" \"Stereonet\"). n integer. number points along greatcircle (100 default) BALL.radius numeric size sphere ... graphical parameters passed graphics::lines()","code":""},{"path":[]},{"path":"https://tobiste.github.io/structr/reference/stereo_segment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Great-circle segment between two vectors — stereo_segment","text":"","code":"x <- Line(120, 7) y <- Line(10, 13) plot(rbind(x, y)) stereo_segment(x, y, col = \"red\")   # For multiple segments use lapply(): set.seed(20250411) mu <- Line(45, 10) x <- rvmf(100, mu = mu) plot(x) lapply(seq_len(nrow(x)), FUN = function(i) {   stereo_segment(x[i, ], mu, col = i) }) #> [[1]] #> NULL #>  #> [[2]] #> NULL #>  #> [[3]] #> NULL #>  #> [[4]] #> NULL #>  #> [[5]] #> NULL #>  #> [[6]] #> NULL #>  #> [[7]] #> NULL #>  #> [[8]] #> NULL #>  #> [[9]] #> NULL #>  #> [[10]] #> NULL #>  #> [[11]] #> NULL #>  #> [[12]] #> NULL #>  #> [[13]] #> NULL #>  #> [[14]] #> NULL #>  #> [[15]] #> NULL #>  #> [[16]] #> NULL #>  #> [[17]] #> NULL #>  #> [[18]] #> NULL #>  #> [[19]] #> NULL #>  #> [[20]] #> NULL #>  #> [[21]] #> NULL #>  #> [[22]] #> NULL #>  #> [[23]] #> NULL #>  #> [[24]] #> NULL #>  #> [[25]] #> NULL #>  #> [[26]] #> NULL #>  #> [[27]] #> NULL #>  #> [[28]] #> NULL #>  #> [[29]] #> NULL #>  #> [[30]] #> NULL #>  #> [[31]] #> NULL #>  #> [[32]] #> NULL #>  #> [[33]] #> NULL #>  #> [[34]] #> NULL #>  #> [[35]] #> NULL #>  #> [[36]] #> NULL #>  #> [[37]] #> NULL #>  #> [[38]] #> NULL #>  #> [[39]] #> NULL #>  #> [[40]] #> NULL #>  #> [[41]] #> NULL #>  #> [[42]] #> NULL #>  #> [[43]] #> NULL #>  #> [[44]] #> NULL #>  #> [[45]] #> NULL #>  #> [[46]] #> NULL #>  #> [[47]] #> NULL #>  #> [[48]] #> NULL #>  #> [[49]] #> NULL #>  #> [[50]] #> NULL #>  #> [[51]] #> NULL #>  #> [[52]] #> NULL #>  #> [[53]] #> NULL #>  #> [[54]] #> NULL #>  #> [[55]] #> NULL #>  #> [[56]] #> NULL #>  #> [[57]] #> NULL #>  #> [[58]] #> NULL #>  #> [[59]] #> NULL #>  #> [[60]] #> NULL #>  #> [[61]] #> NULL #>  #> [[62]] #> NULL #>  #> [[63]] #> NULL #>  #> [[64]] #> NULL #>  #> [[65]] #> NULL #>  #> [[66]] #> NULL #>  #> [[67]] #> NULL #>  #> [[68]] #> NULL #>  #> [[69]] #> NULL #>  #> [[70]] #> NULL #>  #> [[71]] #> NULL #>  #> [[72]] #> NULL #>  #> [[73]] #> NULL #>  #> [[74]] #> NULL #>  #> [[75]] #> NULL #>  #> [[76]] #> NULL #>  #> [[77]] #> NULL #>  #> [[78]] #> NULL #>  #> [[79]] #> NULL #>  #> [[80]] #> NULL #>  #> [[81]] #> NULL #>  #> [[82]] #> NULL #>  #> [[83]] #> NULL #>  #> [[84]] #> NULL #>  #> [[85]] #> NULL #>  #> [[86]] #> NULL #>  #> [[87]] #> NULL #>  #> [[88]] #> NULL #>  #> [[89]] #> NULL #>  #> [[90]] #> NULL #>  #> [[91]] #> NULL #>  #> [[92]] #> NULL #>  #> [[93]] #> NULL #>  #> [[94]] #> NULL #>  #> [[95]] #> NULL #>  #> [[96]] #> NULL #>  #> [[97]] #> NULL #>  #> [[98]] #> NULL #>  #> [[99]] #> NULL #>  #> [[100]] #> NULL #>  points(mu, pch = 16, col = \"white\")"},{"path":"https://tobiste.github.io/structr/reference/stereoplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Stereographic projection — stereoplot","title":"Stereographic projection — stereoplot","text":"Initialize plot equal-area stereographic projections (Wulff) Lambert Equal-Area projections (Schmidt).","code":""},{"path":"https://tobiste.github.io/structr/reference/stereoplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stereographic projection — stereoplot","text":"","code":"stereoplot(   earea = TRUE,   guides = TRUE,   d = 10,   col = \"lightgray\",   lwd = 1,   lty = 1,   border.col = \"black\",   title = NULL,   sub = NULL,   origin.text = \"N\",   labels = FALSE,   ladj = 0.04,   centercross = TRUE,   ticks = NULL,   radius = 1 )"},{"path":"https://tobiste.github.io/structr/reference/stereoplot.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Stereographic projection — stereoplot","text":"Adapted RFOC package","code":""},{"path":"https://tobiste.github.io/structr/reference/stereoplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stereographic projection — stereoplot","text":"earea logical. Projection, either TRUE Lambert equal-area projection (default), FALSE meridional stereographic projection. guides logical. Whether guides added plot (TRUE default) d integer. Angle distance guides. Default: 10 col color guide lines lwd linewidth guide lines lty linetype guide lines border.col color primitive circle (frame), center-cross ticks stereo plot title, sub character. Title subtitle plot origin.text character. Text origin stereoplot. labels can either logical value specifying whether (numerical) annotations made next tickmarks, character expression vector labels placed next tickpoints. ladj adjustment labels away origin stereoplot circle. essentially amount added radius length ticks. centercross logical. Whether center cross added (TRUE default) ticks integer. Angle ticks. NULL (default), ticks drawn. radius numeric. Radius circle","code":""},{"path":"https://tobiste.github.io/structr/reference/stereoplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stereographic projection — stereoplot","text":"","code":"stereoplot(ticks = 30, title = \"title\", sub = \"subtitle\", border.col = \"purple\", labels = TRUE)"},{"path":"https://tobiste.github.io/structr/reference/stereoplot_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Stereoplot frame — stereoplot_frame","title":"Stereoplot frame — stereoplot_frame","text":"Adds (primitive) circle given radius existing plot","code":""},{"path":"https://tobiste.github.io/structr/reference/stereoplot_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stereoplot frame — stereoplot_frame","text":"","code":"stereoplot_frame(ndiv = 144, radius = 1, ...)"},{"path":"https://tobiste.github.io/structr/reference/stereoplot_frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stereoplot frame — stereoplot_frame","text":"ndiv integer. Resolution circle's line radius numeric. Radius circle ... optional arguments passed graphics::lines()","code":""},{"path":[]},{"path":"https://tobiste.github.io/structr/reference/stereoplot_frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stereoplot frame — stereoplot_frame","text":"","code":"plot(c(-1, 1), c(-1, 1), type = \"n\", asp = 1) stereoplot_frame(col = \"red\", lwd = 3)"},{"path":"https://tobiste.github.io/structr/reference/stereoplot_guides.html","id":null,"dir":"Reference","previous_headings":"","what":"Stereoplot gridlines — stereoplot_guides","title":"Stereoplot gridlines — stereoplot_guides","text":"Adds equal-area equal-angle projection gridlines existing stereoplot.","code":""},{"path":"https://tobiste.github.io/structr/reference/stereoplot_guides.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stereoplot gridlines — stereoplot_guides","text":"","code":"stereoplot_guides(d = 10, earea = TRUE, radius = 1, ...)"},{"path":"https://tobiste.github.io/structr/reference/stereoplot_guides.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stereoplot gridlines — stereoplot_guides","text":"d angle grid lines earea logical. Projection, either TRUE Lambert equal-area projection (default), FALSE meridional stereographic projection. radius numeric. Radius circle ... optional arguments passed graphics::lines()","code":""},{"path":[]},{"path":"https://tobiste.github.io/structr/reference/stereoplot_guides.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stereoplot gridlines — stereoplot_guides","text":"","code":"plot(c(-1, 1), c(-1, 1), type = \"n\", asp = 1) stereoplot_guides(d = 5, earea = FALSE, col = \"green\", rotation = 20)   plot(c(-1, 1), c(-1, 1), type = \"n\", asp = 1) stereoplot_guides(d = 15, earea = TRUE, col = \"orange\", rotation = 90)"},{"path":"https://tobiste.github.io/structr/reference/stereoplot_ticks.html","id":null,"dir":"Reference","previous_headings":"","what":"Stereoplot tickmarks — stereoplot_ticks","title":"Stereoplot tickmarks — stereoplot_ticks","text":"Adds stereoplot rickmarks existing plot","code":""},{"path":"https://tobiste.github.io/structr/reference/stereoplot_ticks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stereoplot tickmarks — stereoplot_ticks","text":"","code":"stereoplot_ticks(   length = 0.02,   angle = 10,   labels = FALSE,   ladj = 2 * length,   radius = 1,   rotation = 0,   ... )"},{"path":"https://tobiste.github.io/structr/reference/stereoplot_ticks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stereoplot tickmarks — stereoplot_ticks","text":"length numeric. Length ticks fraction radius angle numeric. Division angle degrees labels can either logical value specifying whether (numerical) annotations made next tickmarks, character expression vector labels placed next tickpoints. ladj adjustment labels away origin stereoplot circle. essentially amount added radius length ticks. radius numeric. Radius circle rotation numeric. Rotation (positive counter-clockwise) tickmarks labels ... optional arguments passed graphics::segments() graphics::text()","code":""},{"path":[]},{"path":"https://tobiste.github.io/structr/reference/stereoplot_ticks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stereoplot tickmarks — stereoplot_ticks","text":"","code":"plot(c(-1, 1), c(-1, 1), type = \"n\", asp = 1) stereoplot_frame() stereoplot_ticks(length = 0.05, angle = 45, col = \"blue\", lwd = 2, labels = TRUE)"},{"path":"https://tobiste.github.io/structr/reference/strabo.html","id":null,"dir":"Reference","previous_headings":"","what":"Import orientation data from StraboSpot — strabo","title":"Import orientation data from StraboSpot — strabo","text":"Reads XLS format export field book data, JSON project file, txt export StraboMobile data strabospot.org/my_data creates list metadata, line plane orientations.","code":""},{"path":"https://tobiste.github.io/structr/reference/strabo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import orientation data from StraboSpot — strabo","text":"","code":"read_strabo_xls(file, tag_cols = FALSE, sf = TRUE)  read_strabo_mobile(file, sf = TRUE)  read_strabo_JSON(file, sf = TRUE)"},{"path":"https://tobiste.github.io/structr/reference/strabo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import orientation data from StraboSpot — strabo","text":"file name file data read . tag_cols logical. Whether Tag columns summarized single column (may lead duplicate rows). sf logical. Whether output spatial \"sf\" object using Longitude Latitude columns.","code":""},{"path":"https://tobiste.github.io/structr/reference/strabo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import orientation data from StraboSpot — strabo","text":"list containing following objects: data \"tbl_df\" object. Metadata. spots \"tbl_df\" object \"sf\" sf == TRUE. Locations spot descriptions. tags \"tbl_df\" object. Tags descriptsions. planar Plane elements. row IDs data. linear Line elements. row IDs data.","code":""},{"path":"https://tobiste.github.io/structr/reference/strabo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import orientation data from StraboSpot — strabo","text":"","code":"if (FALSE) { # \\dontrun{ # import from excel file read_strabo_xls(\"path/to/my/file.xlsx\")  # import from text file read_strabo_mobile(\"path/to/my/file.txt\")  # import from .json file read_strabo_JSON(\"path/to/my/file.json\") } # }"},{"path":"https://tobiste.github.io/structr/reference/strain_shape.html","id":null,"dir":"Reference","previous_headings":"","what":"Principal Stretches, Strain and Shape Parameters based on the Orientation Tensor. — strain_shape","title":"Principal Stretches, Strain and Shape Parameters based on the Orientation Tensor. — strain_shape","text":"Principal Stretches, Strain Shape Parameters based Orientation Tensor.","code":""},{"path":"https://tobiste.github.io/structr/reference/strain_shape.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Principal Stretches, Strain and Shape Parameters based on the Orientation Tensor. — strain_shape","text":"","code":"principal_stretch(x)  principal_strain(x)  or_shape_params(x)"},{"path":"https://tobiste.github.io/structr/reference/strain_shape.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Principal Stretches, Strain and Shape Parameters based on the Orientation Tensor. — strain_shape","text":"x Object class \"Vec3\", \"Line\" \"Plane\"","code":""},{"path":"https://tobiste.github.io/structr/reference/strain_shape.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Principal Stretches, Strain and Shape Parameters based on the Orientation Tensor. — strain_shape","text":"list","code":""},{"path":"https://tobiste.github.io/structr/reference/strain_shape.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Principal Stretches, Strain and Shape Parameters based on the Orientation Tensor. — strain_shape","text":"stretch_ratios Sqrt eigenvalue ratios strain_ratios Log stretch ratios Ramsay strain symmetry (Ramsay, 1983) Woodcock Woodcock shape Flinn Flinn strain intensity Vollmer Point, Girdle, Random, Cylindricity (B), Uniform Distance (D) Indices (Vollmer 1990; 2020). D measure \"distance\" uniformity, linear R P, R G. End members : uniform D = 0, girdle D = 0.5, cluster D = 1. 99% level test uniformity sample size 300 D = 0.1. Nadai natural octahedral unit strain shear (Nadai, 1963) Lisle_intensity Intensity index (Lisle, 1985) Waterson_intensity strain intensity (Watterson, 1968) lode Lode parameter (Lode, 1926) kind Descriptive type ellipsoid: \"O\" - isotrope, \"L\" - L-tectonite, \"LLS\" - oblate L-tectonite, \"S\" - S-tectonite, \"SSL\" - prolate S-tectonite MAD maximum angular deviation (Kirschvink, 1980) US Uniformity statistic Mardia (1972)","code":""},{"path":"https://tobiste.github.io/structr/reference/strain_shape.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Principal Stretches, Strain and Shape Parameters based on the Orientation Tensor. — strain_shape","text":"Flinn, Derek.(1963): \"statistical analysis fabric diagrams.\" Geological Journal 3.2: 247-253. Jelinek, Vit. \"Characterization magnetic fabric rocks.\" Tectonophysics 79.3-4 (1981): T63-T67. Kirschvink, J. (1980): least-squares line plane analysis palaeomagnetic data. Geophysical Journal International, 62(3), 699-718. Lisle, Richard J.  (1985): \"use orientation tensor description statistical testing fabrics.\" Journal Structural Geology 7.1: 115-117. Lode, Walter (1926): \"Versuche über den Einfluß der mittleren Hauptspannung auf das Fließen der Metalle Eisen, Kupfer und Nickel“ (\"Experiments influence mean principal stress flow metals iron, copper nickel\"], Zeitschrift für Physik, vol. 36 (November), pp. 913–939, DOI: 10.1007/BF01400222 Mardia, Kantilal Varichand. (1975): \"Statistics directional data.\" Journal Royal Statistical Society Series B: Statistical Methodology 37.3: 349-371. Nadai, ., Hodge, P. G., Jr. (1963): \"Theory Flow Fracture Solids, vol. II.\" ASME. J. Appl. Mech. December 1963; 30(4): 640. https://doi.org/10.1115/1.3636654 Ramsay, John G. (1967): \"Folding fracturing rocks.\" Mc Graw Hill Book Company 568. Vollmer, Frederick W. (1990): \"application eigenvalue methods structural domain analysis.\" Geological Society America Bulletin 102.6: 786-791. Vollmer, Frederick W. (2020): \"Representing Progressive Fabric Paths Triangular Plot Using Fabric Density Index Crystal Axes Eigenvector Barycenters.\" Geological Society America Abstracts. Vol. 52. Watterson, Juan. (1968): \"Homogeneous deformation gneisses Vesterland, south-west Greenland\". . 78. CA Reitzel. Woodcock, N. H.  (1977): \"Specification fabric shapes using eigenvalue method.\" Geological Society America Bulletin 88.9: 1231-1236.","code":""},{"path":[]},{"path":"https://tobiste.github.io/structr/reference/strain_shape.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Principal Stretches, Strain and Shape Parameters based on the Orientation Tensor. — strain_shape","text":"","code":"set.seed(1) mu <- Line(120, 50) x <- rvmf(100, mu = mu, k = 20) principal_stretch(x) #>       S1       S2       S3  #> 9.511749 2.220799 2.143520  principal_strain(x) #>        e1        e2        e3  #> 2.2525278 0.7978670 0.7624492  or_shape_params(x) #> $stretch_ratios #>      Rxy      Ryz      Rxz  #> 4.283031 1.036052 4.437444  #>  #> $strain_ratios #>        e12        e13        e23  #> 1.45466083 1.49007857 0.03541774  #>  #> $Vollmer #>          P          G          R          B          C          I          D  #>  85.541428   0.674541  13.784031  86.215969   2.980157   3.673150 110.665262  #>  #> $Flinn #> $Flinn$k #> [1] 91.0627 #>  #> $Flinn$d #> [1] 3.283228 #>  #>  #> $Ramsay #> intensity  symmetry  #>  2.117293 41.071535  #>  #> $Woodcock #>  strength     shape  #>  1.490079 41.071535  #>  #> $Watterson_intensity #> [1] 4.319083 #>  #> $Lisle_intensity #> [1] 61234 #>  #> $Nadai #>     goct     eoct  #> 1.388465 1.202446  #>  #> $Lode #> [1] -0.9524619 #>  #> $kind #> [1] \"L\" #>  #> $MAD #> [1] 17.97803 #>  #> $US #> [1] 6123400 #>  #> $Jellinek #> [1] 5.476767 #>"},{"path":"https://tobiste.github.io/structr/reference/stress-comp.html","id":null,"dir":"Reference","previous_headings":"","what":"Stress components — stress-comp","title":"Stress components — stress-comp","text":"Calculates stress components","code":""},{"path":"https://tobiste.github.io/structr/reference/stress-comp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stress components — stress-comp","text":"","code":"diff_stress(sigma1, sigma3)  mean_stress(sigma1, sigma3)  shear_stress(sigma1, sigma3, theta)  normal_stress(sigma1, sigma3, theta)  fracture_angle(mu)  slip_tendency(sigma_s, sigma_n)  dilatation_tendency(sigma1, sigma3, sigma_n)"},{"path":"https://tobiste.github.io/structr/reference/stress-comp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stress components — stress-comp","text":"sigma1, sigma3 numeric. Magnitudes maximum minimum principal stress (\\(\\sigma_1\\) \\(\\sigma_3\\)), respectively. theta numeric. Angle \\(\\theta\\) fracture \\(\\sigma_1\\). mu numeric. Coefficient internal friction \\(\\mu\\). sigma_s, sigma_n numeric. Magnitudes shear normal stress (\\(\\sigma_s\\) \\(\\sigma_n\\)), respectively.","code":""},{"path":"https://tobiste.github.io/structr/reference/stress-comp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stress components — stress-comp","text":"numeric","code":""},{"path":"https://tobiste.github.io/structr/reference/stress-comp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stress components — stress-comp","text":"","code":"s1 <- 1025 s3 <- 250  diff_stress(s1, s3) #> [1] 775 mean_stress(s1, s3) #> [1] 637.5 ss <- shear_stress(s1, s3, theta = 35) print(ss) #> [1] 364.1309 sn <- normal_stress(s1, s3, theta = 35) print(sn) #> [1] 504.9672 fracture_angle(mu = 0.6) #> [1] 60.48188  slip_tendency(ss, sn) #> [1] 0.7210981 dilatation_tendency(s1, s3, sn) #> [1] 0.6710101"},{"path":"https://tobiste.github.io/structr/reference/stress_transformation.html","id":null,"dir":"Reference","previous_headings":"","what":"Stress transformation — stress_transformation","title":"Stress transformation — stress_transformation","text":"calculates magnitudes normal stress shear stress","code":""},{"path":"https://tobiste.github.io/structr/reference/stress_transformation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stress transformation — stress_transformation","text":"","code":"stress_transformation(   theta,   sigma_x = NA,   sigma_z = NA,   tau_xz = NA,   sigma1 = NA,   sigma3 = NA )"},{"path":"https://tobiste.github.io/structr/reference/stress_transformation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stress transformation — stress_transformation","text":"theta numeric. Angles (degrees); defaults 0-180 increments 1 sigma_x numeric. Magnitude normal stress acting horizontal direction sigma_z numeric. Magnitude normal stress acting vertical direction tau_xz numeric. Magnitude shear stress acting plane \"sigma_x\" sigma1 numeric. Magnitude major principal stress sigma3 numeric. Magnitude minor principal stress","code":""},{"path":"https://tobiste.github.io/structr/reference/stress_transformation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stress transformation — stress_transformation","text":"two-element list containing \"normal\" normal stress inclined plane \"shear\" shear stress inclined plane","code":""},{"path":"https://tobiste.github.io/structr/reference/stress_transformation.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Stress transformation — stress_transformation","text":"addition theta, One following two sets data must entered: \"sigma_x\", \"sigma_z\", \"tau_xz\" \"sigma1\", \"sigma3\" theta entered conjunction \"sigma_x\", \"sigma_z\", \"tau_xz\", interpreted angle inclination horizontal.  theta entered conjunction principal stresses, interpreted angle inclination major principal plane.","code":""},{"path":"https://tobiste.github.io/structr/reference/stress_transformation.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Stress transformation — stress_transformation","text":"Kyle Elmy Jim Kaklamanos","code":""},{"path":"https://tobiste.github.io/structr/reference/stress_transformation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stress transformation — stress_transformation","text":"","code":"stress_transformation(sigma_x = 80, sigma_z = 120, tau_xz = 20, theta = 78) #> $normal #> [1] 89.86382 #>  #> $shear #> [1] 26.40564 #>"},{"path":"https://tobiste.github.io/structr/reference/structr.html","id":null,"dir":"Reference","previous_headings":"","what":"library(structr) — structr","title":"library(structr) — structr","text":"Free open-source R package analyzing visualizing orientation stress data structural geology.","code":""},{"path":"https://tobiste.github.io/structr/reference/structr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"library(structr) — structr","text":"list documented functions may viewed typing help(package='structr').","code":""},{"path":[]},{"path":"https://tobiste.github.io/structr/reference/structr.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"library(structr) — structr","text":"Maintainer: Tobias Stephan tobias.stephan1@yahoo.com (ORCID)","code":""},{"path":"https://tobiste.github.io/structr/reference/summary.spherical.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary statistics — summary.spherical","title":"Summary statistics — summary.spherical","text":"Calculates arithmetic mean, variance, 68% cone, confidence cone around mean.","code":""},{"path":"https://tobiste.github.io/structr/reference/summary.spherical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary statistics — summary.spherical","text":"","code":"# S3 method for class 'spherical' summary(object, ...)"},{"path":"https://tobiste.github.io/structr/reference/summary.spherical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary statistics — summary.spherical","text":"object object class \"Vec3\", \"Line\", \"Plane\". ... parameters passed sph_mean(), sph_var(), delta(), tectonicr::confidence_angle()","code":""},{"path":"https://tobiste.github.io/structr/reference/summary.spherical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary statistics — summary.spherical","text":"named vector","code":""},{"path":"https://tobiste.github.io/structr/reference/summary.spherical.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary statistics — summary.spherical","text":"","code":"set.seed(20250411) summary(rvmf(100, mu = Line(90, 20), k = 20)) #>         azimuth          plunge        variance        68% cone confidence cone  #>      91.2000211      25.2505297       0.2389314      40.4415071       4.1705671"},{"path":"https://tobiste.github.io/structr/reference/tau_max.html","id":null,"dir":"Reference","previous_headings":"","what":"Maximum in-plane shear stress — tau_max","title":"Maximum in-plane shear stress — tau_max","text":"calculates magnitude direction maximum -plane shear stress","code":""},{"path":"https://tobiste.github.io/structr/reference/tau_max.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Maximum in-plane shear stress — tau_max","text":"","code":"tau_max(sigma_x, sigma_z, tau_xz)"},{"path":"https://tobiste.github.io/structr/reference/tau_max.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Maximum in-plane shear stress — tau_max","text":"sigma_x numeric. Magnitude normal stress acting horizontal direction sigma_z numeric. Magnitude normal stress acting vertical direction tau_xz numeric. Magnitude shear stress acting plane \"sigma_x\"","code":""},{"path":"https://tobiste.github.io/structr/reference/tau_max.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Maximum in-plane shear stress — tau_max","text":"two-element list containing \"tauMax\" maximum -plane shear stress \"theta\" angle maximum -plane shear stress (degrees)","code":""},{"path":"https://tobiste.github.io/structr/reference/tau_max.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Maximum in-plane shear stress — tau_max","text":"Kyle Elmy Jim Kaklamanos","code":""},{"path":"https://tobiste.github.io/structr/reference/tau_max.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Maximum in-plane shear stress — tau_max","text":"","code":"tau_max(sigma_x = 80, sigma_z = 120, tau_xz = 20) #> $tau_max #> function (sigma_x, sigma_z, tau_xz)  #> { #>     tauMax <- sqrt((((sigma_z - sigma_x)/2)^2) + ((tau_xz)^2)) #>     x <- (1/(1 + ((2 * tau_xz)/(sigma_z - sigma_x))^2)) #>     theta1 <- acosd(sqrt(x))/2 #>     theta <- theta1 + 45 #>     return(list(tau_max = tau_max, theta = theta)) #> } #> <bytecode: 0x561546d6d9d8> #> <environment: namespace:structr> #>  #> $theta #> [1] 67.5 #>"},{"path":"https://tobiste.github.io/structr/reference/text.spherical.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Points to a Plot — text.spherical","title":"Add Points to a Plot — text.spherical","text":"Add Points Plot","code":""},{"path":"https://tobiste.github.io/structr/reference/text.spherical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Points to a Plot — text.spherical","text":"","code":"# S3 method for class 'spherical' text(x, labels = seq_along(x[, 1]), upper.hem = FALSE, earea = TRUE, ...)"},{"path":"https://tobiste.github.io/structr/reference/text.spherical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Points to a Plot — text.spherical","text":"x objects class \"Vec3\", \"Line\", \"Plane\", \"Pair\", \"Fault\". labels character vector expression specifying     text written.  attempt made coerce     language objects (names calls) expressions, vectors     classed objects character vectors .character.     labels longer x     y, coordinates recycled length labels. upper.hem logical. Whether projection shown upper hemisphere (TRUE) lower hemisphere (FALSE, default). earea logical. Projection, either TRUE Lambert equal-area projection (default), FALSE meridional stereographic projection. ... arguments passed graphics::text()","code":""},{"path":"https://tobiste.github.io/structr/reference/text.spherical.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Points to a Plot — text.spherical","text":"","code":"stereoplot() points(Line(c(90, 80), c(10, 75)), col = 1:2) text(Line(c(90, 80), c(10, 75)), labels = c(\"L1\", \"L2\"), col = 1:2, pos = 3)"},{"path":"https://tobiste.github.io/structr/reference/v_lower.html","id":null,"dir":"Reference","previous_headings":"","what":"Antipodal map sending upper-hemisphere rays to the lower hemisphere. — v_lower","title":"Antipodal map sending upper-hemisphere rays to the lower hemisphere. — v_lower","text":"Negates vector positive z-component. Used lower-hemisphere plots.","code":""},{"path":"https://tobiste.github.io/structr/reference/v_lower.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Antipodal map sending upper-hemisphere rays to the lower hemisphere. — v_lower","text":"","code":"v_lower(v)"},{"path":"https://tobiste.github.io/structr/reference/v_lower.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Antipodal map sending upper-hemisphere rays to the lower hemisphere. — v_lower","text":"v object class 'Vec3'","code":""},{"path":"https://tobiste.github.io/structr/reference/v_lower.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Antipodal map sending upper-hemisphere rays to the lower hemisphere. — v_lower","text":"object class 'Vec3'","code":""},{"path":"https://tobiste.github.io/structr/reference/v_lower.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Antipodal map sending upper-hemisphere rays to the lower hemisphere. — v_lower","text":"","code":"v <- rbind(Vec3(1, 0, -1), Vec3(1, 0, 1)) v_lower(v) #> Vector (Vec3) object (n = 2): #>       x y  z #> [1,]  1 0 -1 #> [2,] -1 0 -1"},{"path":"https://tobiste.github.io/structr/reference/variance_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Variance visualization — variance_plot","title":"Variance visualization — variance_plot","text":"Shows greatcircle shortest distance set vectors specified vector stereoplot. greatcircles color-coded angular distance.","code":""},{"path":"https://tobiste.github.io/structr/reference/variance_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variance visualization — variance_plot","text":"","code":"variance_plot(   x,   y = NULL,   .mean = c(\"geodesic\", \"arithmetic\", \"projected\"),   segments = TRUE,   upper.hem = FALSE,   earea = TRUE,   ... )"},{"path":"https://tobiste.github.io/structr/reference/variance_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variance visualization — variance_plot","text":"x set vectors. Object class \"Vec3\", \"Line\", \"Plane\", \"Pair\", \"Fault\". y vector variance visualized (one vector allowed). NULL, mean vector x used (default). .mean character. type mean used y NULL. One \"geodesic\" (default), \"arithmetic\" \"projected\". segments logical. Whether segments shown points? upper.hem logical. Whether projection shown upper hemisphere (TRUE) lower hemisphere (FALSE, default). earea logical TRUE Lambert equal-area projection (also \"Schmidt net\"; default), FALSE meridional stereographic projection (also \"Wulff net\" \"Stereonet\"). ... optional arguments passed assign_col()","code":""},{"path":"https://tobiste.github.io/structr/reference/variance_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variance visualization — variance_plot","text":"angles vectors x y.","code":""},{"path":[]},{"path":"https://tobiste.github.io/structr/reference/variance_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variance visualization — variance_plot","text":"","code":"variance_plot(example_lines)  variance_plot(example_planes, example_planes[1, ], segments = FALSE)"},{"path":"https://tobiste.github.io/structr/reference/vec_list.html","id":null,"dir":"Reference","previous_headings":"","what":"List of vectors — vec_list","title":"List of vectors — vec_list","text":"Creates list Cartesian vectors  spherical objects. convenience function link package geologyGeometry J. R. Davis","code":""},{"path":"https://tobiste.github.io/structr/reference/vec_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List of vectors — vec_list","text":"","code":"vec_list(x)"},{"path":"https://tobiste.github.io/structr/reference/vec_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List of vectors — vec_list","text":"x object class \"Vec3\", \"Line\", \"Plane\".","code":""},{"path":"https://tobiste.github.io/structr/reference/vec_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List of vectors — vec_list","text":"list","code":""},{"path":"https://tobiste.github.io/structr/reference/vec_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List of vectors — vec_list","text":"","code":"vec_list(example_lines) #> [[1]] #>         x         y         z  #> 0.5727204 0.7882819 0.2249511  #>  #> [[2]] #>         x         y         z  #> 0.4682901 0.8448178 0.2588190  #>  #> [[3]] #>         x         y         z  #> 0.2674497 0.9327081 0.2419219  #>  #> [[4]] #>         x         y         z  #> 0.1641876 0.9311540 0.3255682  #>  #> [[5]] #>         x         y         z  #> 0.4341533 0.8520738 0.2923717  #>  #> [[6]] #>         x         y         z  #> 0.2382466 0.9555548 0.1736482  #>  #> [[7]] #>         x         y         z  #> 0.2487928 0.9285075 0.2756374  #>  #> [[8]] #>         x         y         z  #> 0.3807167 0.8969124 0.2249511  #>  #> [[9]] #>         x         y         z  #> 0.4234340 0.8681684 0.2588190  #>  #> [[10]] #>         x         y         z  #> 0.5039832 0.8065417 0.3090170  #>  #> [[11]] #>         x         y         z  #> 0.5055754 0.8414187 0.1908090  #>  #> [[12]] #>         x         y         z  #> 0.6608925 0.7339955 0.1564345  #>  #> [[13]] #>         x         y         z  #> 0.1866394 0.9601763 0.2079117  #>  #> [[14]] #>         x         y         z  #> 0.3716074 0.8754521 0.3090170  #>  #> [[15]] #>         x         y         z  #> 0.3010969 0.9266810 0.2249511  #>  #> [[16]] #>          x          y          z  #> 0.06634235 0.94873979 0.30901699  #>  #> [[17]] #>         x         y         z  #> 0.2500000 0.9330127 0.2588190  #>  #> [[18]] #>          x          y          z  #> 0.03436929 0.98420783 0.17364818  #>  #> [[19]] #>         x         y         z  #> 0.1889521 0.9720741 0.1391731  #>  #> [[20]] #>          x          y          z  #> -0.1503745  0.9494270  0.2756374  #>  #> [[21]] #>         x         y         z  #> 0.2879299 0.9417763 0.1736482  #>  #> [[22]] #>         x         y         z  #> 0.3520151 0.8712678 0.3420201  #>  #> [[23]] #>         x         y         z  #> 0.3394708 0.9326883 0.1218693  #>  #> [[24]] #>         x         y         z  #> 0.1503745 0.9494270 0.2756374  #>  #> [[25]] #>         x         y         z  #> 0.3978485 0.8935823 0.2079117  #>  #> [[26]] #>         x         y         z  #> 0.2500000 0.9330127 0.2588190  #>  #> [[27]] #>         x         y         z  #> 0.4682901 0.8448178 0.2588190  #>  #> [[28]] #>          x          y          z  #> 0.48362865 0.87248918 0.06975647  #>  #> [[29]] #>         x         y         z  #> 0.3233864 0.8884968 0.3255682  #>  #> [[30]] #>         x         y         z  #> 0.3647789 0.8593653 0.3583679  #>  #> [[31]] #>           x           y           z  #> -0.05004912  0.95499417  0.29237170  #>  #> [[32]] #>          x          y          z  #> -0.1743127  0.8967611  0.4067366  #>  #> [[33]] #>          x          y          z  #> -0.1879102  0.9667141  0.1736482  #>  #> [[34]] #>         x         y         z  #> 0.2537255 0.8848461 0.3907311  #>  #> [[35]] #>         x         y         z  #> 0.2903810 0.8937008 0.3420201  #>  #> [[36]] #>         x         y         z  #> 0.1715103 0.9726831 0.1564345  #>  #> [[37]] #>          x          y          z  #> -0.4659722  0.8763662  0.1218693  #>  #> [[38]] #>           x           y           z  #> -0.20740523  0.97576488  0.06975647  #>  #> [[39]] #>           x           y           z  #> -0.06595604  0.94321534  0.32556815  #>  #> [[40]] #>         x         y         z  #> 0.4401396 0.5840850 0.6819984  #>  #> [[41]] #>         x         y         z  #> 0.4393867 0.7926747 0.4226183  #>  #> [[42]] #>         x         y         z  #> 0.3731498 0.8002223 0.4694716  #>  #> [[43]] #>          x          y          z  #> 0.58769573 0.80889378 0.01745241  #>  #> [[44]] #>          x          y          z  #> 0.62692564 0.77418869 0.08715574  #>  #> [[45]] #>           x           y           z  #> -0.30784109 -0.94743746  0.08715574  #>  #> [[46]] #>          x          y          z  #> -0.2548870 -0.9512512  0.1736482  #>  #> [[47]] #>         x         y         z  #> 0.5155271 0.7362490 0.4383711  #>  #> [[48]] #>          x          y          z  #> 0.06554964 0.93740358 0.34202014  #>  #> [[49]] #>         x         y         z  #> 0.1450435 0.9157687 0.3746066  #>  #> [[50]] #>         x         y         z  #> 0.4271357 0.8757580 0.2249511  #>  #> [[51]] #>          x          y          z  #> -0.4148536 -0.8896564  0.1908090  #>  #> [[52]] #>          x          y          z  #> -0.4341049 -0.8900470  0.1391731  #>  #> [[53]] #>         x         y         z  #> 0.4203031 0.9013429 0.1045285  #>  #> [[54]] #>          x          y          z  #> 0.45336832 0.88978543 0.05233596  #>  #> [[55]] #>          x          y          z  #> 0.39067162 0.92036466 0.01745241  #>  #> [[56]] #>         x         y         z  #> 0.8054738 0.4839775 0.3420201  #>  #> [[57]] #>         x         y         z  #> 0.1634922 0.5347588 0.8290376  #>  #> [[58]] #>         x         y         z  #> 0.5025704 0.5781411 0.6427876  #>  #> [[59]] #>          x          y          z  #> -0.3247917  0.8461112  0.4226183  #>  #> [[60]] #>         x         y         z  #> 0.3771196 0.8470246 0.3746066  #>  #> [[61]] #>          x          y          z  #>  0.3847950 -0.9065203  0.1736482  #>  #> [[62]] #>         x         y         z  #> 0.3059340 0.8884968 0.3420201  #>  #> [[63]] #>         x         y         z  #> 0.5504160 0.6797072 0.4848096  #>  #> [[64]] #>         x         y         z  #> 0.5720614 0.4156269 0.7071068  #>  #> [[65]] #>          x          y          z  #> -0.1165442 -0.9491766  0.2923717  #>  #> [[66]] #>         x         y         z  #> 0.3171156 0.8712678 0.3746066  #>  #> [[67]] #>         x         y         z  #> 0.3909804 0.8781563 0.2756374  #>  #> [[68]] #>         x         y         z  #> 0.3755949 0.8848461 0.2756374  #>  #> [[69]] #>         x         y         z  #> 0.5072135 0.8441450 0.1736482  #>  #> [[70]] #>         x         y         z  #> 0.3099755 0.8516507 0.4226183  #>  #> [[71]] #>         x         y         z  #> 0.3878187 0.9136435 0.1218693  #>  #> [[72]] #>         x         y         z  #> 0.4698463 0.8137977 0.3420201  #>  #> [[73]] #>         x         y         z  #> 0.5785017 0.7676977 0.2756374  #>  #> [[74]] #>         x         y         z  #> 0.3184537 0.9248567 0.2079117  #>  #> [[75]] #>         x         y         z  #> 0.2573296 0.8974151 0.3583679  #>  #> [[76]] #>          x          y          z  #> -0.1495990 -0.9445311  0.2923717  #>  #> [[77]] #>         x         y         z  #> 0.5681638 0.6535977 0.5000000  #>  #> [[78]] #>         x         y         z  #> 0.4723840 0.8522033 0.2249511  #>  #> [[79]] #>         x         y         z  #> 0.4232640 0.6517694 0.6293204  #>  #> [[80]] #>          x          y          z  #> -0.7875307 -0.6152864  0.0348995  #>  #> [[81]] #>          x          y          z  #> 0.48473578 0.87448650 0.01745241  #>  #> [[82]] #>         x         y         z  #> 0.6049416 0.7470406 0.2756374  #>  #> [[83]] #>         x         y         z  #> 0.6815829 0.7309082 0.0348995  #>  #> [[84]] #>         x         y         z  #> 0.5677570 0.7814504 0.2588190  #>"},{"path":"https://tobiste.github.io/structr/reference/vecmath.html","id":null,"dir":"Reference","previous_headings":"","what":"Vector math operations — vecmath","title":"Vector math operations — vecmath","text":"Vector math operations","code":""},{"path":"https://tobiste.github.io/structr/reference/vecmath.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vector math operations — vecmath","text":"","code":"vector_length(x)  # S3 method for class 'spherical' crossprod(x, y = NULL, ...)  dotprod(x, y)  rotate(x, rotaxis, rotangle)  # S3 method for class 'spherical' rotate(x, rotaxis, rotangle)  angle(x, y)  # S3 method for class 'spherical' angle(x, y)  project(x, y)  # S3 method for class 'spherical' project(x, y)  reject(x, y)  # Default S3 method reject(x, y)  transform_linear(x, A, norm = FALSE)"},{"path":"https://tobiste.github.io/structr/reference/vecmath.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vector math operations — vecmath","text":"x, y objects class \"Vec3\", \"Line\", \"Plane\". ... arguments passed function call rotaxis Axis rotation given object class \"Vec3\", \"Line\", \"Plane\". rotangle Angle rotation radians \"Vec3\" objects degrees \"Line\" \"Plane\" objects. numeric 3x3 matrix. Transformation matrix. norm logical. TRUE, transformed vectors normalized unit length.","code":""},{"path":"https://tobiste.github.io/structr/reference/vecmath.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vector math operations — vecmath","text":"objects class x, .e. one \"Vec3\", \"Line\", \"Plane\". vector_length() %*% return real number. angle() returns numeric angle (degrees, unless x class \"Vec3\").","code":""},{"path":"https://tobiste.github.io/structr/reference/vecmath.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Vector math operations — vecmath","text":"vector_length length vector crossprod cross-product two vectors, .e. vector perpendicular 2 vectors. y = NULL taken sam,e vector x. dotprod dot product two vectors rotate rotation vector specified vector specified angle angle angle two vectors project projection one vector onto (changes vector length second vector, unless unit vectors) transform_linear Linear transformation vector 3x3 matrix","code":""},{"path":"https://tobiste.github.io/structr/reference/vecmath.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vector math operations — vecmath","text":"","code":"vec1 <- Vec3(1, 0, 0) vec2 <- Vec3(0, 0, 1)  vector_length(vec1) # length of a vector #> [1] 1 crossprod(vec1, vec2) # cross product #> Vector (Vec3) object (n = 1): #>  x  y  z  #>  0 -1  0  dotprod(vec1, vec2) # dot product #> [1] 0 rotate(vec1, vec2, pi / 2) # rotation #> Vector (Vec3) object (n = 1): #>            x            y            z  #> 2.220446e-16 1.000000e+00 0.000000e+00  angle(vec1, vec2) # angle between vectors #> [1] 1.570796 project(vec1, vec2) # projection of a vector #> Vector (Vec3) object (n = 1): #> x y z  #> 0 0 0  transform_linear(vec1, matrix(runif(9), 3, 3)) # linear transformation #> Vector (Vec3) object (n = 1): #>         x         y         z  #> 0.6894520 0.1714069 0.1418151"},{"path":"https://tobiste.github.io/structr/reference/vel_rate.html","id":null,"dir":"Reference","previous_headings":"","what":"Rate and spin of velocity gradient tensor — vel_rate","title":"Rate and spin of velocity gradient tensor — vel_rate","text":"Rate spin velocity gradient tensor","code":""},{"path":"https://tobiste.github.io/structr/reference/vel_rate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rate and spin of velocity gradient tensor — vel_rate","text":"","code":"velgrad_rate(x)  velgrad_spin(x)"},{"path":"https://tobiste.github.io/structr/reference/vel_rate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rate and spin of velocity gradient tensor — vel_rate","text":"x 3x3 matrix. Velocity gradient tensor.","code":""},{"path":"https://tobiste.github.io/structr/reference/vel_rate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rate and spin of velocity gradient tensor — vel_rate","text":"3x3 matrix","code":""},{"path":"https://tobiste.github.io/structr/reference/vel_rate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rate and spin of velocity gradient tensor — vel_rate","text":"","code":"R <- defgrad_from_comp(xx = 2, xy = 1, zz = 0.5) L <- velgrad_from_defgrad(R, time = 10) velgrad_rate(L) #>            [,1]       [,2]        [,3] #> [1,] 0.06931472 0.03465736  0.00000000 #> [2,] 0.03465736 0.00000000  0.00000000 #> [3,] 0.00000000 0.00000000 -0.06931472 velgrad_spin(L) #>             [,1]       [,2] [,3] #> [1,]  0.00000000 0.03465736    0 #> [2,] -0.03465736 0.00000000    0 #> [3,]  0.00000000 0.00000000    0"},{"path":"https://tobiste.github.io/structr/reference/vollmer_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Fabric plot of Vollmer (1990) — vollmer_plot","title":"Fabric plot of Vollmer (1990) — vollmer_plot","text":"Creates fabric plot using eigenvalue method","code":""},{"path":"https://tobiste.github.io/structr/reference/vollmer_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fabric plot of Vollmer (1990) — vollmer_plot","text":"","code":"vollmer_plot(x, labels = NULL, add = FALSE, ngrid = c(5, 5, 5), ...)"},{"path":"https://tobiste.github.io/structr/reference/vollmer_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fabric plot of Vollmer (1990) — vollmer_plot","text":"x object class \"Vec3\", \"Line\", \"Plane\". labels character. text labels add logical. data plotted existing plot? ngrid integer 3-element vector specifying amount gridlines P, G, G axes. Constant grid spacing one integer given. NULL grid. ... optional graphical parameters","code":""},{"path":"https://tobiste.github.io/structr/reference/vollmer_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fabric plot of Vollmer (1990) — vollmer_plot","text":"plot stored object, P, G, R values numeric vector.","code":""},{"path":"https://tobiste.github.io/structr/reference/vollmer_plot.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fabric plot of Vollmer (1990) — vollmer_plot","text":"Vollmer, F. W. (1990). application eigenvalue methods structural domain analysis. Geological Society America Bulletin, 102, 786<U+2013>791.","code":""},{"path":[]},{"path":"https://tobiste.github.io/structr/reference/vollmer_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fabric plot of Vollmer (1990) — vollmer_plot","text":"","code":"set.seed(20250411) mu <- Line(120, 50) a <- rvmf(100, mu = mu, k = 10) vollmer_plot(a, lab = \"VMF\") #> Warning: NAs introduced by coercion  set.seed(20250411) b <- rfb(100, mu = mu, k = 1, A = diag(c(10, 0, 0))) vollmer_plot(b, lab = \"FB\", add = TRUE, col = \"red\")  set.seed(20250411) c <- runif.spherical(n = 100, \"Line\", method = \"rotasym\") vollmer_plot(c, lab = \"UNIF\", add = TRUE, col = \"green\")  set.seed(20250411) d <- rkent(100, mu = mu, k = 10, b = 4) vollmer_plot(d, lab = \"KENT\", add = TRUE, col = \"blue\") title(\"Fabric plot of Vollmer (1990)\")"},{"path":"https://tobiste.github.io/structr/reference/vonmises-fisher.html","id":null,"dir":"Reference","previous_headings":"","what":"von Mises-Fisher Distribution — vonmises-fisher","title":"von Mises-Fisher Distribution — vonmises-fisher","text":"Density random generation spherical normal distribution mean concentration parameter (\\(\\kappa\\)) .","code":""},{"path":"https://tobiste.github.io/structr/reference/vonmises-fisher.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"von Mises-Fisher Distribution — vonmises-fisher","text":"","code":"rvmf(n = 100, mu = Vec3(1, 0, 0), k = 5)  dvmf(x, mu, k = 5)"},{"path":"https://tobiste.github.io/structr/reference/vonmises-fisher.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"von Mises-Fisher Distribution — vonmises-fisher","text":"Adapted fom rotasym::r_vMF() rotasym::d_vMF()","code":""},{"path":"https://tobiste.github.io/structr/reference/vonmises-fisher.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"von Mises-Fisher Distribution — vonmises-fisher","text":"n integer. number random samples generated k numeric. concentration parameter (\\(\\kappa\\)) von Mises-Fisher distribution x, mu object class \"Vec3\", \"Line\" \"Plane\"","code":""},{"path":[]},{"path":"https://tobiste.github.io/structr/reference/vonmises-fisher.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"von Mises-Fisher Distribution — vonmises-fisher","text":"","code":"set.seed(20250411) x <- rvmf(100, mu = Line(120, 50), k = 5) dx <- dvmf(x, mu = Line(120, 50)) head(dx) #>           [,1] #> [1,] 0.3539639 #> [2,] 0.3456839 #> [3,] 0.3298219 #> [4,] 0.2878725 #> [5,] 0.3416724 #> [6,] 0.3087497  plot(x, col = assign_col(dx))"},{"path":"https://tobiste.github.io/structr/reference/woodcock_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Fabric plot of Woodcock (1977) — woodcock_plot","title":"Fabric plot of Woodcock (1977) — woodcock_plot","text":"Creates fabric plot using eigenvalue method","code":""},{"path":"https://tobiste.github.io/structr/reference/woodcock_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fabric plot of Woodcock (1977) — woodcock_plot","text":"","code":"woodcock_plot(x, labels = NULL, add = FALSE, max = 7, ...)"},{"path":"https://tobiste.github.io/structr/reference/woodcock_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fabric plot of Woodcock (1977) — woodcock_plot","text":"x object class \"Vec3\", \"Line\", \"Plane\". labels character. text labels add logical. data plotted existing plot? max numeric. Maximum value x y axes. NULL, calculated data. ... optional graphical parameters","code":""},{"path":"https://tobiste.github.io/structr/reference/woodcock_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fabric plot of Woodcock (1977) — woodcock_plot","text":"plot stored object, orientation tensor's eigenvalues eigenvectors list.","code":""},{"path":"https://tobiste.github.io/structr/reference/woodcock_plot.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fabric plot of Woodcock (1977) — woodcock_plot","text":"Woodcock, N. H. (1977). Specification fabric shapes using eigenvalue method. Geological Society America Bulletin88, 1231<U+2013>1236. http://pubs.geoscienceworld.org/gsa/gsabulletin/article-pdf/88/9/1231/3418366/i0016-7606-88-9-1231.pdf","code":""},{"path":[]},{"path":"https://tobiste.github.io/structr/reference/woodcock_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fabric plot of Woodcock (1977) — woodcock_plot","text":"","code":"set.seed(20250411) mu <- Line(120, 50) x <- rvmf(100, mu = mu, k = 1) woodcock_plot(x, lab = \"x\", main = \"Fabric plot of Woodcock (1977)\") y <- rvmf(100, mu = mu, k = 20) woodcock_plot(y, lab = \"y\", add = TRUE, col = \"red\")"}]
