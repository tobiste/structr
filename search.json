[{"path":"https://tobiste.github.io/structr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 structR authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://tobiste.github.io/structr/articles/1_Basics.html","id":"import","dir":"Articles","previous_headings":"","what":"Import","title":"1. Basics","text":"Strabospot project, download json file import using read_strabo_JSON() function. returns list contains information metadata (including coordinates, descriptions etc) extracted Strabospot project list element data, tags used project list element tags, linear planar orientation measurements list elements lines planes, respectively.","code":""},{"path":"https://tobiste.github.io/structr/articles/1_Basics.html","id":"data-conversion-to-spherical-objects","dir":"Articles","previous_headings":"","what":"Data conversion to spherical objects","title":"1. Basics","text":"Usually orientation data stored table containing column dip direction (strike) dip angle measured plane… trend (azimuth) plunge (inclination) measured line… convert data frames spherical objects, use Plane() Line() functions structr package. functions take dip direction dip angle planes, trend plunge lines arguments. raw data imported using read_strabo_JSON() step necessary data come already correct format. spherical objects can easily converted Cartesian coordinate vectors using functions line2vec() plane2vec(): produces output ","code":"data(example_planes) head(example_planes) #> # A tibble: 6 × 4 #>   dipdir   dip quality feature_type #>    <dbl> <dbl>   <dbl> <chr>        #> 1    142    52       3 foliation    #> 2    135    43       3 foliation    #> 3    148    42       3 foliation    #> 4    150    46       3 foliation    #> 5    139    51       3 foliation    #> 6    158    51       3 foliation data(example_lines) head(example_lines) #> # A tibble: 6 × 4 #>   trend plunge quality feature_type #>   <dbl>  <dbl>   <dbl> <chr>        #> 1    54     13       3 stretching   #> 2    61     15       3 stretching   #> 3    74     14      NA stretching   #> 4    80     19      NA stretching   #> 5    63     17      NA stretching   #> 6    76     10      NA stretching data(example_planes) planes <- Plane(example_planes$dipdir, example_planes$dip) lines <- Line(example_lines$trend, example_lines$plunge) lines_vector <- Vec3(lines) head(lines_vector) #> Vector (Vec3) object (n = 6): #>              x         y         z #> [1,] 0.5727204 0.7882819 0.2249511 #> [2,] 0.4682901 0.8448178 0.2588190 #> [3,] 0.2674497 0.9327081 0.2419219 #> [4,] 0.1641876 0.9311540 0.3255682 #> [5,] 0.4341533 0.8520738 0.2923717 #> [6,] 0.2382466 0.9555548 0.1736482 planes_as_line <- Vec3(planes) head(planes_as_line) #> Vector (Vec3) object (n = 6): #>              x          y         z #> [1,] 0.6209609 -0.4851479 0.6156615 #> [2,] 0.4822457 -0.4822457 0.7313537 #> [3,] 0.5674549 -0.3545852 0.7431448 #> [4,] 0.6229665 -0.3596699 0.6946584 #> [5,] 0.5865195 -0.5098536 0.6293204 #> [6,] 0.7205572 -0.2911240 0.6293204 head(Vec3(planes_as_line)) #> Vector (Vec3) object (n = 6): #>              x          y         z #> [1,] 0.6209609 -0.4851479 0.6156615 #> [2,] 0.4822457 -0.4822457 0.7313537 #> [3,] 0.5674549 -0.3545852 0.7431448 #> [4,] 0.6229665 -0.3596699 0.6946584 #> [5,] 0.5865195 -0.5098536 0.6293204 #> [6,] 0.7205572 -0.2911240 0.6293204"},{"path":"https://tobiste.github.io/structr/articles/1_Basics.html","id":"some-helpers","dir":"Articles","previous_headings":"","what":"Some helpers","title":"1. Basics","text":"Converts strike dip direction using right-hand rule","code":"rhr2dd(271) #> [1] 1 dd2rhr(1) #> [1] 271"},{"path":"https://tobiste.github.io/structr/articles/1_Basics.html","id":"vector-operations","dir":"Articles","previous_headings":"","what":"Vector operations","title":"1. Basics","text":"Since spherical vector objects easily convertible, can used sort vector operations, magnitude (length), angle vectors, dot product, cross product, projection rotation. Define example vectors: vector length (magnitude): Orientation vectors definition unit vectors, .e. length equal 1. angle two vectors dot product (scalar product) two vectors Intuitively, tells us something much two vectors point direction. cross product two vectors: gives vector perpendicular plane spanned two vectors. projection vector another vector: vectors unit vectors, projected vector equal second vector. rotation vector another vector (rotation axis) specified rotation angle: **Linear *transformation**","code":"line1 <- Line(120, 50) line2 <- Line(10, 30) vector_length(line1) #> [1] 1 angle(line1, line2) #> [1] 78.89371 line1 %*% line2 #> [1] 0.1926297 crossprod(line1, line2) #> Line object (n = 1): #>   azimuth    plunge  #> 258.66786  32.21399 project(line1, line2) #> Line object (n = 1): #> azimuth  plunge  #>      10      30 rotate(line1, rotaxis = line2, rotangle = 45) #> Line object (n = 1): #>   azimuth    plunge  #> 210.50391  70.01332 trans_mat <- matrix(runif(9), 3, 3) transform_linear(line1, trans_mat) #> Vector (Vec3) object (n = 1): #>           x           y           z  #>  0.44288029 -0.04205583  0.62796680"},{"path":"https://tobiste.github.io/structr/articles/2_Stereographic_projection.html","id":"stereographic-projection","dir":"Articles","previous_headings":"","what":"Stereographic projection","title":"2. Stereographic projections","text":"Lambert equal area, lower hemisphere projection default plotting setting.  change equal angle stereographic, upper hemisphere projection  Adding great circles:","code":"stereoplot() points(lines, col = \"#B63679\", pch = 19, cex = .5) points(planes, col = \"#000004\", pch = 1, cex = .5) legend(\"topright\", legend = c(\"Lines\", \"Planes\"), col = c(\"#B63679\", \"#000004\"), pch = c(19, 1), cex = 1) title(main = \"Example data\", sub = \"Lambert equal area, lower hemisphere projection\") stereoplot(earea = FALSE) points(lines, col = \"#B63679\", pch = 19, cex = .5, earea = FALSE, upper.hem = TRUE) points(planes, col = \"#000004\", pch = 1, cex = .5, earea = FALSE, upper.hem = TRUE) legend(\"topright\", legend = c(\"Lines\", \"Planes\"), col = c(\"#B63679\", \"#000004\"), pch = c(19, 1), cex = 1) title(main = \"Example data\", sub = \"Equal angle stereographic, upper hemisphere projection\") stereoplot(guides = FALSE) lines(planes, col = \"lightgrey\", lty = 1, d = 90) points(planes, col = \"#000004\", pch = 1, cex = .5)"},{"path":"https://tobiste.github.io/structr/articles/2_Stereographic_projection.html","id":"statistics","dir":"Articles","previous_headings":"","what":"Statistics","title":"2. Stereographic projections","text":"","code":"example_lines$quality <- ifelse(is.na(example_lines$quality), 6, example_lines$quality) # replacing NA values with 6 line_weightings <- 6 / example_lines$quality lines_mean <- mean(lines, w = line_weightings) lines_variance <- var(lines, w = line_weightings) lines_delta <- delta(lines, w = line_weightings) lines_confangle <- confidence_angle(lines, w = line_weightings) c(   \"Variance\" = lines_variance,   \"63% cone\" = lines_delta,   \"Confidence angle\" = lines_confangle ) #>         Variance         63% cone Confidence angle  #>        0.1938084       36.2745102        6.9017035 stereoplot(guides = FALSE) points(lines, col = \"lightgrey\", pch = 1, cex = .5) points(lines_mean, col = \"#B63679\", pch = 19, cex = 1) lines(lines_mean, d = lines_confangle, col = \"#E65164FF\") lines(lines_mean, d = lines_delta, col = \"#FB8861FF\") legend(\"topright\", legend = c(\"Mean line\", \"95% confidence cone\", \"63% data cone\"), col = c(\"#B63679\", \"#E65164FF\", \"#FB8861FF\"), pch = c(19, NA, NA), lty = c(NA, 1, 1), cex = .75)"},{"path":"https://tobiste.github.io/structr/articles/2_Stereographic_projection.html","id":"orientation-tensor-and-eigenvectors","dir":"Articles","previous_headings":"Statistics","what":"Orientation tensor and eigenvectors:","title":"2. Stereographic projections","text":"","code":"planes_eigen <- eigen(planes)  stereoplot(guides = FALSE) points(planes, col = \"lightgrey\", pch = 1, cex = .5) lines(planes_eigen$vectors, d = 90, col = viridis::magma(3), lty = 1) points(planes_eigen$vectors, col = viridis::magma(3), pch = 19, cex = 1) legend(\"topright\", legend = c(\"Eigenvectors 1\", \"Eigenvectors 2\", \"Eigenvectors 3\"), col = viridis::magma(3), pch = 19, cex = .75)"},{"path":"https://tobiste.github.io/structr/articles/2_Stereographic_projection.html","id":"fabric-plots","dir":"Articles","previous_headings":"Statistics","what":"Fabric plots","title":"2. Stereographic projections","text":"","code":"VollmerPlot(planes, col = \"#000004\", pch = 1, cex = 2) VollmerPlot(lines, add = TRUE, col = \"#B63679\", pch = 19, cex = 2) legend(\"topright\", legend = c(\"Lines\", \"Planes\"), col = c(\"#B63679\", \"#000004\"), pch = c(19, 1), cex = 1)"},{"path":"https://tobiste.github.io/structr/articles/2_Stereographic_projection.html","id":"density-plots","dir":"Articles","previous_headings":"","what":"Density plots","title":"2. Stereographic projections","text":"","code":"example_planes$quality <- ifelse(is.na(example_planes$quality), 6, example_planes$quality) # replacing NA values with 6 plane_weightings <- 6 / example_planes$quality  fabric_p <- or_shape_params(planes)$Vollmer[\"D\"] fabric_l <- or_shape_params(lines)$Vollmer[\"D\"]  par(mfrow = c(1, 2)) stereoplot(guides = TRUE, col = \"grey96\") points(planes, col = \"grey\", pch = 16, cex = .5) contour(planes, add = TRUE, weights = plane_weightings) points(planes_eigen$vectors[3, ], col = \"black\", pch = 16) lines(planes_eigen$vectors[3, ], d = 90, col = \"black\", pch = 16) title(   main = \"Planes\",   sub = paste0(     \"N: \", nrow(planes), \" | Fabric strength: \", round(fabric_p, 2),     \"\\nLambert equal area, lower hemisphere projection\"   ) )  stereoplot(guides = TRUE, col = \"grey96\") points(lines, col = \"grey\", pch = 16, cex = .5) contour(lines, add = TRUE, weights = line_weightings) points(lines_mean, col = \"black\", pch = 16) title(   main = \"Lines\",   sub = paste0(     \"N: \", nrow(lines), \" | Fabric strength: \", round(fabric_l, 2),     \"\\nLambert equal area, lower hemisphere projection\"   ) )"},{"path":"https://tobiste.github.io/structr/articles/3_Stereographic_projection_ggplot.html","id":"stereographic-projection","dir":"Articles","previous_headings":"","what":"Stereographic projection","title":"3. Stereographic projections with ggplot","text":"Adding great circles:","code":"ggstereo() +   geom_point(data = gg(planes), aes(x, y, color = \"planes\")) +   geom_point(data = gg(lines), aes(x, y, color = \"lines\")) +   labs(title = \"Example data\", color = NULL) ggstereo() +   geom_path(data = ggl(planes), aes(x, y, color = \"planes\"), lwd = .1) +   geom_point(data = gg(lines), aes(x, y, color = \"lines\")) +   labs(title = \"Example data\", color = NULL)"},{"path":"https://tobiste.github.io/structr/articles/3_Stereographic_projection_ggplot.html","id":"statistics","dir":"Articles","previous_headings":"","what":"Statistics","title":"3. Stereographic projections with ggplot","text":"","code":"quality <- runif(nrow(lines), min = 1, max = 45) # assigning a random quality score to the data (can be replaced with real data)  lines_mean <- mean(lines, w = 1 / quality) lines_delta <- delta(lines, w = 1 / quality)  ggstereo() +   geom_point(data = gg(lines, quality), aes(x, y, size = quality)) +   scale_size(\"Quality\", range = c(3, .1)) +   geom_path(data = ggl(lines_mean, d = lines_delta), aes(x, y, color = \"Std\"), lwd = .1) +   geom_point(data = gg(lines_mean), aes(x, y, color = \"Mean\"), size = 5, shape = 17) +   labs(title = \"Example data\", color = NULL)"},{"path":"https://tobiste.github.io/structr/articles/3_Stereographic_projection_ggplot.html","id":"density-plots","dir":"Articles","previous_headings":"","what":"Density plots","title":"3. Stereographic projections with ggplot","text":"","code":"ggstereo() +   geom_contourf_stereo(gg(planes), show.legend = TRUE, norm = TRUE) +   scale_fill_viridis_d(\"Density\") +   geom_point(data = gg(planes), aes(x, y)) +   labs(title = \"Example data\", color = NULL)"},{"path":"https://tobiste.github.io/structr/articles/3_Stereographic_projection_ggplot.html","id":"facets","dir":"Articles","previous_headings":"","what":"Facets","title":"3. Stereographic projections with ggplot","text":"","code":"area_l <- LETTERS[sample.int(3, nrow(lines), replace = TRUE)] area_p <- LETTERS[sample.int(3, nrow(planes), replace = TRUE)]  lines_df <- gg(lines, area = area_l) planes_df <- ggl(planes, area = area_p)  ggstereo(data = lines_df, aes(x = x, y = y, color = area)) +   geom_path(data = planes_df, aes(x = x, y = y, group = group), alpha = .25, color = \"grey\") +   geom_point() +   facet_wrap(vars(area)) +   labs(title = \"Example data\", color = NULL)"},{"path":"https://tobiste.github.io/structr/articles/4_Faults.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"4. Faults","text":"fault given orientation plane (dip direction dip angle), orientation slip (e.g. measured striae, given azimuth plunge angles), sense displacement: Sense fault displacement 1 -1 normal thrust offset, respectively. Rake fault, .e. angle fault slip vector fault strike: Define fault just knowing orientation fault plane, sense, rake Often measured orientation angles can (slightly) imprecise subjected random noise. Thus slip vector lie (perfectly) fault plane, judging measurements. correct measurements case: \"Pair\" object container associated plane line measurements. Basically like fault wihtout sense displacement.","code":"my_fault <- Fault(120, 50, 60, 110, sense = -1) Fault_rake(my_fault) ## [1] -107.2294 fault_plane <- Plane(c(120, 120, 100), c(60, 60, 50)) # dip direction, dip angle Fault_from_rake(fault_plane, rake = c(84.7202, -10, 30)) ## Fault object (n = 3): ##      dip_direction dip   azimuth    plunge sense ## [1,]           120  60 109.52858 59.581591     1 ## [2,]           120  60 204.96163  8.649165    -1 ## [3,]           100  50  30.36057 22.521012     1 p <- Pair(120, 60, 110, 58) misfit_pair(p) ## $fvec ## Vector (Vec3) object (n = 1): ##          x          y          z  ##  0.4306074 -0.7432627  0.5119940  ##  ## $lvec ## Vector (Vec3) object (n = 1): ##          x          y          z  ## -0.1752467  0.4876291  0.8552815  ##  ## $misfit ## [1] 0.02793105 correct_pair(p) ## Pair object (n = 1): ## dip_direction           dip       azimuth        plunge  ##     120.08575      59.20326     109.76769      58.79085"},{"path":"https://tobiste.github.io/structr/articles/4_Faults.html","id":"fault-stress-analysis","dir":"Articles","previous_headings":"","what":"Fault stress analysis","title":"4. Faults","text":"Calculates PT-axes, kinematic plane (M), dihedra separation plane (d):","code":"my_fault2 <- Fault(c(120, 120, 100), c(60, 60, 50), c(110, 25, 30), c(58, 9, 23), c(1, -1, 1)) print(my_fault2) ## Fault object (n = 3): ##      dip_direction dip azimuth plunge sense ## [1,]           120  60     110     58     1 ## [2,]           120  60      25      9    -1 ## [3,]           100  50      30     23     1 fault_analysis(my_fault2) ## $p ## Line object (n = 3): ##       azimuth   plunge ## [1,] 314.9694 75.19695 ## [2,] 248.4032 15.30354 ## [3,] 342.4517 46.65113 ##  ## $t ## Line object (n = 3): ##       azimuth   plunge ## [1,] 116.2068 14.04837 ## [2,] 345.9417 25.61490 ## [3,] 241.3308 10.31892 ##  ## $m ## Plane object (n = 3): ##      dip_direction      dip ## [1,]      27.35344 85.42739 ## [2,]     310.64119 30.43222 ## [3,]     322.06010 48.49732 ##  ## $d ## Plane object (n = 3): ##      dip_direction      dip ## [1,]      289.7677 31.20915 ## [2,]      208.8622 83.16168 ## [3,]      210.2233 67.19865"},{"path":"https://tobiste.github.io/structr/articles/4_Faults.html","id":"sec-offset","dir":"Articles","previous_headings":"","what":"Fault offsets","title":"4. Faults","text":"offset along fault can factorized several components.","code":""},{"path":[]},{"path":"https://tobiste.github.io/structr/articles/4_Faults.html","id":"sec-offset-1","dir":"Articles","previous_headings":"Fault offsets > Get different components with trigonometry","what":"1. Input: Fault orientation (dip angle, dip direction), shorteninig direction, and horizontal throw","title":"4. Faults","text":"Knowing horizontal throw (e.g. plate motion parameters), remaining components displacements along given fault follows. δ=|σHmax−(dip direction+90∘)|\\begin{equation}\\delta = |\\sigma_{\\textrm{Hmax}} - (\\textrm{dip direction}+90^{\\circ})|\\end{equation} Slip components horizontal plane: fstrike slip=|cosδ*fhorizontal throw|fheave=fhorizontal throw2−fstrike slip2\\begin{equation}\\begin{split}   f_\\textrm{strike slip} & = |\\cos{\\delta} * f_\\textrm{horizontal throw}|\\\\   f_\\textrm{heave} & = \\sqrt{f_\\textrm{horizontal throw}^2 - f_\\textrm{strike slip}^2}   \\end{split}\\end{equation} Slip components vertical plane perpendicular strike fault: fdip slip=fheavecos(dip)fvertical throw=fdip slip2−fheave2\\begin{equation}\\begin{split}   f_\\textrm{dip slip} &=  \\frac{f_\\textrm{heave}}{cos{(\\textrm{dip})}}\\\\   f_\\textrm{vertical throw} &= \\sqrt{f_\\textrm{dip slip}^2 - f_\\textrm{heave}^2}   \\end{split}\\end{equation} Slip components fault plane plane: fnet slip=fstrike slip2+fdip slip2rake=arctan(fdip slipfstrike slip)\\begin{equation}\\begin{split}   f_\\textrm{net slip} &= \\sqrt{f_\\textrm{strike slip}^2 + f_\\textrm{dip slip}^2}\\\\   \\textrm{rake} &= \\arctan{\\left(\\frac{f_\\textrm{dip slip}}{f_\\textrm{strike slip}}\\right)}   \\end{split}\\end{equation} Thus, rake angle describes ratio dip slip strike slip component. Knowing vertical throw (e.g. thermochronology petrology), fault dip (?assumption), direction amount horizontal offset, strike fault follows: fheave=fvertical throw*tan(dip)δ=arcsin(fheavefhorizontal throw)strike=|σHmax−δ|\\begin{equation}\\begin{split} f_\\textrm{heave} &= f_\\textrm{vertical throw} * \\tan{(\\textrm{dip})}\\\\ \\delta &= \\arcsin{\\left(\\frac{f_\\textrm{heave}}{f_\\textrm{horizontal throw}}\\right)}\\\\ \\textrm{strike} &= |\\sigma_{\\textrm{Hmax}} - \\delta| \\end{split}\\end{equation} Knowing vertical throw (e.g. thermochronology petrology), fault strike (geomorphology), direction amount horizontal offset, dip fault follows: δ=|σHmax−strike|fheave=fhorizontal throw*sinδdip=arctan(fheavefvertical throw)\\begin{equation}\\begin{split} \\delta &= |\\sigma_{\\textrm{Hmax}} - \\textrm{strike}|\\\\ f_\\textrm{heave} &= f_\\textrm{horizontal throw} * \\sin{\\delta} \\\\ \\textrm{dip} &= \\arctan{\\left(\\frac{f_\\textrm{heave}}{f_\\textrm{vertical throw}}\\right)}  \\end{split}\\end{equation} Knowing vertical throw (e.g. thermochronology petrology) fault’s dip rake, horizontal offset, horizontal throw, net-slip follows:","code":""},{"path":"https://tobiste.github.io/structr/articles/4_Faults.html","id":"sec-tensors","dir":"Articles","previous_headings":"","what":"Fault displacement tensors","title":"4. Faults","text":"fault component vector describing direction length. instance, vector strike slip : fstrike slip→=(∥fstrike-slip∥00)\\begin{equation}   \\vec{f_\\text{strike slip}} = \\begin{pmatrix} \\lVert f_\\textrm{strike-slip}\\rVert \\\\ 0 \\\\ 0 \\end{pmatrix} \\end{equation}","code":""},{"path":"https://tobiste.github.io/structr/articles/4_Faults.html","id":"sec-tensors-netslip","dir":"Articles","previous_headings":"Fault displacement tensors","what":"Net slip vector","title":"4. Faults","text":"Net slip vector fnet→=(∥fstrike-slip∥∥fheave∥∥fvertical throw∥)\\begin{equation}   \\vec{f_\\text{net}} = \\begin{pmatrix} \\lVert f_\\textrm{strike-slip}\\rVert \\\\ \\lVert f_\\textrm{heave}\\rVert \\\\ \\lVert f_\\textrm{vertical throw}\\rVert \\end{pmatrix} \\end{equation}","code":"fault_displacements(strikeslip = 2, verticalthrow = -5, heave = 3)"},{"path":"https://tobiste.github.io/structr/articles/4_Faults.html","id":"sec-tensors-principal","dir":"Articles","previous_headings":"Fault displacement tensors","what":"Principal displacement tensor","title":"4. Faults","text":"Eigen values 𝖥ij\\mathsf{F}_{ij}; represented {f1→,f2→,f3→}\\{ \\vec{f_1}, \\vec{f_2}, \\vec{f_3} \\} referred heave, strike slip, vertical throw component, respectively. orthonormal vectors define orthogonal matrix, .e. principal displacement tensor 𝖥𝔽\\mathsf{F}_\\mathbb{F}: 𝖥𝔽=[∥fheave∥000∥fstrike-slip∥000∥fvertical throw∥]\\begin{equation}\\mathsf{F}_{\\mathbb{F}} = {\\begin{bmatrix} \\lVert f_\\textrm{heave}\\rVert & 0 & 0\\\\ 0 & \\lVert f_\\textrm{strike-slip}\\rVert & 0\\\\ 0 & 0 & \\lVert f_\\textrm{vertical throw}\\rVert\\end{bmatrix}}\\end{equation} tensor 𝖥\\mathsf{F} can also defined magnitudes fault displacements:","code":"Fu <- fault_tensor(s = 2, v = -5, h = 3) print(Fu) ##      [,1] [,2] [,3] ## [1,]    3    0    0 ## [2,]    0    2    0 ## [3,]    0    0   -5 ## attr(,\"class\") ## [1] \"matrix\"  \"array\"   \"ftensor\""},{"path":"https://tobiste.github.io/structr/articles/4_Faults.html","id":"sec-tensors-orientation","dir":"Articles","previous_headings":"Fault displacement tensors","what":"Orientation tensor","title":"4. Faults","text":"Fault orientation tensor defined fault plane’s location, orientation (dip direction dip angle), fault’s slip (direction magnitude): 𝖥ij=[f11f12f13f21f22f23f31f32f33]\\begin{equation}\\mathsf{F}_{ij} = {\\begin{bmatrix}f_{11} & f_{12} & f_{13}\\\\ f_{21} & f_{22} & f_{23}\\\\ f_{31} & f_{32} & f_{33}\\end{bmatrix}}\\end{equation}","code":"Fg <- fault_tensor(s = 2, v = -5, h = 3, dip_direction = 45) print(Fg) ##         [,1]      [,2] [,3] ## [1,] 2.12132  1.414214    0 ## [2,] 2.12132 -1.414214    0 ## [3,] 0.00000  0.000000   -5 ## attr(,\"class\") ## [1] \"matrix\"  \"array\"   \"ftensor\""},{"path":"https://tobiste.github.io/structr/articles/4_Faults.html","id":"from-principal-displacement-tensor-to-orientation-tensor","dir":"Articles","previous_headings":"Fault displacement tensors > Orientation tensor","what":"From Principal displacement tensor to Orientation tensor","title":"4. Faults","text":"Translation point origin 𝖥𝔽\\mathsf{F_\\mathbb{F}} point measurement rotate fault orientation 𝖥𝔽𝔾\\mathsf{F}_\\mathbb{FG}","code":"fault_tensor_decomposition(Fg, dip_direction = 45) ## $displacements ##           dip    delta     rake verticalthrow horizontalthrow heave  dipslip ## [1,] 300.9638 56.30993 71.06818            -5        3.605551     3 5.830952 ##      strikeslip  netslip ## [1,]          2 6.164414 ##  ## $fault ## Fault object (n = 1): ## dip_direction           dip       azimuth        plunge         sense  ##      45.00000     300.96376     258.69007      54.20424      -1.00000  ##  ## $strain_tensor ##      [,1] [,2] [,3] ## [1,]  3.0 -1.5 -1.5 ## [2,] -1.0  1.0 -1.0 ## [3,]  2.5  2.5 15.0 ##  ## $volumetric_strain ## [1] 19 ##  ## $shear_strain ## [1] 5.196152"},{"path":"https://tobiste.github.io/structr/articles/4_Faults.html","id":"stress-tensor","dir":"Articles","previous_headings":"Fault displacement tensors","what":"Stress tensor","title":"4. Faults","text":"continuum mechanics, Cauchy stress tensor σ\\sigma, true stress tensor, simply called stress tensor second order tensor named Augustin-Louis Cauchy. tensor consists nine components σij\\sigma_{ij} completely define state stress point inside material deformed state, placement, configuration. tensor relates unit-length direction vector n traction vector T(n)T^{(n)} across imaginary surface perpendicular n: T(n)=n*σ\\begin{equation} T^{(n)} = n * \\sigma \\end{equation} Tj(n)=ni*σij\\begin{equation} T^{(n)}_j = n_{}*\\sigma_{ij}\\end{equation}","code":""},{"path":"https://tobiste.github.io/structr/articles/4_Faults.html","id":"transformation-of-the-stress-tensor","dir":"Articles","previous_headings":"","what":"Transformation of the stress tensor","title":"4. Faults","text":"can shown stress tensor contravariant second order tensor, statement transforms change coordinate system. xix_i-system xi′x_i'-system, components σij\\sigma_{ij} initial system transformed components σij′\\sigma_{ij}' new system according tensor transformation rule (see Figure 2): σ=aimajnσmn\\sigma = a_{im} a_{jn} \\sigma_{mn} σ′=𝖠σ𝖠T\\sigma' = \\mathsf{} \\sigma \\mathsf{}^{T}, 𝖠\\mathsf{} rotation matrix components aija_{ij}. matrix form [σ′11σ′12σ′13σ′21σ′22σ′23σ′31σ′32σ′33]=[a11a12a13a21a22a23a31a32a33][σ11σ12σ13σ21σ22σ23σ31σ32σ33][a11a12a13a21a22a23a31a32a33]\\begin{equation} \\begin{bmatrix}  \\sigma'_{11} & \\sigma'_{12} & \\sigma'_{13} \\\\ \\sigma'_{21} & \\sigma'_{22} & \\sigma'_{23} \\\\ \\sigma'_{31} & \\sigma'_{32} & \\sigma'_{33} \\end{bmatrix} = \\begin{bmatrix}  a_{11} & a_{12} & a_{13} \\\\ a_{21} & a_{22} & a_{23} \\\\ a_{31} & a_{32} & a_{33} \\end{bmatrix} \\begin{bmatrix}  \\sigma_{11} & \\sigma_{12} & \\sigma_{13} \\\\ \\sigma_{21} & \\sigma_{22} & \\sigma_{23} \\\\ \\sigma_{31} & \\sigma_{32} & \\sigma_{33} \\end{bmatrix} \\begin{bmatrix}  a_{11} & a_{12} & a_{13} \\\\ a_{21} & a_{22} & a_{23} \\\\ a_{31} & a_{32} & a_{33} \\end{bmatrix} \\end{equation} Expanding matrix operation, simplifying terms using symmetry stress tensor, gives σ11′=a112σ11+a122σ22+a132σ33+2a11a12σ12+2a11a13σ13+2a12a13σ23\\sigma_{11}' = a_{11}^{2}\\sigma_{11} + a_{12}^{2}\\sigma_{22} + a_{13}^{2}\\sigma_{33} + 2a_{11}a_{12}\\sigma_{12} + 2a_{11}a_{13}\\sigma_{13} + 2a_{12}a_{13}\\sigma_{23}, σ22′=a212σ11+a222σ22+a232σ33+2a21a22σ12+2a21a23σ13+2a22a23σ23\\sigma _{22}'=a_{21}^{2}\\sigma _{11}+a_{22}^{2}\\sigma _{22}+a_{23}^{2}\\sigma _{33}+2a_{21}a_{22}\\sigma _{12}+2a_{21}a_{23}\\sigma _{13}+2a_{22}a_{23}\\sigma _{23}, σ33′=a312σ11+a322σ22+a332σ33+2a31a32σ12+2a31a33σ13+2a32a33σ23\\sigma _{33}'=a_{31}^{2}\\sigma _{11}+a_{32}^{2}\\sigma _{22}+a_{33}^{2}\\sigma _{33}+2a_{31}a_{32}\\sigma _{12}+2a_{31}a_{33}\\sigma _{13}+2a_{32}a_{33}\\sigma _{23}, σ12′=a11a21σ11+a12a22σ22+a13a23σ33+(a11a22+a12a21)σ12+(a12a23+a13a22)σ23+(a11a23+a13a21)σ13\\sigma _{12}'=a_{11}a_{21}\\sigma _{11}+a_{12}a_{22}\\sigma _{22}+a_{13}a_{23}\\sigma _{33}+(a_{11}a_{22}+a_{12}a_{21})\\sigma _{12}+(a_{12}a_{23}+a_{13}a_{22})\\sigma _{23}+(a_{11}a_{23}+a_{13}a_{21})\\sigma _{13}, σ23′=a21a31σ11+a22a32σ22+a23a33σ33+(a21a32+a22a31)σ12+(a22a33+a23a32)σ23+(a21a33+a23a31)σ13\\sigma _{23}'=a_{21}a_{31}\\sigma _{11}+a_{22}a_{32}\\sigma _{22}+a_{23}a_{33}\\sigma _{33}+(a_{21}a_{32}+a_{22}a_{31})\\sigma _{12}+(a_{22}a_{33}+a_{23}a_{32})\\sigma _{23}+(a_{21}a_{33}+a_{23}a_{31})\\sigma _{13}, σ13′=a11a31σ11+a12a32σ22+a13a33σ33+(a11a32+a12a31)σ12+(a12a33+a13a32)σ23+(a11a33+a13a31)σ13\\sigma _{13}'=a_{11}a_{31}\\sigma _{11}+a_{12}a_{32}\\sigma _{22}+a_{13}a_{33}\\sigma _{33}+(a_{11}a_{32}+a_{12}a_{31})\\sigma _{12}+(a_{12}a_{33}+a_{13}a_{32})\\sigma _{23}+(a_{11}a_{33}+a_{13}a_{31})\\sigma _{13}. Mohr circle stress graphical representation transformation stresses.","code":""},{"path":"https://tobiste.github.io/structr/articles/4_Faults.html","id":"normal-and-shear-stresses","dir":"Articles","previous_headings":"Transformation of the stress tensor","what":"Normal and shear stresses","title":"4. Faults","text":"magnitude normal stress component σn stress vector T(n)T(n) acting arbitrary plane normal unit vector n given point, terms components σij\\sigma_{ij} stress tensor σ\\sigma, dot product stress vector normal unit vector: σn→=𝐓(n)⋅n→=Ti(n)ni=σijninj.\\begin{equation} \\begin{split} \\sigma_\\vec{n} & = \\mathbf{T}^{(n)}\\cdot \\vec{n} \\\\  & = T^{(n)}_i n_i \\\\  & =\\sigma_{ij} n_i n_j. \\end{split} \\end{equation} magnitude shear stress component τn\\tau_n, acting orthogonal vector n, can found using Pythagorean theorem: τn=(T(𝐧))2−σn2=Ti(𝐧)Ti(𝐧)−σn2,\\begin{equation} \\begin{split} \\tau_{\\mathrm {n} }&={\\sqrt{\\left(T^{(\\mathbf{n})}\\right)^{2} - \\sigma_{\\mathrm{n}}^{2}}}\\\\ &={\\sqrt{T_{}^{(\\mathbf{n})}T_{}^{(\\mathbf{n})} - \\sigma_{\\mathrm{n}}^{2}}}, \\end{split} \\end{equation} (T(𝐧))2=Ti(𝐧)Ti(𝐧)=(σijnj)(σiknk)=σijσiknjnk.\\begin{equation}{\\displaystyle \\left(T^{(\\mathbf {n} )}\\right)^{2}=T_{}^{(\\mathbf {n} )}T_{}^{(\\mathbf {n} )}=\\left(\\sigma _{ij}n_{j}\\right)\\left(\\sigma _{ik}n_{k}\\right)=\\sigma _{ij}\\sigma _{ik}n_{j}n_{k}}.\\end{equation}","code":""},{"path":"https://tobiste.github.io/structr/articles/4_Faults.html","id":"principal-stress","dir":"Articles","previous_headings":"Transformation of the stress tensor","what":"Principal stress","title":"4. Faults","text":"every point stressed body least three planes, called principal planes, normal vectors n→\\vec{n}, called principal directions, corresponding stress vector perpendicular plane, .e., parallel direction normal vector n→\\vec{n}, normal shear stressesτn→{\\displaystyle \\tau _{\\vec{n}}}. three stresses normal principal planes called principal stresses. components σij\\sigma _{ij} stress tensor depend orientation coordinate system point consideration. However, stress tensor physical quantity , independent coordinate system chosen represent . certain invariants associated every tensor also independent coordinate system. example, vector simple tensor rank one. three dimensions, three components. value components depend coordinate system chosen represent vector, magnitude vector physical quantity (scalar) independent Cartesian coordinate system chosen represent vector (long normal). Similarly, every second rank tensor (stress strain tensors) three independent invariant quantities associated . One set invariants principal stresses stress tensor, just eigenvalues stress tensor. direction vectors principal directions eigenvectors. stress vector parallel normal unit vector n→\\vec{n} given : 𝐓(n)=λn→=𝛔nn→\\begin{equation}   \\mathbf{T}^{(n)} = \\lambda \\vec{n} = \\mathbf{\\sigma}_{n}\\vec{n} \\end{equation} λ\\lambda constant proportionality, particular case corresponds magnitudes σn\\sigma_{n} normal stress vectors principal stresses. coordinate system axes oriented principal directions implies normal stresses principal stresses stress tensor represented diagonal matrix: σij=[σ1000σ2000σ3]\\begin{equation}   \\sigma_{ij}={\\begin{bmatrix}\\sigma_{1}&0&0\\\\0&\\sigma_{2}&0\\\\0&0&\\sigma_{3}\\end{bmatrix}} \\end{equation} principal stresses can combined form stress invariants, I1I_{1}, I2I_{2}, I3I_{3}. first third invariant trace determinant respectively, stress tensor. Thus, I1=σ1+σ2+σ3I2=σ1σ2+σ2σ3+σ3σ1I3=σ1σ2σ3\\begin{equation}  \\begin{split}   I_{1} & = \\sigma_{1}+\\sigma_{2}+\\sigma_{3}\\\\   I_{2} & = \\sigma_{1}\\sigma_{2}+\\sigma_{2}\\sigma_{3}+\\sigma_{3}\\sigma_{1}\\\\   I_{3} & = \\sigma_{1}\\sigma_{2}\\sigma_{3}   \\end{split} \\end{equation} simplicity, principal coordinate system often useful considering state elastic medium particular point. Principal stresses often expressed following equation evaluating stresses x y directions axial bending stresses part. principal normal stresses can used calculate von Mises stress ultimately safety factor margin safety. σ1,σ2=σx+σy2±(σx−σy2)2+τxy2\\begin{equation}   \\sigma_{1},\\sigma_{2}={\\frac {\\sigma_{x}+\\sigma_{y}}{2}}\\pm {\\sqrt {\\left({\\frac {\\sigma_{x}-\\sigma_{y}}{2}}\\right)^{2}+\\tau_{xy}^{2}}} \\end{equation} Using just part equation square root equal maximum minimum shear stress plus minus. shown : τmax,τmin=±(σx−σy2)2+τxy2\\begin{equation}   \\tau_{\\max },\\tau_{\\min }=\\pm {\\sqrt {\\left({\\frac {\\sigma_{x}-\\sigma_{y}}{2}}\\right)^{2}+\\tau_{xy}^{2}}} \\end{equation}","code":""},{"path":"https://tobiste.github.io/structr/articles/4_Faults.html","id":"stress-deviator-tensor","dir":"Articles","previous_headings":"Transformation of the stress tensor","what":"Stress deviator tensor","title":"4. Faults","text":"stress tensor σij\\sigma_{ij} can expressed sum two stress tensors: mean hydrostatic stress tensor volumetric stress tensor mean normal stress tensor, πδij\\pi \\delta_{ij}, tends change volume stressed body; deviatoric component called stress deviator tensor, sijs_{ij}, tends distort . σij=sij+πδij,\\begin{equation}   \\sigma_{ij} = s_{ij} + \\pi \\delta_{ij}, \\end{equation} π\\pi mean stress given π=σkk3=σ11+σ22+σ333=13I1,\\begin{equation} \\pi ={\\frac {\\sigma_{kk}}{3}}={\\frac{\\sigma_{11}+\\sigma _{22}+\\sigma_{33}}{3}}={\\frac {1}{3}}I_{1}, \\end{equation} Pressure (pp) generally defined negative one-third trace stress tensor minus stress divergence velocity contributes , .e. p=λ∇⋅u→−π=λ∂uk∂xk−π=∑kλ∂uk∂xk−π,\\begin{equation} p=\\lambda \\,\\nabla \\cdot {\\vec {u}}-\\pi =\\lambda \\,{\\frac {\\partial u_{k}}{\\partial x_{k}}}-\\pi =\\sum_{k}\\lambda \\,{\\frac {\\partial u_{k}}{\\partial x_{k}}}-\\pi, \\end{equation} λ\\lambda proportionality constant, ∇\\nabla divergence operator, xkx_{k} k:th Cartesian coordinate, u→\\vec{u} velocity uku_{k} k:th Cartesian component u→\\vec{u}. deviatoric stress tensor can obtained subtracting hydrostatic stress tensor Cauchy stress tensor: sij=σij−σkk3δij,[s11s12s13s21s22s23s31s32s33]=[σ11σ12σ13σ21σ22σ23σ31σ32σ33]−[π000π000π]=[σ11−πσ12σ13σ21σ22−πσ23σ31σ32σ33−π].\\begin{equation} \\begin{split}  s_{ij} & = \\sigma_{ij} - {\\frac {\\sigma_{kk}}{3}}\\delta_{ij},\\\\  \\begin{bmatrix}s_{11}&s_{12}&s_{13}\\\\s_{21}&s_{22}&s_{23}\\\\s_{31}&s_{32}&s_{33}\\end{bmatrix} & = \\begin{bmatrix}\\sigma_{11}&\\sigma_{12}&\\sigma_{13}\\\\\\sigma_{21}&\\sigma_{22}&\\sigma_{23}\\\\\\sigma_{31}&\\sigma_{32}&\\sigma_{33}\\end{bmatrix} - \\begin{bmatrix}\\pi &0&0\\\\0&\\pi &0\\\\0&0&\\pi \\end{bmatrix}\\\\ & = \\begin{bmatrix}\\sigma_{11}-\\pi &\\sigma_{12}&\\sigma_{13}\\\\\\sigma_{21}&\\sigma_{22}-\\pi &\\sigma_{23}\\\\\\sigma_{31}&\\sigma_{32}&\\sigma_{33}-\\pi \\end{bmatrix}. \\end{split} \\end{equation}","code":""},{"path":"https://tobiste.github.io/structr/articles/4_Faults.html","id":"maximum-horizontal-stressref2","dir":"Articles","previous_headings":"Transformation of the stress tensor","what":"Maximum horizontal stress1","title":"4. Faults","text":"de fine vertical plane geographic coordinate system, 𝔾\\mathbb{G}, using unit normal vector, n→𝔾T=(nN,nE,nD)=(cosα,sinα,0)\\vec{n}^T_\\mathbb{G} = (n_N, n_E, n_D) = (\\cos\\alpha, \\sin\\alpha, 0), α\\alpha normal’s trend angle measured clockwise north plane’s strike α+π/2\\alpha+\\pi/2. represent n→\\vec{n} respect principal stress coordinate system using transformation matrix 𝖠𝕊𝔾=(σ→1g→1σ→1g→2σ→1g→3σ→2g→1σ→2g→2σ→2g→3σ→3g→1σ→3g→2σ→3g→3)\\begin{equation} \\mathsf{}_{\\mathbb{S}\\mathbb{G}} = \\begin{pmatrix} \\vec{\\sigma}_1 \\vec{g}_1 & \\vec{\\sigma}_1 \\vec{g}_2 & \\vec{\\sigma}_1 \\vec{g}_3 \\\\ \\vec{\\sigma}_2 \\vec{g}_1 & \\vec{\\sigma}_2 \\vec{g}_2 & \\vec{\\sigma}_2 \\vec{g}_3 \\\\ \\vec{\\sigma}_3 \\vec{g}_1 & \\vec{\\sigma}_3 \\vec{g}_2 & \\vec{\\sigma}_3 \\vec{g}_3 \\\\ \\end{pmatrix} \\end{equation} (.e. aij=σigja_{ij} = \\sigma_i g_j). σi=(σiN,σiE,σiD)\\sigma_i = (\\sigma_{}, \\sigma_{iE}, \\sigma_{iD}) unit vectors principal stress directions (principal stress coordinate system 𝕊\\mathbb{S} unit vectors {𝛔𝟏→,𝛔𝟐→,𝛔𝟑→}\\{ \\mathbf{\\vec{\\sigma_1}}, \\mathbf{\\vec{\\sigma_2}}, \\mathbf{\\vec{\\sigma_3}} \\}) respect geographic coordinate system (𝔾\\mathbb{G}), g1→=(1,0,0)\\vec{g_1} = (1,0,0), g2→=(0,1,0)\\vec{g_2} =(0,1,0) g3→=(0,0,1)\\vec{g_3} = (0,0,1) basis vectors geographic coordinate system. normal vector expressed respect principal stress system 𝐧→𝕊=𝖠𝕊𝔾𝐧→𝔾=(σ1NnN+σ1EnEσ2NnN+σ2EnEσ3NnN+σ3EnE),\\begin{equation} \\vec{\\mathbf{n}}_\\mathbb{S} = \\mathsf{}_{\\mathbb{S}\\mathbb{G}}\\vec{\\mathbf{n}}_\\mathbb{G} = \\begin{pmatrix} \\sigma_{1N}n_N + \\sigma_{1E}n_E\\\\ \\sigma_{2N}n_N + \\sigma_{2E}n_E\\\\ \\sigma_{3N}n_N + \\sigma_{3E}n_E \\end{pmatrix}, \\end{equation} , example, σ1N\\sigma_{1N} north component σ→1\\vec{\\sigma}_1 unit vector. principal coordinate system, stress tensor diagonal 𝖲𝕊=(∥σ1∥000∥σ2∥000∥σ3∥)\\begin{equation} \\mathsf{S}_\\mathbb{S} =  \\begin{pmatrix}  \\lVert \\sigma_1 \\rVert & 0 & 0 \\\\ 0 & \\lVert\\sigma_2\\rVert & 0 \\\\ 0 & 0 & \\lVert\\sigma_3\\rVert \\end{pmatrix} \\end{equation} normal stress acting vertical plane interest σn=(𝐧→𝕊T𝖲𝕊𝐧→𝕊)=[∥σ1∥(σ1NnN+σ1EnE)2+∥σ2∥(σ2NnN+σ2EnE)2+∥σ3∥(σ3NnN+σ3EnE)2]𝐧→𝕊=∥σn∥𝐧→𝕊.\\begin{equation} \\begin{split} \\sigma_n &= \\left( \\mathbf{\\vec{n}}^T_\\mathbb{S} \\mathsf{S}_\\mathbb{S} \\mathbf{\\vec{n}}_\\mathbb{S} \\right)\\\\  &= \\left[    \\lVert\\sigma_1\\rVert ( \\sigma_{1N}n_N + \\sigma_{1E}n_E )^2 +   \\lVert\\sigma_2\\rVert ( \\sigma_{2N}n_N + \\sigma_{2E}n_E )^2 +  \\lVert\\sigma_3\\rVert (\\sigma_{3N}n_N + \\sigma_{3E}n_E)^2   \\right] \\mathbf{\\vec{n}}_{\\mathbb{S}}\\\\  &= \\lVert\\sigma_n\\rVert \\mathbf{\\vec{n}}_\\mathbb{S}. \\end{split} \\end{equation} normal stress corresponds horizontal stress direction 𝐧→\\mathbf{\\vec{n}}. can find direction maximum horizontal stress analytically differentiating last equation respect α\\alpha. dσndα=[∥σ1∥(σ1E2−σ1N2)+∥σ2∥(σ2E2−σ2N2)+∥σ3∥(σ3E2−σ3N2)]sin2α+2[∥σ1∥σ1Nσ1E+∥σ2∥σ2Nσ2E+∥σ3∥σ3Nσ3E]cos2α.\\begin{equation} \\frac{d\\sigma_n}{d\\alpha} = \\left[ \\lVert\\sigma_1\\rVert ( \\sigma_{1E}^2 - \\sigma_{1N}^2 ) +  \\lVert\\sigma_2\\rVert ( \\sigma_{2E}^2 - \\sigma_{2N}^2 ) + \\lVert\\sigma_3\\rVert ( \\sigma_{3E}^2 - \\sigma_{3N}^2 ) \\right] \\sin{2\\alpha} +  2 \\left[\\lVert\\sigma_1\\rVert \\sigma_{1N} \\sigma_{1E} + \\lVert\\sigma_2\\rVert \\sigma_{2N} \\sigma_{2E} + \\lVert\\sigma_3\\rVert \\sigma_{3N} \\sigma_{3E} \\right] \\cos{2\\alpha}. \\end{equation} Table 1 Summary conditions denominator eq. (11) equals zero. αH\\alpha_H α1\\alpha_1 denote trends axis maximum horizontal stress, σH\\sigma_H, principal axis maximum compressive stress, 𝛔𝟏→\\mathbf{\\vec{\\sigma_1}}, respectively. general (cf. Table 1), σn\\sigma_n one maximum one minimum interval 0≤α≤π0 \\leq \\alpha \\leq \\pi setting derivative last equation zero, find stationary points: tan2α=2(∥σ1∥σ1Nσ1E+∥σ2∥σ2Nσ2E+∥σ3∥σ3Nσ3E)∥σ1∥(σ1E2−σ1N2)+∥σ2∥(σ2E2−σ2N2)+∥σ3∥(σ3E2−σ3N2).\\begin{equation} \\tan{2\\alpha} = \\frac{ 2 ( \\lVert\\sigma_1\\rVert \\sigma_{1N} \\sigma_{1E} + \\lVert\\sigma_2\\rVert \\sigma_{2N} \\sigma_{2E} + \\lVert\\sigma_3\\rVert \\sigma_{3N} \\sigma_{3E} )}{\\lVert\\sigma_1\\rVert ( \\sigma_{1E}^2 - \\sigma_{1N}^2 ) +  \\lVert\\sigma_2\\rVert ( \\sigma_{2E}^2 - \\sigma_{2N}^2 ) + \\lVert\\sigma_3\\rVert ( \\sigma_{3E}^2 - \\sigma_{3N}^2 )}. \\end{equation} Using second derivative σn\\sigma_n respect α\\alpha can determine whether σn(α)\\sigma_n (\\alpha) yields maximum minimum value, identify σH\\sigma_H trend (αH\\alpha_H) accordingly: αH={αif ∥σn(α)∥ maximumα+π/2if ∥σn(α)∥ minimum.\\begin{equation} \\alpha_H =  \\begin{cases} \\alpha & \\text{$\\lVert\\sigma_n (\\alpha)\\rVert$ maximum} \\\\ \\alpha + \\pi/2 & \\text{$\\lVert\\sigma_n (\\alpha)\\rVert$ minimum}  \\end{cases}. \\end{equation}","code":""},{"path":"https://tobiste.github.io/structr/articles/4_Faults.html","id":"code","dir":"Articles","previous_headings":"Transformation of the stress tensor > Maximum horizontal stress1","what":"Code","title":"4. Faults","text":"Define orientation principle stress axes: get S2 - perpendicular S1 S3, calculate cross-product two vectors: azimuth SHmax given stress ratio R = 1: several stress ratios:","code":"S1 <- Line(250.89, 70.07) S3 <- Line(103.01, 17.07) S2 <- crossprod(S3, S1) SH(S1, S2, S3, R = 1) # in degrees ## [1] 70.89 R <- seq(0, 1, .1) cbind(R, SH = SH(S1, S2, S3, R = R)) ##         R       SH ##  [1,] 0.0 13.01021 ##  [2,] 0.1 13.37695 ##  [3,] 0.2 13.84162 ##  [4,] 0.3 14.44908 ##  [5,] 0.4 15.27621 ##  [6,] 0.5 16.46586 ##  [7,] 0.6 18.31445 ##  [8,] 0.7 21.53704 ##  [9,] 0.8 28.23884 ## [10,] 0.9 45.01043 ## [11,] 1.0 70.89000"},{"path":"https://tobiste.github.io/structr/articles/4_Faults.html","id":"mountain-building-and-earthquakes-some-simple-geometrical-calculations","dir":"Articles","previous_headings":"","what":"Mountain building and earthquakes: Some simple geometrical calculations","title":"4. Faults","text":"Suppose wish compute long take 3000 meters (roughly 10,000 feet) uplift occur. Clearly, time requires equal uplift (v=fvertical throwv=f_{\\text{vertical throw}}) divided rate uplift occurs v̇=δfvertical throw)δt\\dot{v} = \\frac{\\delta f_{\\text{vertical throw})}}{\\delta t}. tv=|v|v̇\\begin{equation} t_{\\text{v}} = \\frac{|v|}{\\dot{v}} \\end{equation} compute horizontal strain ε\\varepsilon accumulates known rate (ε̇=5m/200ys\\dot{\\varepsilon} = 5\\,\\text{m} / 200\\,\\text{ys} example) translates vertical uplift rate v̇\\dot{v}, note related tangent dip fault (β\\beta) follows v̇=ḣ*tanβ\\begin{equation}   \\dot{v} = \\dot{h} * \\tan{\\beta} \\end{equation} ḣ=dearthquakeΔtearthquake\\begin{equation}  \\dot{h} = \\frac{d_\\text{earthquake}}{\\Delta t_\\text{earthquake}} \\end{equation} dearthquaked_\\text{earthquake} slip average earthquake; Δtearthquake\\Delta t_\\text{earthquake} earthquake recurrence interval. Suppose uplift occurs along shallow fault dipping 10 degrees horizontal. , tv=3000m5m/200yr*tan10∘=680000yr\\begin{equation}  t_{v} = \\frac{3\\,000\\,\\text{m}}{5\\,\\text{m} / 200\\,\\text{yr}} * \\tan{10^{\\circ}} = 680\\,000\\,\\text{yr} \\end{equation} steeper fault (30∘30^{\\circ}), uplift 3000m3\\,000 \\text{m} occurs even rapidly, 210000yr210\\,000\\,\\text{yr}. Thus, rapid convergence rates even shallow fault dips, significant topographic relief can appear several hundred thousand years - geological instant! course, calculations ignore important effects erosion downward flexure lithosphere load growing mountain, slow rate mountain can grow. shall consider effects future lectures.","code":""},{"path":"https://tobiste.github.io/structr/articles/4_Faults.html","id":"abbreviations-and-symbols","dir":"Articles","previous_headings":"","what":"Abbreviations and symbols","title":"4. Faults","text":"Two coordinate systems importance : principal stress coordinate system, 𝕊\\mathbb{S}, unit vectors {σ1→,σ2→,σ3→}\\{ \\vec{\\sigma_1},\\vec{\\sigma_2},\\vec{\\sigma_3} \\} aligned along eigenvectors whose eigenvalues {∥σ1∥,∥σ2∥,∥σ3∥}\\{ \\lVert\\sigma_1\\rVert,\\lVert\\sigma_2\\rVert, \\lVert\\sigma_3\\rVert  \\}, respectively; geographic coordinate system, 𝔾\\mathbb{G}, unit vectors {g1→,g2→,g3→}\\{\\vec{g_1}, \\vec{g_2}, \\vec{g_3} \\} aligned north, east directions, respectively. paper, matrices represented sans serif upper-case letters (e.g. 𝖲\\mathsf{S}), vectors bold lower-case letters (e.g. 𝐧\\mathbf{n}), vector magnitudes upper-case italics (e.g. Sn=∥𝐬n∥S_n = \\lVert \\mathbf{s}_n \\rVert; Table 2). components matrices vectors represented, example, sijs_{ij} nin_i, respectively, caret subscript (e.g. 𝐬𝐢→\\mathbf{\\vec{s_i}} ) used together denote ith unit basis vector coordinate system (=1,2,3i = 1, 2, 3). Vector orientations expressed terms trend plunge angles trend/plunge (e.g. 135/25). convenience, use upper-case bold symbols two frequently used parameters, namely vectors maximum horizontal stress SHS_H proxy SPS_P. Table 2 Mathematical symbols. Indices ii jj span range 1, 2, 3, arrow (.→\\vec{.}) denotes unit vector.","code":""},{"path":[]},{"path":"https://tobiste.github.io/structr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Tobias Stephan. Author, maintainer.","code":""},{"path":"https://tobiste.github.io/structr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Stephan T (2025). structr: Structural Geology R. R package version 0.2.1.9004, https://tobiste.github.io/structr/.","code":"@Manual{,   title = {structr: Structural Geology in R},   author = {Tobias Stephan},   year = {2025},   note = {R package version 0.2.1.9004},   url = {https://tobiste.github.io/structr/}, }"},{"path":"https://tobiste.github.io/structr/index.html","id":"structr","dir":"","previous_headings":"","what":"Structural Geology in R","title":"Structural Geology in R","text":"structr free open-source package R provides tools structural geology. can analyze visualize orientation data structural geology (including, stereographic projections, contouring, fabric plots, statistics), analyze stress (including visualization magnitudes stress Mohr circle extracting maximum horizontal stress 3D stress tensor), reconstruct orientation structures oriented drill cores using alpha, beta, gamma angles, calculate fault displacement components","code":""},{"path":"https://tobiste.github.io/structr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Structural Geology in R","text":"can install development version structr GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"tobiste/structr\")"},{"path":"https://tobiste.github.io/structr/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Structural Geology in R","text":"basic example shows import data plot sterographic projection.","code":"library(structr) library(ggplot2)  data(example_planes) planes <- Plane(example_planes$dipdir, example_planes$dip)  fabric <- or_shape_params(planes)$Vollmer[\"D\"]  ggstereo() +   geom_contourf_stereo(gg(planes)) +   geom_point(data = gg(planes), aes(x, y), color = \"grey\", shape = 21) +   scale_fill_viridis_d(option = \"F\") +   labs(     subtitle = \"Example data\",     title = \"Density contour plot\",     fill = \"Multiples of\\nvon Mises-Fisher\\ndistribution\",     caption = paste0(\"Equal area, lower hemisphere projection | N: \", nrow(planes), \" | Fabric strength: \", round(fabric, 2))   )"},{"path":"https://tobiste.github.io/structr/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Structural Geology in R","text":"detailed documentation can found https://tobiste.github.io/structr/","code":""},{"path":"https://tobiste.github.io/structr/index.html","id":"author","dir":"","previous_headings":"","what":"Author","title":"Structural Geology in R","text":"Tobias Stephan (tstephan@lakeheadu.ca)","code":""},{"path":"https://tobiste.github.io/structr/index.html","id":"feedback-issues-and-contributions","dir":"","previous_headings":"","what":"Feedback, issues, and contributions","title":"Structural Geology in R","text":"welcome feedback, suggestions, issues, contributions! found bug, please file minimal code reproduce issue.","code":""},{"path":"https://tobiste.github.io/structr/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Structural Geology in R","text":"MIT License","code":""},{"path":"https://tobiste.github.io/structr/reference/Fault_components.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract components of fault object — Fault_components","title":"Extract components of fault object — Fault_components","text":"Fault_plane() extracts orientation fault plane, Fault_slip() extracts orientation slip vector, Fault_rake() extracts rake fault, .e. angle fault slip vector fault strike.","code":""},{"path":"https://tobiste.github.io/structr/reference/Fault_components.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract components of fault object — Fault_components","text":"","code":"Fault_rake(x)  Fault_slip(x)  Fault_plane(x)"},{"path":"https://tobiste.github.io/structr/reference/Fault_components.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract components of fault object — Fault_components","text":"x object class \"Fault\"","code":""},{"path":"https://tobiste.github.io/structr/reference/Fault_components.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract components of fault object — Fault_components","text":"numeric. plane, line angle degrees, respectively","code":""},{"path":"https://tobiste.github.io/structr/reference/Fault_components.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract components of fault object — Fault_components","text":"","code":"f <- Fault(c(120, 120, 100), c(60, 60, 50), c(110, 25, 30), c(58, 9, 23), c(1, -1, 1)) Fault_plane(f) #> Plane object (n = 3): #>      dip_direction dip #> [1,]           120  60 #> [2,]           120  60 #> [3,]           100  50 Fault_slip(f) #> Line object (n = 3): #>      azimuth plunge #> [1,]     110     58 #> [2,]      25      9 #> [3,]      30     23 Fault_rake(f) #> [1]  84.72020 -10.28562  30.11825"},{"path":"https://tobiste.github.io/structr/reference/MohrCircle_calc.html","id":null,"dir":"Reference","previous_headings":"","what":"Mohr circle parameters — MohrCircle_calc","title":"Mohr circle parameters — MohrCircle_calc","text":"calculates parameters Mohr circle","code":""},{"path":"https://tobiste.github.io/structr/reference/MohrCircle_calc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mohr circle parameters — MohrCircle_calc","text":"","code":"MohrCircle_calc(   sigmaX = NA,   sigmaZ = NA,   tauXZ = NA,   sigma1 = NA,   sigma3 = NA,   theta = seq(from = 0, to = 180, by = 1) )"},{"path":"https://tobiste.github.io/structr/reference/MohrCircle_calc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mohr circle parameters — MohrCircle_calc","text":"sigmaX numeric. Magnitude normal stress acting horizontal direction sigmaZ numeric. Magnitude normal stress acting vertical direction tauXZ numeric. Magnitude shear stress acting plane \"sigmaX\" sigma1 numeric. Magnitude major principal stress sigma3 numeric. Magnitude minor principal stress theta numeric. Angles (degrees); defaults 0-180 increments 1","code":""},{"path":"https://tobiste.github.io/structr/reference/MohrCircle_calc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mohr circle parameters — MohrCircle_calc","text":"five-element list containing \"C\" center Mohr circle \"R\" radius Mohr circle \"sigma\" vector normal stresses Mohr circle \"tau\" vector shear stresses Mohr circle \"theta\" vector angles (degrees)","code":""},{"path":"https://tobiste.github.io/structr/reference/MohrCircle_calc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Mohr circle parameters — MohrCircle_calc","text":"theta entered conjunction \"sigmaX\", \"sigmaZ\", \"tauXZ\", interpreted angle inclination horizontal.  \"theta\" entered conjunction principal stresses, interpreted angle inclination major principal plane.","code":""},{"path":"https://tobiste.github.io/structr/reference/MohrCircle_calc.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Mohr circle parameters — MohrCircle_calc","text":"One following two sets data must entered \"sigmaX\", \"sigmaZ\", \"tauXZ\" \"sigma1\", \"sigma3\"","code":""},{"path":[]},{"path":"https://tobiste.github.io/structr/reference/MohrCircle_calc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Mohr circle parameters — MohrCircle_calc","text":"Kyle Elmy Jim Kaklamanos","code":""},{"path":"https://tobiste.github.io/structr/reference/MohrCircle_calc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mohr circle parameters — MohrCircle_calc","text":"","code":"MohrCircle_calc(sigmaX = 80, sigmaZ = 120, tauXZ = 20) #> $C #> [1] 100 #>  #> $R #> [1] 28.28427 #>  #> $sigma #>   [1] 120.00000 120.68581 121.34641 121.98101 122.58882 123.16912 123.72119 #>   [8] 124.24435 124.73798 125.20147 125.63426 126.03581 126.40564 126.74330 #>  [15] 127.04838 127.32051 127.55935 127.76461 127.93604 128.07344 128.17664 #>  [22] 128.24551 128.27996 128.27996 128.24551 128.17664 128.07344 127.93604 #>  [29] 127.76461 127.55935 127.32051 127.04838 126.74330 126.40564 126.03581 #>  [36] 125.63426 125.20147 124.73798 124.24435 123.72119 123.16912 122.58882 #>  [43] 121.98101 121.34641 120.68581 120.00000 119.28983 118.55615 117.79987 #>  [50] 117.02190 116.22319 115.40472 114.56748 113.71249 112.84079 111.95345 #>  [57] 111.05155 110.13618 109.20846 108.26952 107.32051 106.36258 105.39689 #>  [64] 104.42463 103.44699 102.46514 101.48028 100.49363  99.50637  98.51972 #>  [71]  97.53486  96.55301  95.57537  94.60311  93.63742  92.67949  91.73048 #>  [78]  90.79154  89.86382  88.94845  88.04655  87.15921  86.28751  85.43252 #>  [85]  84.59528  83.77681  82.97810  82.20013  81.44385  80.71017  80.00000 #>  [92]  79.31419  78.65359  78.01899  77.41118  76.83088  76.27881  75.75565 #>  [99]  75.26202  74.79853  74.36574  73.96419  73.59436  73.25670  72.95162 #> [106]  72.67949  72.44065  72.23539  72.06396  71.92656  71.82336  71.75449 #> [113]  71.72004  71.72004  71.75449  71.82336  71.92656  72.06396  72.23539 #> [120]  72.44065  72.67949  72.95162  73.25670  73.59436  73.96419  74.36574 #> [127]  74.79853  75.26202  75.75565  76.27881  76.83088  77.41118  78.01899 #> [134]  78.65359  79.31419  80.00000  80.71017  81.44385  82.20013  82.97810 #> [141]  83.77681  84.59528  85.43252  86.28751  87.15921  88.04655  88.94845 #> [148]  89.86382  90.79154  91.73048  92.67949  93.63742  94.60311  95.57537 #> [155]  96.55301  97.53486  98.51972  99.50637 100.49363 101.48028 102.46514 #> [162] 103.44699 104.42463 105.39689 106.36258 107.32051 108.26952 109.20846 #> [169] 110.13618 111.05155 111.95345 112.84079 113.71249 114.56748 115.40472 #> [176] 116.22319 117.02190 117.79987 118.55615 119.28983 120.00000 #>  #> $tau #>   [1] -20.0000000 -19.2898266 -18.5561515 -17.7998686 -17.0218994 -16.2231915 #>   [7] -15.4047182 -14.5674766 -13.7124868 -12.8407904 -11.9534495 -11.0515452 #>  [13] -10.1361763  -9.2084580  -8.2695206  -7.3205081  -6.3625766  -5.3968934 #>  [19]  -4.4246348  -3.4469856  -2.4651367  -1.4802844  -0.4936286   0.4936286 #>  [25]   1.4802844   2.4651367   3.4469856   4.4246348   5.3968934   6.3625766 #>  [31]   7.3205081   8.2695206   9.2084580  10.1361763  11.0515452  11.9534495 #>  [37]  12.8407904  13.7124868  14.5674766  15.4047182  16.2231915  17.0218994 #>  [43]  17.7998686  18.5561515  19.2898266  20.0000000  20.6858065  21.3464105 #>  [49]  21.9810072  22.5888234  23.1691186  23.7211858  24.2443524  24.7379810 #>  [55]  25.2014702  25.6342553  26.0358090  26.4056420  26.7433039  27.0483831 #>  [61]  27.3205081  27.5593472  27.7646095  27.9360449  28.0734446  28.1766411 #>  [67]  28.2455086  28.2799634  28.2799634  28.2455086  28.1766411  28.0734446 #>  [73]  27.9360449  27.7646095  27.5593472  27.3205081  27.0483831  26.7433039 #>  [79]  26.4056420  26.0358090  25.6342553  25.2014702  24.7379810  24.2443524 #>  [85]  23.7211858  23.1691186  22.5888234  21.9810072  21.3464105  20.6858065 #>  [91]  20.0000000  19.2898266  18.5561515  17.7998686  17.0218994  16.2231915 #>  [97]  15.4047182  14.5674766  13.7124868  12.8407904  11.9534495  11.0515452 #> [103]  10.1361763   9.2084580   8.2695206   7.3205081   6.3625766   5.3968934 #> [109]   4.4246348   3.4469856   2.4651367   1.4802844   0.4936286  -0.4936286 #> [115]  -1.4802844  -2.4651367  -3.4469856  -4.4246348  -5.3968934  -6.3625766 #> [121]  -7.3205081  -8.2695206  -9.2084580 -10.1361763 -11.0515452 -11.9534495 #> [127] -12.8407904 -13.7124868 -14.5674766 -15.4047182 -16.2231915 -17.0218994 #> [133] -17.7998686 -18.5561515 -19.2898266 -20.0000000 -20.6858065 -21.3464105 #> [139] -21.9810072 -22.5888234 -23.1691186 -23.7211858 -24.2443524 -24.7379810 #> [145] -25.2014702 -25.6342553 -26.0358090 -26.4056420 -26.7433039 -27.0483831 #> [151] -27.3205081 -27.5593472 -27.7646095 -27.9360449 -28.0734446 -28.1766411 #> [157] -28.2455086 -28.2799634 -28.2799634 -28.2455086 -28.1766411 -28.0734446 #> [163] -27.9360449 -27.7646095 -27.5593472 -27.3205081 -27.0483831 -26.7433039 #> [169] -26.4056420 -26.0358090 -25.6342553 -25.2014702 -24.7379810 -24.2443524 #> [175] -23.7211858 -23.1691186 -22.5888234 -21.9810072 -21.3464105 -20.6858065 #> [181] -20.0000000 #>  #> $theta #>   [1]   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17 #>  [19]  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35 #>  [37]  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53 #>  [55]  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71 #>  [73]  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89 #>  [91]  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 106 107 #> [109] 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 #> [127] 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 #> [145] 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 #> [163] 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 #> [181] 180 #>"},{"path":"https://tobiste.github.io/structr/reference/MohrCircle_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Mohr Circle plot — MohrCircle_plot","title":"Mohr Circle plot — MohrCircle_plot","text":"plots Mohr Circle","code":""},{"path":"https://tobiste.github.io/structr/reference/MohrCircle_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mohr Circle plot — MohrCircle_plot","text":"","code":"MohrCircle_plot(   sigmaX = NA,   sigmaZ = NA,   tauXZ = NA,   sigma1 = NA,   sigma3 = NA,   metric = TRUE )"},{"path":"https://tobiste.github.io/structr/reference/MohrCircle_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mohr Circle plot — MohrCircle_plot","text":"sigmaX numeric. Magnitude normal stress acting horizontal direction sigmaZ numeric. Magnitude normal stress acting vertical direction tauXZ numeric. Magnitude shear stress acting plane \"sigmaX\" sigma1 numeric. Magnitude major principal stress sigma3 numeric. Magnitude minor principal stress metric logical variable: TRUE metric units (kPa), FALSE English units","code":""},{"path":"https://tobiste.github.io/structr/reference/MohrCircle_plot.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Mohr Circle plot — MohrCircle_plot","text":"One following two sets data must entered \"sigmaX\", \"sigmaZ\", \"tauXZ\" \"sigma1\", \"sigma3\"","code":""},{"path":[]},{"path":"https://tobiste.github.io/structr/reference/MohrCircle_plot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Mohr Circle plot — MohrCircle_plot","text":"Kyle Elmy Jim Kaklamanos","code":""},{"path":"https://tobiste.github.io/structr/reference/MohrCircle_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mohr Circle plot — MohrCircle_plot","text":"","code":"MohrCircle_plot(sigmaX = 80, sigmaZ = 120, tauXZ = 20, metric = FALSE)"},{"path":"https://tobiste.github.io/structr/reference/PR_stress.html","id":null,"dir":"Reference","previous_headings":"","what":"Principal stresses from 2D stress components — PR_stress","title":"Principal stresses from 2D stress components — PR_stress","text":"Determines principal stresses orientations stress components $$sigma_x$$, $$\\sigma_y$$, $$\\tau_{xy}$$.","code":""},{"path":"https://tobiste.github.io/structr/reference/PR_stress.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Principal stresses from 2D stress components — PR_stress","text":"","code":"PR_stress(sigmaX, sigmaY, tauXY)"},{"path":"https://tobiste.github.io/structr/reference/PR_stress.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Principal stresses from 2D stress components — PR_stress","text":"sigmaX numeric. Magnitude normal stress acting horizontal direction sigmaY numeric. Magnitude normal stress acting plane facing Y direction ($$\\sigma_y$$). tauXY numeric. Magnitude shear stress acting planes facing X Y ($$\\tau_{xy}$$).","code":""},{"path":"https://tobiste.github.io/structr/reference/PR_stress.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Principal stresses from 2D stress components — PR_stress","text":"angle degrees","code":""},{"path":"https://tobiste.github.io/structr/reference/PR_stress.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Principal stresses from 2D stress components — PR_stress","text":"Richard J. Lisle (1999)","code":""},{"path":"https://tobiste.github.io/structr/reference/Rphi.html","id":null,"dir":"Reference","previous_headings":"","what":"$$R_f/\\phi$$ — Rphi","title":"$$R_f/\\phi$$ — Rphi","text":"$$R_f/\\phi$$","code":""},{"path":"https://tobiste.github.io/structr/reference/Rphi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"$$R_f/\\phi$$ — Rphi","text":"","code":"Rphi(Rs, Ri = 1, theta)"},{"path":"https://tobiste.github.io/structr/reference/Rphi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"$$R_f/\\phi$$ — Rphi","text":"Rs numeric. Ri numeric. Initial pre-deformation aspect ratio elliptical object theta numeric. Fluctuation angle undeformed marker w.r.t. computed principal direction strain (degree)","code":""},{"path":"https://tobiste.github.io/structr/reference/Rphi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"$$R_f/\\phi$$ — Rphi","text":"phi: final angle (degree) long xis principal strain direction, Rf: final axial ratio","code":""},{"path":"https://tobiste.github.io/structr/reference/SH.html","id":null,"dir":"Reference","previous_headings":"","what":"Direction of maximum horizontal stress from the stress tensor — SH","title":"Direction of maximum horizontal stress from the stress tensor — SH","text":"Calculates direction maximum horizontal stress using directions principal stress \\(R = \\frac{S1 - S2}{S1 - S3}\\). function Equations 11 10 Lund Townend (2007).","code":""},{"path":"https://tobiste.github.io/structr/reference/SH.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Direction of maximum horizontal stress from the stress tensor — SH","text":"","code":"SH(S1, S2, S3, R, tol = .Machine$double.eps^0.5, ortho.tol = 0.005)"},{"path":"https://tobiste.github.io/structr/reference/SH.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Direction of maximum horizontal stress from the stress tensor — SH","text":"S1, S2, S3 principal stress orientations. variables hold coordinates North, East geographical coordinate system, e.g. S1 = c(s1N,s1E,s1D). Given object class \"Vec3\" \"Line\" R numeric. Relative magnitude S2 respect S1 S3: \\(R = \\frac{S1 - S2}{S1 - S3}\\). Values ranging 0 1, 0 S1==S2 1 S2==S3. tol Tolerance comparison. ortho.tol tolerance angle (degree) orthogonality check three principal stress vectors.","code":""},{"path":"https://tobiste.github.io/structr/reference/SH.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Direction of maximum horizontal stress from the stress tensor — SH","text":"direction SH North numeric angle degrees (radians principal stress axes given \"Vec3\" objects).","code":""},{"path":"https://tobiste.github.io/structr/reference/SH.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Direction of maximum horizontal stress from the stress tensor — SH","text":"Lund Townend, (2007). Calculating horizontal stress orientations full partial knowledge tectonic stress tensor, Geophys. J. Int., doi:doi:10.1111/j.1365-246X.2007.03468.x .","code":""},{"path":"https://tobiste.github.io/structr/reference/SH.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Direction of maximum horizontal stress from the stress tensor — SH","text":"","code":"# first example from https://www.snsn.se/SH/SHcode/benchmark.out S1 <- Line(250.89, 70.07) S3 <- Line(103.01, 17.07) S2 <- crossprod(S3, S1) SH(S1, S2, S3, R = 1) #  70.89 #> [1] 70.89  R <- seq(0, 1, .05) cbind(R, SH = SH(S1, S2, S3, R = R)) #>          R       SH #>  [1,] 0.00 13.01021 #>  [2,] 0.05 13.18337 #>  [3,] 0.10 13.37695 #>  [4,] 0.15 13.59476 #>  [5,] 0.20 13.84162 #>  [6,] 0.25 14.12371 #>  [7,] 0.30 14.44908 #>  [8,] 0.35 14.82843 #>  [9,] 0.40 15.27621 #> [10,] 0.45 15.81249 #> [11,] 0.50 16.46586 #> [12,] 0.55 17.27842 #> [13,] 0.60 18.31445 #> [14,] 0.65 19.67656 #> [15,] 0.70 21.53704 #> [16,] 0.75 24.20154 #> [17,] 0.80 28.23884 #> [18,] 0.85 34.69668 #> [19,] 0.90 45.01043 #> [20,] 0.95 58.66746 #> [21,] 1.00 70.89000"},{"path":"https://tobiste.github.io/structr/reference/SH_from_tensor.html","id":null,"dir":"Reference","previous_headings":"","what":"Direction of maximum horizontal stress from the stress tensor (full knowledge) — SH_from_tensor","title":"Direction of maximum horizontal stress from the stress tensor (full knowledge) — SH_from_tensor","text":"Direction maximum horizontal stress stress tensor (full knowledge)","code":""},{"path":"https://tobiste.github.io/structr/reference/SH_from_tensor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Direction of maximum horizontal stress from the stress tensor (full knowledge) — SH_from_tensor","text":"","code":"SH_from_tensor(S)"},{"path":"https://tobiste.github.io/structr/reference/SH_from_tensor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Direction of maximum horizontal stress from the stress tensor (full knowledge) — SH_from_tensor","text":"S 3x3 matrix","code":""},{"path":"https://tobiste.github.io/structr/reference/SH_from_tensor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Direction of maximum horizontal stress from the stress tensor (full knowledge) — SH_from_tensor","text":"numeric angle degrees. direction SH North.","code":""},{"path":"https://tobiste.github.io/structr/reference/SH_from_tensor.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Direction of maximum horizontal stress from the stress tensor (full knowledge) — SH_from_tensor","text":"Lund Townend, (2007). Calculating horizontal stress orientations full partial knowledge tectonic stress tensor, Geophys. J. Int., doi:doi:10.1111/j.1365-246X.2007.03468.x .","code":""},{"path":"https://tobiste.github.io/structr/reference/SH_from_tensor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Direction of maximum horizontal stress from the stress tensor (full knowledge) — SH_from_tensor","text":"","code":"S1 <- c(-0.11163471165673433, -0.32215903156083286, 0.94008044843891103) S2 <- c(0.97015303285724142, 0.16959307992318776, 0.17332420511879815) S3 <- c(-0.21526909669344957, 0.93137089584437482, 0.29361108695489119)  S <- cbind(S1, S2, S3) * cbind(rep(3, 3), rep(2, 3), rep(1, 3)) / 3 SH_from_tensor(S) #> [1] 18.95383"},{"path":"https://tobiste.github.io/structr/reference/VollmerPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Fabric plot of Vollmer (1990) — VollmerPlot","title":"Fabric plot of Vollmer (1990) — VollmerPlot","text":"Creates fabric plot using eigenvalue method","code":""},{"path":"https://tobiste.github.io/structr/reference/VollmerPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fabric plot of Vollmer (1990) — VollmerPlot","text":"","code":"VollmerPlot(x, labels = NULL, add = FALSE, ngrid = c(5, 5, 5), ...)"},{"path":"https://tobiste.github.io/structr/reference/VollmerPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fabric plot of Vollmer (1990) — VollmerPlot","text":"x object class \"Vec3\", \"Line\", \"Plane\". labels character. text labels add logical. data plotted existing plot? ngrid integer 3-element vector specifying amount gridlines P, G, G axes. Constant grid spacing one integer given. NULL grid. ... optional graphical parameters","code":""},{"path":"https://tobiste.github.io/structr/reference/VollmerPlot.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fabric plot of Vollmer (1990) — VollmerPlot","text":"Vollmer, F. W. (1990). application eigenvalue methods structural domain analysis. Geological Society America Bulletin, 102, 786<U+2013>791.","code":""},{"path":[]},{"path":"https://tobiste.github.io/structr/reference/VollmerPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fabric plot of Vollmer (1990) — VollmerPlot","text":"","code":"set.seed(1) mu <- Line(120, 50) a <- rvmf(100, mu = mu, k = 10) VollmerPlot(a, lab = \"VMF\") #> Warning: NAs introduced by coercion  set.seed(1) b <- rfb(100, mu = mu, k = 1, A = diag(c(10, 0, 0))) VollmerPlot(b, lab = \"FB\", add = TRUE, col = \"red\")  set.seed(1) c <- runif.spherical(n = 100, \"Line\", method = \"rotasym\") VollmerPlot(c, lab = \"UNIF\", add = TRUE, col = \"green\")  set.seed(1) d <- rkent(100, mu = mu, k = 10, b = 4) VollmerPlot(d, lab = \"KENT\", add = TRUE, col = \"blue\") title(\"Fabric plot of Vollmer (1990)\")"},{"path":"https://tobiste.github.io/structr/reference/WoodcockPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Fabric plot of Woodcock (1977) — WoodcockPlot","title":"Fabric plot of Woodcock (1977) — WoodcockPlot","text":"Creates fabric plot using eigenvalue method","code":""},{"path":"https://tobiste.github.io/structr/reference/WoodcockPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fabric plot of Woodcock (1977) — WoodcockPlot","text":"","code":"WoodcockPlot(x, labels = NULL, add = FALSE, ...)"},{"path":"https://tobiste.github.io/structr/reference/WoodcockPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fabric plot of Woodcock (1977) — WoodcockPlot","text":"x object class \"Vec3\", \"Line\", \"Plane\". labels character. text labels add logical. data plotted existing plot? ... optional graphical parameters","code":""},{"path":"https://tobiste.github.io/structr/reference/WoodcockPlot.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fabric plot of Woodcock (1977) — WoodcockPlot","text":"Woodcock, N. H. (1977). Specification fabric shapes using eigenvalue method. Geological Society America Bulletin88, 1231<U+2013>1236. http://pubs.geoscienceworld.org/gsa/gsabulletin/article-pdf/88/9/1231/3418366/i0016-7606-88-9-1231.pdf","code":""},{"path":[]},{"path":"https://tobiste.github.io/structr/reference/WoodcockPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fabric plot of Woodcock (1977) — WoodcockPlot","text":"","code":"set.seed(1) mu <- Line(120, 50) x <- rvmf(100, mu = mu, k = 1) WoodcockPlot(x, lab = \"x\", main = \"Fabric plot of Woodcock (1977)\") y <- rvmf(100, mu = mu, k = 20) WoodcockPlot(y, lab = \"y\", add = TRUE, col = \"red\")"},{"path":"https://tobiste.github.io/structr/reference/best_fit_plane.html","id":null,"dir":"Reference","previous_headings":"","what":"Least-square fit of small and great circles to spherically projected data — best_fit_plane","title":"Least-square fit of small and great circles to spherically projected data — best_fit_plane","text":"Finds best small great circles using algorithm Gray et al. (1980)","code":""},{"path":"https://tobiste.github.io/structr/reference/best_fit_plane.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Least-square fit of small and great circles to spherically projected data — best_fit_plane","text":"","code":"best_fit_plane(x)"},{"path":"https://tobiste.github.io/structr/reference/best_fit_plane.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Least-square fit of small and great circles to spherically projected data — best_fit_plane","text":"x object class \"Vec3\", \"Line\", \"Plane\".","code":""},{"path":"https://tobiste.github.io/structr/reference/best_fit_plane.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Least-square fit of small and great circles to spherically projected data — best_fit_plane","text":"list","code":""},{"path":"https://tobiste.github.io/structr/reference/best_fit_plane.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Least-square fit of small and great circles to spherically projected data — best_fit_plane","text":"Gray, N.H., Geiser, P.., Geiser, J.R. (1980). least-square fit small great circles spherically projected data. Mathematical Geology, Vol. 12, . 3, 1980.","code":""},{"path":"https://tobiste.github.io/structr/reference/best_fit_plane.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Least-square fit of small and great circles to spherically projected data — best_fit_plane","text":"","code":"data(\"gray_example\") gray_example1 <- gray_example |>   dplyr::mutate(     dipdir = Strike + 90,     dip = Dip,     id = seq_along(dip)   ) gray_cleavage <- dplyr::filter(gray_example1, Type == \"Cleavage\") gray_bedding <- dplyr::filter(gray_example1, Type == \"Bedding\") test_clea <- Plane(gray_cleavage$dipdir, gray_cleavage$dip) test_bedd <- Plane(gray_bedding$dipdir, gray_bedding$dip) best_clea <- best_fit_plane(test_clea) best_bedd <- best_fit_plane(test_bedd)  stereoplot() points(test_clea, col = \"blue\") points(test_bedd, col = \"red\") lines(best_clea$axis_c, best_clea$cone_angle, col = \"lightblue\") lines(best_clea$axis_g, 90, lty = 2, col = \"blue\") lines(best_bedd$axis_c, best_bedd$cone_angle, col = \"sienna\") lines(best_bedd$axis_g, 90, lty = 2, col = \"red\")"},{"path":"https://tobiste.github.io/structr/reference/best_pole.html","id":null,"dir":"Reference","previous_headings":"","what":"The cone or plane best fit of conically or cylindrical disposed s-plane poles — best_pole","title":"The cone or plane best fit of conically or cylindrical disposed s-plane poles — best_pole","text":"Finding best fit pole rotation given set points assumed lie mutual small great circle circle","code":""},{"path":"https://tobiste.github.io/structr/reference/best_pole.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The cone or plane best fit of conically or cylindrical disposed s-plane poles — best_pole","text":"","code":"best_cone_ramsay(x)  best_cone_ramsay2(x)"},{"path":"https://tobiste.github.io/structr/reference/best_pole.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The cone or plane best fit of conically or cylindrical disposed s-plane poles — best_pole","text":"x matrix. Cartesian coordinates points","code":""},{"path":"https://tobiste.github.io/structr/reference/best_pole.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The cone or plane best fit of conically or cylindrical disposed s-plane poles — best_pole","text":"numeric vector x,y,z Cartesian coordinates best fit pole plane cone axis, e residual sum square deviations observed poles planes best fit pole, K (cones) half apical angle best fit cone (radians).","code":""},{"path":"https://tobiste.github.io/structr/reference/best_pole.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The cone or plane best fit of conically or cylindrical disposed s-plane poles — best_pole","text":"Ramsay, 1967, p. 18-21","code":""},{"path":"https://tobiste.github.io/structr/reference/best_pole.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The cone or plane best fit of conically or cylindrical disposed s-plane poles — best_pole","text":"","code":"if (FALSE) { # \\dontrun{ # example from Ramsay, 1967, p. 20 x <- rbind(   c(-67, -31, -71),   c(-62, -53, -50),   c(-62, -75, -34),   c(-58, 85, -34),   c(-79, 40, -52),   c(90, 14, -75),   c(80, 10, 90) ) |> acoscartesian_to_cartesian() best_cone_ramsay(x) # expect: c(0.856, -0.157, -0.492, NA, 1.56207) best_plane_ramsay(x) # expect: c(0.852, -0.154, -0.502, 1-1.002) } # }"},{"path":"https://tobiste.github.io/structr/reference/bingham_statistics.html","id":null,"dir":"Reference","previous_headings":"","what":"Elliptical concentration and confidence cone estimation — bingham_statistics","title":"Elliptical concentration and confidence cone estimation — bingham_statistics","text":"Elliptical concentration confidence cone estimation","code":""},{"path":"https://tobiste.github.io/structr/reference/bingham_statistics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Elliptical concentration and confidence cone estimation — bingham_statistics","text":"","code":"bingham_statistics(x, w = NULL, na.rm = TRUE)"},{"path":"https://tobiste.github.io/structr/reference/bingham_statistics.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Elliptical concentration and confidence cone estimation — bingham_statistics","text":"Borradaile, G. (2003). Spherical-Orientation Data. : Statistics Earth Science Data. Springer, Berlin, Heidelberg. https://doi.org/10.1007/978-3-662-05223-5_10","code":""},{"path":"https://tobiste.github.io/structr/reference/bingham_statistics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Elliptical concentration and confidence cone estimation — bingham_statistics","text":"x object class \"Vec3\", \"Line\", \"Plane\". w numeric. Optional weights observation. na.rm logical. Whether NA values removed computation proceeds.","code":""},{"path":"https://tobiste.github.io/structr/reference/bingham_statistics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Elliptical concentration and confidence cone estimation — bingham_statistics","text":"list k two-column vector containing estimates minimum (\\(k_\\text{min}\\)) maximum concentration (\\(k_\\text{max}\\)). a95 two-column vector containing estimates minimum maximum 95% confidence cone. beta shape factor distribution given ratio \\(\\frac{k_\\text{min}}{k_\\text{max}}\\).","code":""},{"path":[]},{"path":"https://tobiste.github.io/structr/reference/bingham_statistics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Elliptical concentration and confidence cone estimation — bingham_statistics","text":"","code":"set.seed(1234) x <- rfb(100, mu = Line(120, 50), k = 15, A = diag(c(-5, 0, 5)))  stereoplot() stereo_point(x)   bingham_statistics(x) #> $k #> [1] 2.464245 3.635726 #>  #> $a95 #> [1] 8.918383 7.342305 #>  #> $beta #> [1] 0.6777861 #>"},{"path":"https://tobiste.github.io/structr/reference/center.html","id":null,"dir":"Reference","previous_headings":"","what":"Centering vectors — center","title":"Centering vectors — center","text":"Rotate vector object position eigenvectors parallel axes coordinate system: E3||X (north-south), E2||X(east-west), E1||X(vertical)","code":""},{"path":"https://tobiste.github.io/structr/reference/center.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Centering vectors — center","text":"","code":"center(x, max_vertical = FALSE)"},{"path":"https://tobiste.github.io/structr/reference/center.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Centering vectors — center","text":"x Object class \"Vec3\", \"Line\" \"Plane\" max_vertical Whether maximum von Mises-Fisher distribution already vertical .","code":""},{"path":"https://tobiste.github.io/structr/reference/center.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Centering vectors — center","text":"Object class x","code":""},{"path":[]},{"path":"https://tobiste.github.io/structr/reference/center.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Centering vectors — center","text":"","code":"set.seed(1) mu <- Line(120, 50) x <- rvmf(100, mu = mu, k = 20) x_centered <- center(x) plot(x, col = \"grey\") # points(mu, col = \"red\") points(x_centered, col = \"black\") points(Line(c(0, 90, 180), c(0, 0, 90)), col = 2:4) text(Line(c(0, 90, 180), c(0, 0, 90)), col = 2:4, labels = c(\"E3\", \"E2\", \"E1\"), pos = 3)"},{"path":"https://tobiste.github.io/structr/reference/classes.html","id":null,"dir":"Reference","previous_headings":"","what":"Structure classes — classes","title":"Structure classes — classes","text":"Vec3, Line, Plane, \"Pair\" Fault create convert \"Vec3\", \"Line\", \"Plane\", \"Pair\", \"Fault\" S3 class object, respectively, given set values. .Vec3, .Line, .Plane, .Pair, .Fault attempt coearce argument \"Vec3\", \"Line\", \"Plane\",  \"Pair\", \"Fault\" S3 class object, respectively. .Line, .Plane, .Pair, .Fault test argument \"Line\", \"Plane\",  \"Pair\", \"Fault\" S3 class object, respectively.","code":""},{"path":"https://tobiste.github.io/structr/reference/classes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Structure classes — classes","text":"","code":"is.spherical(x)  is.Vec3(x)  is.Line(x)  is.Plane(x)  is.Pair(x)  is.Fault(x)  as.spherical(x)  as.Vec3(x)  as.Line(x)  as.Plane(x)  as.Pair(x)  as.Fault(x)  Vec3(x, y, z)  Line(x, plunge)  Plane(x, dip)  Pair(x, y, azimuth, plunge, correction = FALSE)  Fault(x, y, azimuth, plunge, sense, correction = FALSE)  Spherical(x, .class)"},{"path":"https://tobiste.github.io/structr/reference/classes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Structure classes — classes","text":"x, y object class \"Line\", \"Plane\",  \"Pair\", \"Fault\"  numeric vector array containing spherical coordinates azimuth, plunge, z, dip numeric vectors spherical coordinates correction logical. TRUE (default), fault plane slip vector rotated slip vector lies fault plane minimizing angle slip plane normal vector. See correct_pair() details. sense (optional) integer. Sense line fault plane. Either 1or -1 normal thrust offset, respectively. \"sense\" sign fault's rake (see Fault_from_rake() details). .class character. Spherical class object coerced .","code":""},{"path":"https://tobiste.github.io/structr/reference/classes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Structure classes — classes","text":".Vec3, .Line, .Plane, .Pair, .Fault return TRUE arguments object class  \"Vec3\", \"Line\", \"Plane\", \"Pair\" \"Fault\", respectively, FALSE otherwise. .spherical returns TRUE argument's class one \"Vec3()\", \"Line\", \"Plane\", \"Pair\", \"Fault\" FALSE otherwise .Vec3(), .Line, .Plane, .Pair, .Fault generic functions.","code":""},{"path":"https://tobiste.github.io/structr/reference/classes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Structure classes — classes","text":"","code":"x <- Line(120, 50) # create line is.Line(x) # test if line #> [1] TRUE Plane(x) # convert to plane #> Plane object (n = 1): #> dip_direction           dip  #>           300            40   Pair(c(120, 120, 100), c(60, 60, 50), c(110, 25, 30), c(58, 9, 23)) #> Pair object (n = 3): #>      dip_direction dip azimuth plunge #> [1,]           120  60     110     58 #> [2,]           120  60      25      9 #> [3,]           100  50      30     23 Fault(c(\"a\" = 120, \"b\" = 120, \"c\" = 100), c(60, 60, 50), c(110, 25, 30), c(58, 9, 23), c(1, -1, 1)) #> Fault object (n = 3): #>   dip_direction dip azimuth plunge sense #> a           120  60     110     58     1 #> b           120  60      25      9    -1 #> c           100  50      30     23     1"},{"path":"https://tobiste.github.io/structr/reference/colorize.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper functions for color assignment and legends — colorize","title":"Helper functions for color assignment and legends — colorize","text":"Helper functions color assignment legends","code":""},{"path":"https://tobiste.github.io/structr/reference/colorize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper functions for color assignment and legends — colorize","text":"","code":"assign_col_d(x, pal = viridis::viridis, ...)  assign_col(x, n = length(x), pal = viridis::viridis, ...)  assign_col_binned(x, breaks, pal = viridis::viridis, ...)  legend_c(breaks, title = NULL, pal = viridis::viridis, ...)  legend_d(fill, labels = names(fill), position = \"topright\", ...)"},{"path":"https://tobiste.github.io/structr/reference/colorize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper functions for color assignment and legends — colorize","text":"x vector colorize pal color function; Default viridis::viridis() ... arguments passed color function n integer. breaks numeric. title character. Legend title fill color vector labels character.vector. Names discrete colors. Can ignored cols named vector. position Legend position","code":""},{"path":"https://tobiste.github.io/structr/reference/colorize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper functions for color assignment and legends — colorize","text":".","code":""},{"path":"https://tobiste.github.io/structr/reference/colorize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper functions for color assignment and legends — colorize","text":"","code":"set.seed(1234)  # example for discrete colors x <- rvmf(5, mu = Line(120, 50), k = 5) key <- letters[round(runif(5, 1, 26))] plot(x, col = assign_col_d(key), grid.params = list(guides = FALSE)) legend_d(assign_col_d(key))   # example for continuous colors: x <- rvmf(100, mu = Line(120, 50), k = 5) plot(x, col = assign_col(runif(100)), grid.params = list(guides = FALSE)) legend_c(seq(0, 1, .1), title = \"test\")"},{"path":"https://tobiste.github.io/structr/reference/count_points.html","id":null,"dir":"Reference","previous_headings":"","what":"Point density — count_points","title":"Point density — count_points","text":"function calculates point density input spherical points series counter stations. Creates gridsize regular grid counter stations, calculates distance input points counter station, calculates density using FUN.  input point weighted corresponding item weights. weights normalized 1 calculation.","code":""},{"path":"https://tobiste.github.io/structr/reference/count_points.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Point density — count_points","text":"","code":"count_points(azi, inc, FUN, sigma, ngrid, weights, r)"},{"path":"https://tobiste.github.io/structr/reference/count_points.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Point density — count_points","text":"azi, inc degree FUN method density estimation use. Defaults exponential_kamb(). sigma (optional) numeric. number standard deviations defining expected number standard deviations random sample uniform distribution points expected vary evenly distributed across hemisphere.  controls size counting circle, therefore degree smoothing.  Higher sigmas lead smoothing resulting density distribution. parameter applies Kamb-based methods.  Defaults 3. ngrid numeric. size grid density estimated . weights (optional) numeric vector length azi. relative weight applied input measurement. array normalized sum 1, absolute value weights affect result. Defaults NULL r numeric. radius stereonet circle","code":""},{"path":"https://tobiste.github.io/structr/reference/count_points.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Point density — count_points","text":"list","code":""},{"path":"https://tobiste.github.io/structr/reference/defgrad.html","id":null,"dir":"Reference","previous_headings":"","what":"Deformation Gradient Tensor — defgrad","title":"Deformation Gradient Tensor — defgrad","text":"Deformation Gradient Tensor","code":""},{"path":"https://tobiste.github.io/structr/reference/defgrad.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deformation Gradient Tensor — defgrad","text":"","code":"defgrad_from_ratio(Rxy = 1, Ryz = 1)  defgrad_from_pair(p)  defgrad_from_vectors(v1, v2)  defgrad_from_axisangle(axis, angle)  defgrad_from_comp(   xx = 1,   xy = 0,   xz = 0,   yx = 0,   yy = 1,   yz = 0,   zx = 0,   zy = 0,   zz = 1 )"},{"path":"https://tobiste.github.io/structr/reference/defgrad.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deformation Gradient Tensor — defgrad","text":"Rxy, Ryz numeric. XY YZ strain ratio create strain tensor axial stretches.Values must greater equal 1. p object class pair v1, v2 objects class \"spherical\" three-element vector. Deformation gradient results rotation around axis perpendicular vectors rotate v1 v2. axis, angle rotation axis angle, axis can object class \"spherical\" (incl. \"line\" \"plane\") three-element vector. Angle degrees axis object class \"spherical\", radians otherwise. xx, xy, xz, yx, yy, yz, zx, zy, zz numeric. Directly specify components tensor. Identity matrix default.","code":""},{"path":"https://tobiste.github.io/structr/reference/defgrad.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deformation Gradient Tensor — defgrad","text":"3x3 matrix.","code":""},{"path":"https://tobiste.github.io/structr/reference/defgrad.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Deformation Gradient Tensor — defgrad","text":"","code":"defgrad_from_ratio(2, 3) #>          [,1]     [,2]      [,3] #> [1,] 2.289428 0.000000 0.0000000 #> [2,] 0.000000 1.144714 0.0000000 #> [3,] 0.000000 0.000000 0.3815714 defgrad_from_axisangle(Line(120, 30), 45) #>            [,1]       [,2]      [,3] #> [1,]  0.7620243 -0.4486733 0.4669168 #> [2,]  0.2584335  0.8718592 0.4160212 #> [3,] -0.5937433 -0.1963513 0.7803301 defgrad_from_vectors(Line(120, 30), Line(210, 60)) #>             [,1]       [,2]       [,3] #> [1,]  0.96054327 -0.1753947  0.1017020 #> [2,]  0.19960527  0.9038650 -0.3286089 #> [3,] -0.03555755  0.3421443  0.9198776 defgrad_from_pair(Pair(40, 20, 75, 16)) #> Vector (Vec3) object (n = 3): #>           [,1]       [,2]       [,3] #> [1,] 0.2487928 -0.9331095 -0.2620026 #> [2,] 0.9285075  0.3060065 -0.2198463 #> [3,] 0.2756374 -0.1885752  0.9396926"},{"path":"https://tobiste.github.io/structr/reference/density-funs.html","id":null,"dir":"Reference","previous_headings":"","what":"Density estimation — density-funs","title":"Density estimation — density-funs","text":"methods density estimation stereonet.","code":""},{"path":"https://tobiste.github.io/structr/reference/density-funs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Density estimation — density-funs","text":"","code":"exponential_kamb(cos_dist, sigma = 3)  linear_inverse_kamb(cos_dist, sigma = 3)  square_inverse_kamb(cos_dist, sigma = 3)  kamb_count(cos_dist, sigma = 3)  schmidt_count(cos_dist, sigma = NULL)"},{"path":"https://tobiste.github.io/structr/reference/density-funs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Density estimation — density-funs","text":"cos_dist cosine distances sigma (optional) numeric. number standard deviations defining expected number standard deviations random sample uniform distribution points expected vary evenly distributed across hemisphere.  controls size counting circle, therefore degree smoothing.  Higher sigmas lead smoothing resulting density distribution. parameter applies Kamb-based methods.  Defaults 3.","code":""},{"path":"https://tobiste.github.io/structr/reference/density-funs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Density estimation — density-funs","text":"list","code":""},{"path":"https://tobiste.github.io/structr/reference/density-funs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Density estimation — density-funs","text":"exponential_kamb(): Kamb exponential smoothing modified Kamb method using exponential smoothing (ref1). Units numbers standard deviations density estimate differs uniform. linear_inverse_kamb(): Kamb linear smoothing modified Kamb method using linear smoothing (ref1).  Units numbers standard deviations density estimate differs uniform. square_inverse_kamb(): Kamb squared smoothing modified Kamb method using squared smoothing (ref1).  Units numbers standard deviations density estimate differs uniform. kamb_count(): Kamb smoothing Kamb's method (ref2) smoothing. Units numbers standard deviations density estimate differs uniform. schmidt_count(): 1% counts. traditional \"Schmidt\" (.k.. 1%) method. Counts points within counting circle comprising 1% total area hemisphere. take account sample size.  Units points per 1% area.","code":""},{"path":"https://tobiste.github.io/structr/reference/density-funs.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Density estimation — density-funs","text":"Vollmer, 1995. C Program Automatic Contouring Spherical Orientation Data Using Modified Kamb Method. Computers & Geosciences, Vol. 21, . 1, pp. 31–49. Kamb, 1959. Ice Petrofabric Observations Blue Glacier, Washington, Relation Theory Experiment. Journal Geophysical Research, Vol. 64, . 11, pp. 1891–1909.","code":""},{"path":"https://tobiste.github.io/structr/reference/density.html","id":null,"dir":"Reference","previous_headings":"","what":"Spherical density estimation — density","title":"Spherical density estimation — density","text":"Spherical density estimation","code":""},{"path":"https://tobiste.github.io/structr/reference/density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spherical density estimation — density","text":"","code":"density(x, ...)  # S3 method for class 'spherical' density(   x,   kamb = TRUE,   FUN = exponential_kamb,   ngrid = 128L,   sigma = 3,   vmf_hw = NULL,   vmf_optimal = c(\"cross\", \"rot\"),   weights = NULL,   upper.hem = FALSE,   r = 1 )"},{"path":"https://tobiste.github.io/structr/reference/density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spherical density estimation — density","text":"x object class \"Vec3()\", \"Line()\", \"Plane()\". ... parameters passed stereo_point(), stereo_smallcircle(), stereo_greatcircle(), stereo_fault() kamb logical. Whether use von Mises-Fisher kernel density estimation (FALSE) Kamb's method (TRUE, default). FUN density estimation function kamb=TRUE; one exponential_kamb() (default), kamb_count, schmidt_count(). ngrid integer. Gridzise. 128 default. sigma numeric. Radius Kamb circle used counting. 3 default. vmf_hw numeric. Kernel bandwidth degree. vmf_optimal character. Calculates optimal kernel bandwidth using cross-validation algorithm ('cross') rule--thumb ('rot') suggested Garcia-Portugues (2013). Ignored vmf_hw specified. weights (optional) numeric vector length azi. relative weight applied input measurement. array normalized sum 1, absolute value weights affect result. Defaults NULL upper.hem logical. Whether projection shown upper hemisphere (TRUE) lower hemisphere (FALSE, default). r numeric. radius stereonet circle","code":""},{"path":"https://tobiste.github.io/structr/reference/density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spherical density estimation — density","text":"","code":"set.seed(20250411) test <- rfb(100, mu = Line(120, 10), k = 5, A = diag(c(-1, 0, 1))) density(x = test, ngrid = 100, sigma = 3, weights = runif(100)) #> $x #>   [1] -1.00000000 -0.97979798 -0.95959596 -0.93939394 -0.91919192 -0.89898990 #>   [7] -0.87878788 -0.85858586 -0.83838384 -0.81818182 -0.79797980 -0.77777778 #>  [13] -0.75757576 -0.73737374 -0.71717172 -0.69696970 -0.67676768 -0.65656566 #>  [19] -0.63636364 -0.61616162 -0.59595960 -0.57575758 -0.55555556 -0.53535354 #>  [25] -0.51515152 -0.49494949 -0.47474747 -0.45454545 -0.43434343 -0.41414141 #>  [31] -0.39393939 -0.37373737 -0.35353535 -0.33333333 -0.31313131 -0.29292929 #>  [37] -0.27272727 -0.25252525 -0.23232323 -0.21212121 -0.19191919 -0.17171717 #>  [43] -0.15151515 -0.13131313 -0.11111111 -0.09090909 -0.07070707 -0.05050505 #>  [49] -0.03030303 -0.01010101  0.01010101  0.03030303  0.05050505  0.07070707 #>  [55]  0.09090909  0.11111111  0.13131313  0.15151515  0.17171717  0.19191919 #>  [61]  0.21212121  0.23232323  0.25252525  0.27272727  0.29292929  0.31313131 #>  [67]  0.33333333  0.35353535  0.37373737  0.39393939  0.41414141  0.43434343 #>  [73]  0.45454545  0.47474747  0.49494949  0.51515152  0.53535354  0.55555556 #>  [79]  0.57575758  0.59595960  0.61616162  0.63636364  0.65656566  0.67676768 #>  [85]  0.69696970  0.71717172  0.73737374  0.75757576  0.77777778  0.79797980 #>  [91]  0.81818182  0.83838384  0.85858586  0.87878788  0.89898990  0.91919192 #>  [97]  0.93939394  0.95959596  0.97979798  1.00000000 #>  #> $y #>   [1] -1.00000000 -0.97979798 -0.95959596 -0.93939394 -0.91919192 -0.89898990 #>   [7] -0.87878788 -0.85858586 -0.83838384 -0.81818182 -0.79797980 -0.77777778 #>  [13] -0.75757576 -0.73737374 -0.71717172 -0.69696970 -0.67676768 -0.65656566 #>  [19] -0.63636364 -0.61616162 -0.59595960 -0.57575758 -0.55555556 -0.53535354 #>  [25] -0.51515152 -0.49494949 -0.47474747 -0.45454545 -0.43434343 -0.41414141 #>  [31] -0.39393939 -0.37373737 -0.35353535 -0.33333333 -0.31313131 -0.29292929 #>  [37] -0.27272727 -0.25252525 -0.23232323 -0.21212121 -0.19191919 -0.17171717 #>  [43] -0.15151515 -0.13131313 -0.11111111 -0.09090909 -0.07070707 -0.05050505 #>  [49] -0.03030303 -0.01010101  0.01010101  0.03030303  0.05050505  0.07070707 #>  [55]  0.09090909  0.11111111  0.13131313  0.15151515  0.17171717  0.19191919 #>  [61]  0.21212121  0.23232323  0.25252525  0.27272727  0.29292929  0.31313131 #>  [67]  0.33333333  0.35353535  0.37373737  0.39393939  0.41414141  0.43434343 #>  [73]  0.45454545  0.47474747  0.49494949  0.51515152  0.53535354  0.55555556 #>  [79]  0.57575758  0.59595960  0.61616162  0.63636364  0.65656566  0.67676768 #>  [85]  0.69696970  0.71717172  0.73737374  0.75757576  0.77777778  0.79797980 #>  [91]  0.81818182  0.83838384  0.85858586  0.87878788  0.89898990  0.91919192 #>  [97]  0.93939394  0.95959596  0.97979798  1.00000000 #>  #> $density #>        [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7] #>   [1,]   NA        NA        NA        NA        NA        NA        NA #>   [2,]   NA        NA        NA        NA        NA        NA        NA #>   [3,]   NA        NA        NA        NA        NA        NA        NA #>   [4,]   NA        NA        NA        NA        NA        NA        NA #>   [5,]   NA        NA        NA        NA        NA        NA        NA #>   [6,]   NA        NA        NA        NA        NA        NA        NA #>   [7,]   NA        NA        NA        NA        NA        NA        NA #>   [8,]   NA        NA        NA        NA        NA        NA        NA #>   [9,]   NA        NA        NA        NA        NA        NA        NA #>  [10,]   NA        NA        NA        NA        NA        NA        NA #>  [11,]   NA        NA        NA        NA        NA        NA        NA #>  [12,]   NA        NA        NA        NA        NA        NA        NA #>  [13,]   NA        NA        NA        NA        NA        NA        NA #>  [14,]   NA        NA        NA        NA        NA        NA        NA #>  [15,]   NA        NA        NA        NA        NA        NA        NA #>  [16,]   NA        NA        NA        NA        NA        NA        NA #>  [17,]   NA        NA        NA        NA        NA        NA        NA #>  [18,]   NA        NA        NA        NA        NA        NA        NA #>  [19,]   NA        NA        NA        NA        NA        NA        NA #>  [20,]   NA        NA        NA        NA        NA        NA        NA #>  [21,]   NA        NA        NA        NA        NA        NA        NA #>  [22,]   NA        NA        NA        NA        NA        NA        NA #>  [23,]   NA        NA        NA        NA        NA        NA        NA #>  [24,]   NA        NA        NA        NA        NA        NA        NA #>  [25,]   NA        NA        NA        NA        NA        NA        NA #>  [26,]   NA        NA        NA        NA        NA        NA        NA #>  [27,]   NA        NA        NA        NA        NA        NA 0.1105811 #>  [28,]   NA        NA        NA        NA        NA        NA 0.1220776 #>  [29,]   NA        NA        NA        NA        NA 0.1516172 0.1347688 #>  [30,]   NA        NA        NA        NA        NA 0.1683918 0.1478773 #>  [31,]   NA        NA        NA        NA        NA 0.1851033 0.1608728 #>  [32,]   NA        NA        NA        NA 0.2286342 0.2013138 0.1735075 #>  [33,]   NA        NA        NA        NA 0.2474922 0.2168604 0.1858273 #>  [34,]   NA        NA        NA 0.2952116 0.2653098 0.2318619 0.1981613 #>  [35,]   NA        NA        NA 0.3144747 0.2822668 0.2467053 0.2110913 #>  [36,]   NA        NA        NA 0.3325341 0.2988008 0.2620155 0.2254064 #>  [37,]   NA        NA 0.3786836 0.3498758 0.3155759 0.2786107 0.2420491 #>  [38,]   NA        NA 0.3960645 0.3672020 0.3334379 0.2974490 0.2620543 #>  [39,]   NA        NA 0.4132179 0.3853856 0.3533608 0.3195699 0.2864900 #>  [40,]   NA        NA 0.4310429 0.4054156 0.3763880 0.3460346 0.3163995 #>  [41,]   NA 0.4687021 0.4505421 0.4283389 0.4035732 0.3778687 0.3527501 #>  [42,]   NA 0.4875298 0.4727634 0.4552009 0.4359229 0.4160101 0.3963877 #>  [43,]   NA 0.5090068 0.4987410 0.4869888 0.4743444 0.4612638 0.4480015 #>  [44,]   NA 0.5341455 0.5294405 0.5245814 0.5196022 0.5142652 0.5080951 #>  [45,]   NA 0.5638773 0.5657103 0.5687068 0.5722822 0.5754531 0.5769682 #>  [46,]   NA 0.5990049 0.6082405 0.6199093 0.6327681 0.6450526 0.6547060 #>  [47,]   NA 0.6401628 0.6575326 0.6785282 0.7012264 0.7230679 0.7411772 #>  [48,]   NA 0.6877876 0.7138787 0.7446851 0.7776035 0.8092852 0.8360402 #>  [49,]   NA 0.7420963 0.7773491 0.8182823 0.8616312 0.9032831 0.9387573 #>  [50,]   NA 0.8030737 0.8477898 0.8990084 0.9528396 1.0044519 1.0486144 #>  [51,]   NA 0.8704666 0.9248253 0.9863498 1.0505764 1.1120163 1.1647470 #>  [52,]   NA 0.9437851 1.0078663 1.0796060 1.1540284 1.2250629 1.2861683 #>  [53,]   NA 1.0223069 1.0961206 1.1779061 1.2622440 1.3425663 1.4117992 #>  [54,]   NA 1.1050872 1.1886045 1.2802249 1.3741535 1.4634148 1.5404960 #>  [55,]   NA 1.1909709 1.2841559 1.3853965 1.4885860 1.5864302 1.6710747 #>  [56,]   NA 1.2786088 1.3814462 1.4921253 1.6042811 1.7103819 1.8023281 #>  [57,]   NA 1.3664781 1.4789946 1.5989956 1.7198960 1.8339950 1.9330363 #>  [58,]   NA 1.4529089 1.5751841 1.7044791 1.8340075 1.9559500 2.0619685 #>  [59,]   NA 1.5361170 1.6682823 1.8069442 1.9451133 2.0748791 2.1878770 #>  [60,]   NA 1.6142453 1.7564681 1.9046690 2.0516321 2.1893576 2.3094859 #>  [61,]   NA        NA 1.8378672 1.9958601 2.1519079 2.2978971 2.4254757 #>  [62,]   NA        NA 1.9105967 2.0786803 2.2442208 2.3989407 2.5344688 #>  [63,]   NA        NA 1.9728183 2.1512865 2.3268060 2.4908648 2.6350169 #>  [64,]   NA        NA 2.0228013 2.2118770 2.3978839 2.5719912 2.7255958 #>  [65,]   NA        NA        NA 2.2587499 2.4557020 2.6406091 2.8046092 #>  [66,]   NA        NA        NA 2.2903687 2.4985874 2.6950100 2.8704040 #>  [67,]   NA        NA        NA 2.3054344 2.5250107 2.7335364 2.9212986 #>  [68,]   NA        NA        NA        NA 2.5336573 2.7546419 2.9556263 #>  [69,]   NA        NA        NA        NA 2.5235054 2.7569642 2.9717934 #>  [70,]   NA        NA        NA        NA        NA 2.7394088 2.9683547 #>  [71,]   NA        NA        NA        NA        NA 2.7012406 2.9441037 #>  [72,]   NA        NA        NA        NA        NA 2.6421800 2.8981784 #>  [73,]   NA        NA        NA        NA        NA        NA 2.8301769 #>  [74,]   NA        NA        NA        NA        NA        NA 2.7402749 #>  [75,]   NA        NA        NA        NA        NA        NA        NA #>  [76,]   NA        NA        NA        NA        NA        NA        NA #>  [77,]   NA        NA        NA        NA        NA        NA        NA #>  [78,]   NA        NA        NA        NA        NA        NA        NA #>  [79,]   NA        NA        NA        NA        NA        NA        NA #>  [80,]   NA        NA        NA        NA        NA        NA        NA #>  [81,]   NA        NA        NA        NA        NA        NA        NA #>  [82,]   NA        NA        NA        NA        NA        NA        NA #>  [83,]   NA        NA        NA        NA        NA        NA        NA #>  [84,]   NA        NA        NA        NA        NA        NA        NA #>  [85,]   NA        NA        NA        NA        NA        NA        NA #>  [86,]   NA        NA        NA        NA        NA        NA        NA #>  [87,]   NA        NA        NA        NA        NA        NA        NA #>  [88,]   NA        NA        NA        NA        NA        NA        NA #>  [89,]   NA        NA        NA        NA        NA        NA        NA #>  [90,]   NA        NA        NA        NA        NA        NA        NA #>  [91,]   NA        NA        NA        NA        NA        NA        NA #>  [92,]   NA        NA        NA        NA        NA        NA        NA #>  [93,]   NA        NA        NA        NA        NA        NA        NA #>  [94,]   NA        NA        NA        NA        NA        NA        NA #>  [95,]   NA        NA        NA        NA        NA        NA        NA #>  [96,]   NA        NA        NA        NA        NA        NA        NA #>  [97,]   NA        NA        NA        NA        NA        NA        NA #>  [98,]   NA        NA        NA        NA        NA        NA        NA #>  [99,]   NA        NA        NA        NA        NA        NA        NA #> [100,]   NA        NA        NA        NA        NA        NA        NA #>              [,8]       [,9]      [,10]     [,11]     [,12]     [,13]     [,14] #>   [1,]         NA         NA         NA        NA        NA        NA        NA #>   [2,]         NA         NA         NA        NA        NA        NA        NA #>   [3,]         NA         NA         NA        NA        NA        NA        NA #>   [4,]         NA         NA         NA        NA        NA        NA        NA #>   [5,]         NA         NA         NA        NA        NA        NA        NA #>   [6,]         NA         NA         NA        NA        NA        NA        NA #>   [7,]         NA         NA         NA        NA        NA        NA        NA #>   [8,]         NA         NA         NA        NA        NA        NA        NA #>   [9,]         NA         NA         NA        NA        NA        NA        NA #>  [10,]         NA         NA         NA        NA        NA        NA        NA #>  [11,]         NA         NA         NA        NA        NA        NA        NA #>  [12,]         NA         NA         NA        NA        NA        NA        NA #>  [13,]         NA         NA         NA        NA        NA        NA        NA #>  [14,]         NA         NA         NA        NA        NA        NA        NA #>  [15,]         NA         NA         NA        NA        NA        NA        NA #>  [16,]         NA         NA         NA        NA        NA        NA        NA #>  [17,]         NA         NA         NA        NA        NA        NA        NA #>  [18,]         NA         NA         NA        NA        NA        NA 0.2892787 #>  [19,]         NA         NA         NA        NA        NA 0.2366622 0.2559362 #>  [20,]         NA         NA         NA        NA 0.1896709 0.2087457 0.2339253 #>  [21,]         NA         NA         NA 0.1501672 0.1669403 0.1904811 0.2213948 #>  [22,]         NA         NA         NA 0.1326752 0.1523749 0.1800634 0.2161119 #>  [23,]         NA         NA 0.10790772 0.1220642 0.1442743 0.1754338 0.2156545 #>  [24,]         NA 0.09409581 0.10168636 0.1167702 0.1407936 0.1744642 0.2176270 #>  [25,]         NA 0.09274261 0.09982884 0.1151720 0.1401106 0.1751482 0.2198717 #>  [26,] 0.09584795 0.09494335 0.10092434 0.1157371 0.1405886 0.1757764 0.2206523 #>  [27,] 0.10258470 0.09946973 0.10369539 0.1171565 0.1409161 0.1750767 0.2187877 #>  [28,] 0.11107585 0.10525474 0.10710594 0.1184509 0.1402072 0.1723024 0.2137219 #>  [29,] 0.12041945 0.11147921 0.11044173 0.1190408 0.1380546 0.1672620 0.2055256 #>  [30,] 0.12996182 0.11763176 0.11335590 0.1187718 0.1345307 0.1602915 0.1948338 #>  [31,] 0.13934296 0.12353803 0.11587790 0.1178999 0.1301431 0.1521767 0.1827329 #>  [32,] 0.14851499 0.12935902 0.11838830 0.1170382 0.1257526 0.1440389 0.1706133 #>  [33,] 0.15773460 0.13556214 0.12156606 0.1170795 0.1224675 0.1372018 0.1600098 #>  [34,] 0.16753297 0.14287081 0.12631702 0.1191024 0.1215292 0.1330566 0.1524467 #>  [35,] 0.17866853 0.15220038 0.13369340 0.1242757 0.1242014 0.1329393 0.1493074 #>  [36,] 0.19206859 0.16458793 0.14481335 0.1337696 0.1316765 0.1380339 0.1517370 #>  [37,] 0.20876603 0.18112283 0.16078807 0.1486819 0.1450042 0.1493070 0.1605863 #>  [38,] 0.22983628 0.20288359 0.18266172 0.1699850 0.1650474 0.1674771 0.1763977 #>  [39,] 0.25633872 0.23088432 0.21136645 0.1984925 0.1924655 0.1930159 0.1994272 #>  [40,] 0.28926510 0.26603244 0.24769297 0.2348459 0.2277199 0.2261762 0.2296956 #>  [41,] 0.32949660 0.30909771 0.29227463 0.2795174 0.2710970 0.2670373 0.2670588 #>  [42,] 0.37776958 0.36069116 0.34558219 0.3328222 0.3227414 0.3155595 0.3112835 #>  [43,] 0.43464996 0.42125212 0.40792541 0.3949366 0.3826913 0.3716382 0.3621195 #>  [44,] 0.50051528 0.49104131 0.47945832 0.4659165 0.4509105 0.4351496 0.4193594 #>  [45,] 0.57554382 0.57013828 0.56018510 0.5457118 0.5273118 0.5059825 0.4828774 #>  [46,] 0.65971004 0.65844197 0.64996517 0.6341753 0.6117693 0.5840532 0.5526469 #>  [47,] 0.75278621 0.75567404 0.74851673 0.7310657 0.7041190 0.6693037 0.6287347 #>  [48,] 0.85434977 0.86138505 0.85541957 0.8360449 0.8041500 0.7616851 0.7112763 #>  [49,] 0.96379666 0.97496410 0.97011833 0.9486723 0.9115885 0.8611298 0.8004366 #>  [50,] 1.08035996 1.09565253 1.09192795 1.0684000 1.0260794 0.9675199 0.8963633 #>  [51,] 1.20313363 1.22256209 1.22004289 1.1945697 1.1471699 1.0806545 0.9991388 #>  [52,] 1.33109978 1.35469738 1.35355117 1.3264153 1.2742975 1.2002227 1.1087375 #>  [53,] 1.46315804 1.49098163 1.49145317 1.4630717 1.4067868 1.3257861 1.2249928 #>  [54,] 1.59815466 1.63028423 1.63268455 1.6035896 1.5438538 1.4567708 1.3475764 #>  [55,] 1.73490891 1.77144771 1.77614126 1.7469568 1.6846195 1.5924720 1.4759917 #>  [56,] 1.87223427 1.91331155 1.92070436 1.8921209 1.8281298 1.7320673 1.6095798 #>  [57,] 2.00895254 2.05473055 2.06526187 2.0380133 1.9733787 1.8746384 1.7475363 #>  [58,] 2.14389928 2.19458551 2.20872501 2.1835707 2.1193335 2.0191968 1.8889363 #>  [59,] 2.27592069 2.33178528 2.35003705 2.3277507 2.2649566 2.1647109 2.0327643 #>  [60,] 2.40386238 2.46525988 2.48817353 2.4695408 2.4092235 2.3101320 2.1779457 #>  [61,] 2.52655207 2.59394569 2.62213389 2.6079589 2.5511342 2.4544159 2.3233785 #>  [62,] 2.64277891 2.71676455 2.75092530 2.7420466 2.6897167 2.5965392 2.4679616 #>  [63,] 2.75127236 2.83259926 2.87354050 2.8708532 2.8240234 2.7355090 2.6106188 #>  [64,] 2.85068410 2.94026839 2.98893152 2.9934153 2.9531194 2.8703648 2.7503163 #>  [65,] 2.93957591 3.03850329 3.09598198 3.1087298 3.0760637 3.0001718 2.8860728 #>  [66,] 3.01641645 3.12593014 3.19348008 3.2157250 3.1918839 3.1240061 3.0169583 #>  [67,] 3.07958938 3.20106004 3.28009518 3.3132296 3.2995450 3.2409289 3.1420816 #>  [68,] 3.12741536 3.26228986 3.35436069 3.3999430 3.3979134 3.3499527 3.2605638 #>  [69,] 3.15819021 3.30791741 3.41466717 3.4744100 3.4857196 3.4499977 3.3714971 #>  [70,] 3.17024189 3.33617483 3.45927004 3.5350047 3.5615223 3.5398431 3.4738905 #>  [71,] 3.16200846 3.34528434 3.48631793 3.5799299 3.6236812 3.6180783 3.5666055 #>  [72,] 3.13213816 3.33354044 3.49390766 3.6072399 3.6703465 3.6830618 3.6482903 #>  [73,] 3.07961070 3.29942108 3.48017189 3.6148950 3.6994756 3.7328991 3.7173220 #>  [74,] 3.00387493 3.24172690 3.44340276 3.6008557 3.7088877 3.7654528 3.7717717 #>  [75,] 2.90499327 3.15974291 3.38221084 3.5632199 3.6963648 3.7783976 3.8094071 #>  [76,]         NA 3.05341018 3.29571173 3.5004031 3.6598048 3.7693289 3.8277480 #>  [77,]         NA 2.92348816 3.18372465 3.4113492 3.5974213 3.7359322 3.8241852 #>  [78,]         NA         NA 3.04695921 3.2957550 3.5079800 3.6762041 3.7961651 #>  [79,]         NA         NA         NA 3.1542781 3.3910459 3.5887115 3.7414332 #>  [80,]         NA         NA         NA 2.9886931 3.2472078 3.4728594 3.6583150 #>  [81,]         NA         NA         NA        NA 3.0782424 3.3291295 3.5460030 #>  [82,]         NA         NA         NA        NA        NA 3.1592476 3.4048062 #>  [83,]         NA         NA         NA        NA        NA        NA 3.2363204 #>  [84,]         NA         NA         NA        NA        NA        NA        NA #>  [85,]         NA         NA         NA        NA        NA        NA        NA #>  [86,]         NA         NA         NA        NA        NA        NA        NA #>  [87,]         NA         NA         NA        NA        NA        NA        NA #>  [88,]         NA         NA         NA        NA        NA        NA        NA #>  [89,]         NA         NA         NA        NA        NA        NA        NA #>  [90,]         NA         NA         NA        NA        NA        NA        NA #>  [91,]         NA         NA         NA        NA        NA        NA        NA #>  [92,]         NA         NA         NA        NA        NA        NA        NA #>  [93,]         NA         NA         NA        NA        NA        NA        NA #>  [94,]         NA         NA         NA        NA        NA        NA        NA #>  [95,]         NA         NA         NA        NA        NA        NA        NA #>  [96,]         NA         NA         NA        NA        NA        NA        NA #>  [97,]         NA         NA         NA        NA        NA        NA        NA #>  [98,]         NA         NA         NA        NA        NA        NA        NA #>  [99,]         NA         NA         NA        NA        NA        NA        NA #> [100,]         NA         NA         NA        NA        NA        NA        NA #>            [,15]     [,16]     [,17]     [,18]     [,19]     [,20]     [,21] #>   [1,]        NA        NA        NA        NA        NA        NA        NA #>   [2,]        NA        NA        NA        NA        NA        NA        NA #>   [3,]        NA        NA        NA        NA        NA        NA        NA #>   [4,]        NA        NA        NA        NA        NA        NA        NA #>   [5,]        NA        NA        NA        NA        NA        NA        NA #>   [6,]        NA        NA        NA        NA        NA        NA        NA #>   [7,]        NA        NA        NA        NA        NA        NA        NA #>   [8,]        NA        NA        NA        NA        NA        NA        NA #>   [9,]        NA        NA        NA        NA        NA        NA        NA #>  [10,]        NA        NA        NA        NA        NA        NA        NA #>  [11,]        NA        NA        NA        NA        NA        NA 0.7413911 #>  [12,]        NA        NA        NA        NA        NA 0.6655138 0.6378031 #>  [13,]        NA        NA        NA        NA 0.5954842 0.5764873 0.5561939 #>  [14,]        NA        NA        NA 0.5295164 0.5195730 0.5088126 0.4972071 #>  [15,]        NA        NA 0.4662800 0.4650839 0.4638962 0.4625058 0.4604308 #>  [16,]        NA 0.4050588 0.4116623 0.4193861 0.4279032 0.4365398 0.4443607 #>  [17,] 0.3458340 0.3587155 0.3740188 0.3913910 0.4100474 0.4288514 0.4464333 #>  [18,] 0.3064718 0.3274501 0.3519408 0.3791526 0.4078417 0.4364290 0.4631478 #>  [19,] 0.2802737 0.3095939 0.3432188 0.3799150 0.4180000 0.4554925 0.4902833 #>  [20,] 0.2654273 0.3028116 0.3449874 0.3902980 0.4366634 0.4817584 0.5231995 #>  [21,] 0.2595971 0.3042756 0.3539417 0.4065547 0.4596968 0.5107702 0.5571934 #>  [22,] 0.2601152 0.3108978 0.3666078 0.4248781 0.4830249 0.5382572 0.5878744 #>  [23,] 0.2642115 0.3195935 0.3796380 0.4417205 0.5029699 0.5604828 0.6115147 #>  [24,] 0.2692562 0.3275492 0.3900959 0.4540894 0.5165509 0.5745395 0.6253340 #>  [25,] 0.2729885 0.3324598 0.3956963 0.4597838 0.5217081 0.5785569 0.6276861 #>  [26,] 0.2737013 0.3327084 0.3949734 0.4575427 0.5174290 0.5718001 0.6181289 #>  [27,] 0.2703620 0.3274680 0.3873569 0.4470928 0.5037630 0.5546514 0.5973722 #>  [28,] 0.2626577 0.3167167 0.3731532 0.4290927 0.4817287 0.5284814 0.5671154 #>  [29,] 0.2509637 0.3011689 0.3534380 0.4049863 0.4531299 0.4954302 0.5297991 #>  [30,] 0.2362440 0.2821370 0.3298787 0.3767882 0.4203067 0.4581294 0.4883026 #>  [31,] 0.2199008 0.2613440 0.3045121 0.3468299 0.3858545 0.4193990 0.4456243 #>  [32,] 0.2035951 0.2407135 0.2795066 0.3174978 0.3523439 0.3819542 0.4045815 #>  [33,] 0.1890612 0.2221615 0.2569358 0.2909936 0.3220715 0.3481523 0.3675586 #>  [34,] 0.1779367 0.2074147 0.2385882 0.2691396 0.2968668 0.3198048 0.3363265 #>  [35,] 0.1716255 0.1978705 0.2258295 0.2532476 0.2779687 0.2980648 0.3119449 #>  [36,] 0.1712047 0.1945121 0.2195279 0.2440558 0.2659788 0.2833974 0.2947496 #>  [37,] 0.1773809 0.1978794 0.2200420 0.2417367 0.2608880 0.2756253 0.2844158 #>  [38,] 0.1904945 0.2080940 0.2272680 0.2459654 0.2621654 0.2740369 0.2800838 #>  [39,] 0.2105652 0.2249282 0.2407320 0.2560348 0.2688950 0.2775408 0.2805273 #>  [40,] 0.2373674 0.2479059 0.2597142 0.2710008 0.2799385 0.2848432 0.2843418 #>  [41,] 0.2705245 0.2764189 0.2833872 0.2898391 0.2941071 0.2946304 0.2901320 #>  [42,] 0.3096063 0.3098452 0.3109510 0.3115949 0.3103214 0.3057342 0.2966805 #>  [43,] 0.3542188 0.3476540 0.3417515 0.3355107 0.3277455 0.3172692 0.3030818 #>  [44,] 0.4040757 0.3894875 0.3753701 0.3611210 0.3458839 0.3287276 0.3088343 #>  [45,] 0.4590441 0.4352120 0.4116783 0.3883080 0.3646352 0.3400299 0.3138845 #>  [46,] 0.5191631 0.4849359 0.4508536 0.4173153 0.3843028 0.3515305 0.3186274 #>  [47,] 0.5846338 0.5389960 0.4933614 0.4487236 0.4055646 0.3639828 0.3238668 #>  [48,] 0.6557865 0.5979149 0.5399046 0.4833944 0.4294114 0.3784724 0.3307457 #>  [49,] 0.7330293 0.6623404 0.5913530 0.5223906 0.4570616 0.3963288 0.3406568 #>  [50,] 0.8167877 0.7329711 0.6486582 0.5668838 0.4898628 0.4190249 0.3551435 #>  [51,] 0.9074413 0.8104803 0.7127668 0.6180585 0.5291916 0.4480749 0.3757994 #>  [52,] 1.0052663 0.8954441 0.7845366 0.6770209 0.5763571 0.4849381 0.4041760 #>  [53,] 1.1103871 0.9882807 0.8646648 0.7447188 0.6325171 0.5309330 0.4416994 #>  [54,] 1.2227431 1.0892038 0.9536319 0.8218769 0.6986077 0.5871661 0.4896005 #>  [55,] 1.3420703 1.1981942 1.0516617 0.9089494 0.7752898 0.6544747 0.5488578 #>  [56,] 1.4678985 1.3149863 1.1586999 1.0060895 0.8629124 0.7333846 0.6201514 #>  [57,] 1.5995616 1.4390720 1.2744090 1.1131360 0.9614898 0.8240804 0.7038271 #>  [58,] 1.7362197 1.5697168 1.3981774 1.2296141 1.0706945 0.9263889 0.7998706 #>  [59,] 1.8768888 1.7059875 1.5291427 1.3547520 1.1898639 1.0397750 0.9078921 #>  [60,] 2.0204767 1.8467883 1.6662252 1.4875086 1.3180209 1.1633520 1.0271234 #>  [61,] 2.1658210 1.9909042 1.8081726 1.6266164 1.4539099 1.2959083 1.1564322 #>  [62,] 2.3117289 2.1370487 1.9536128 1.7706353 1.5960483 1.4359517 1.2943560 #>  [63,] 2.4570151 2.2839137 2.1011137 1.9180185 1.7427943 1.5817747 1.4391590 #>  [64,] 2.6005358 2.4302199 2.2492471 2.0671872 1.8924289 1.7315387 1.5889149 #>  [65,] 2.7412163 2.5747631 2.3966531 2.2166117 2.0432490 1.8833761 1.7416119 #>  [66,] 2.8780693 2.7164524 2.5420999 2.3648906 2.1936656 2.0355035 1.8952775 #>  [67,] 3.0101986 2.8543357 2.6845319 2.5108233 2.3422996 2.1863385 2.0481125 #>  [68,] 3.1367874 2.9876064 2.8230995 2.6534657 2.4880636 2.3346081 2.1986244 #>  [69,] 3.2570657 3.1155865 2.9571638 2.7921592 2.6302197 2.4794363 2.3457449 #>  [70,] 3.3702582 3.2376846 3.0862698 2.9265274 2.7684030 2.6203983 2.4889169 #>  [71,] 3.4755132 3.3533248 3.2100856 3.0564311 2.9026007 2.7575288 2.6281368 #>  [72,] 3.5718184 3.4618542 3.3283082 3.1818825 3.0330816 2.8912758 2.7639391 #>  [73,] 3.6579138 3.5624325 3.4405405 3.3029180 3.1602761 3.0223959 2.8973160 #>  [74,] 3.7322143 3.6539195 3.5461510 3.4194408 3.2846104 3.1517916 3.0295682 #>  [75,] 3.7927604 3.7347765 3.6441326 3.5310449 3.4063069 3.2802994 3.1620926 #>  [76,] 3.8372136 3.8030013 3.7329799 3.6368420 3.5251696 3.4084444 3.2961178 #>  [77,] 3.8629138 3.8561170 3.8106093 3.7353152 3.6403782 3.5361834 3.4324085 #>  [78,] 3.8670085 3.8912336 3.8743438 3.8242258 3.7503188 3.6626670 3.5709670 #>  [79,] 3.8466560 3.9051896 3.9209806 3.9005970 3.8524808 3.7860509 3.7107656 #>  [80,] 3.7992906 3.8947762 3.9469502 3.9607933 3.9434467 3.9033911 3.8495468 #>  [81,] 3.7229265 3.8570266 3.9485653 4.0007037 4.0189914 4.0106477 3.9837268 #>  [82,] 3.6164623 3.7895446 3.9223394 4.0160218 4.0742984 4.1028182 4.1084303 #>  [83,] 3.4799438 3.6908301 3.8653441 4.0026011 4.1042823 4.1741986 4.2176713 #>  [84,] 3.3147373 3.5605565 3.7755607 3.9568486 4.1039900 4.2187619 4.3046782 #>  [85,]        NA 3.3997539 3.6521789 3.8761108 4.0690414 4.2306178 4.3623417 #>  [86,]        NA        NA 3.4957994 3.7590027 3.9960587 4.2045113 4.3837469 #>  [87,]        NA        NA        NA 3.6056408 3.8830385 4.1363077 4.3627415 #>  [88,]        NA        NA        NA        NA 3.7296261 4.0234166 4.2944850 #>  [89,]        NA        NA        NA        NA        NA 3.8651215 4.1759361 #>  [90,]        NA        NA        NA        NA        NA        NA 4.0062441 #>  [91,]        NA        NA        NA        NA        NA        NA        NA #>  [92,]        NA        NA        NA        NA        NA        NA        NA #>  [93,]        NA        NA        NA        NA        NA        NA        NA #>  [94,]        NA        NA        NA        NA        NA        NA        NA #>  [95,]        NA        NA        NA        NA        NA        NA        NA #>  [96,]        NA        NA        NA        NA        NA        NA        NA #>  [97,]        NA        NA        NA        NA        NA        NA        NA #>  [98,]        NA        NA        NA        NA        NA        NA        NA #>  [99,]        NA        NA        NA        NA        NA        NA        NA #> [100,]        NA        NA        NA        NA        NA        NA        NA #>            [,22]     [,23]     [,24]     [,25]     [,26]     [,27]      [,28] #>   [1,]        NA        NA        NA        NA        NA        NA         NA #>   [2,]        NA        NA        NA        NA        NA        NA         NA #>   [3,]        NA        NA        NA        NA        NA        NA         NA #>   [4,]        NA        NA        NA        NA        NA        NA         NA #>   [5,]        NA        NA        NA        NA        NA        NA         NA #>   [6,]        NA        NA        NA        NA        NA        NA         NA #>   [7,]        NA        NA        NA        NA        NA 1.0452249 1.00093236 #>   [8,]        NA        NA        NA        NA 0.9271184 0.8812722 0.83834271 #>   [9,]        NA        NA 0.8723587 0.8260646 0.7808508 0.7374957 0.69663529 #>  [10,]        NA 0.7832922 0.7407990 0.6984853 0.6570179 0.6169461 0.57874207 #>  [11,] 0.7058987 0.6692284 0.6320227 0.5947782 0.5578921 0.5217102 0.48656556 #>  [12,] 0.6086815 0.5785746 0.5477591 0.5164183 0.4847004 0.4527703 0.42084619 #>  [13,] 0.5347977 0.5123219 0.4886856 0.4637760 0.4375149 0.4099107 0.38109272 #>  [14,] 0.4845172 0.4703682 0.4543374 0.4360389 0.4151949 0.3916871 0.36558542 #>  [15,] 0.4570008 0.4514590 0.4430663 0.4311949 0.4154010 0.3954738 0.37145682 #>  [16,] 0.4502817 0.4531930 0.4520754 0.4460983 0.4346924 0.4175919 0.39484965 #>  [17,] 0.4613286 0.4721167 0.4775450 0.4766276 0.4687133 0.4535212 0.43114722 #>  [18,] 0.4862020 0.5039149 0.5148554 0.5179338 0.5124622 0.4981829 0.47526524 #>  [19,] 0.5203068 0.5436933 0.5588932 0.5647647 0.5606270 0.5462787 0.52198731 #>  [20,] 0.5587220 0.5863311 0.6044181 0.6118393 0.6079586 0.5926580 0.56631934 #>  [21,] 0.5965772 0.6268685 0.6464555 0.6542361 0.6496498 0.6326805 0.60383227 #>  [22,] 0.6294352 0.6608897 0.6806720 0.6877566 0.6816807 0.6625402 0.63096080 #>  [23,] 0.6536377 0.6848579 0.7036945 0.7092238 0.7010943 0.6795157 0.64522733 #>  [24,] 0.6665744 0.6963645 0.7133365 0.7166847 0.7061732 0.6821211 0.64536744 #>  [25,] 0.6668457 0.6942658 0.7087087 0.7094937 0.6964987 0.6701416 0.63134412 #>  [26,] 0.6543025 0.6786938 0.6902025 0.6882723 0.6728875 0.6445520 0.60425068 #>  [27,] 0.6299630 0.6509448 0.6593535 0.6547512 0.6372182 0.6073299 0.56611621 #>  [28,] 0.5958206 0.6132618 0.6186040 0.6115177 0.5921682 0.5611890 0.51963843 #>  [29,] 0.5545703 0.5685418 0.5709961 0.5617014 0.5408973 0.5092641 0.46787674 #>  [30,] 0.5092882 0.5200023 0.5198323 0.5086336 0.4867117 0.4547863 0.41394095 #>  [31,] 0.4631013 0.4708478 0.4683432 0.4555219 0.4327497 0.4007823 0.36070938 #>  [32,] 0.4188856 0.4239700 0.4193955 0.4051696 0.3817166 0.3498286 0.31060341 #>  [33,] 0.3790197 0.3817116 0.3752683 0.3597680 0.3356945 0.3038803 0.26543648 #>  [34,] 0.3452157 0.3457105 0.3375139 0.3207741 0.2960379 0.2641843 0.22634497 #>  [35,] 0.3184370 0.3168348 0.3069082 0.2888773 0.2633564 0.2312767 0.19379782 #>  [36,] 0.2989021 0.2952022 0.2834865 0.2640489 0.2375748 0.2050520 0.16767336 #>  [37,] 0.2861653 0.2802752 0.2666497 0.2456574 0.2180553 0.1848892 0.14738559 #>  [38,] 0.2792562 0.2710118 0.2553228 0.2326308 0.2037607 0.1698114 0.13203865 #>  [39,] 0.2768579 0.2660500 0.2481421 0.2236422 0.1934341 0.1586586 0.12058870 #>  [40,] 0.2775020 0.2639042 0.2436480 0.2172966 0.1857767 0.1502522 0.11199397 #>  [41,] 0.2797574 0.2631511 0.2404649 0.2123001 0.1796034 0.1435355 0.10533863 #>  [42,] 0.2823961 0.2625893 0.2374504 0.2075965 0.1739645 0.1376794 0.09992113 #>  [43,] 0.2845226 0.2613593 0.2338046 0.2024628 0.1682266 0.1321471 0.09530356 #>  [44,] 0.2856576 0.2590193 0.2291336 0.1965609 0.1621111 0.1267198 0.09132409 #>  [45,] 0.2857765 0.2555739 0.2234698 0.1899475 0.1556941 0.1214867 0.08807870 #>  [46,] 0.2853026 0.2514614 0.2172527 0.1830493 0.1493761 0.1168106 0.08588196 #>  [47,] 0.2850639 0.2475074 0.2112798 0.1766122 0.1438309 0.1132763 0.08521743 #>  [48,] 0.2862220 0.2448539 0.2066380 0.1716360 0.1399449 0.1116357 0.08668850 #>  [49,] 0.2901842 0.2448755 0.2046254 0.1693045 0.1387556 0.1127570 0.09097821 #>  [50,] 0.2985083 0.2490910 0.2066727 0.1709177 0.1413981 0.1175843 0.09882362 #>  [51,] 0.3128086 0.2590789 0.2142709 0.1778342 0.1490622 0.1271119 0.11100646 #>  [52,] 0.3346702 0.2764011 0.2289075 0.1914224 0.1629612 0.1423708 0.12835771 #>  [53,] 0.3655720 0.3025369 0.2520134 0.2130227 0.1843097 0.1644236 0.15177030 #>  [54,] 0.4068223 0.3388257 0.2849163 0.2439132 0.2143050 0.1943614 0.18221176 #>  [55,] 0.4595035 0.3864169 0.3287984 0.2852775 0.2541049 0.2332946 0.22072763 #>  [56,] 0.5244251 0.4462246 0.3846534 0.3381666 0.3047972 0.2823295 0.26842736 #>  [57,] 0.6020832 0.5188828 0.4532411 0.4034535 0.3673552 0.3425271 0.32644664 #>  [58,] 0.6926256 0.6047032 0.5350377 0.4817773 0.4425783 0.4148406 0.39588389 #>  [59,] 0.7958243 0.7036355 0.6301843 0.5734819 0.5310197 0.5000355 0.47771315 #>  [60,] 0.9110586 0.8152350 0.7384388 0.6785513 0.6329081 0.5985965 0.57267980 #>  [61,] 1.0373139 0.9386437 0.8591385 0.7965533 0.7480715 0.7106343 0.68118983 #>  [62,] 1.1732007 1.0725924 0.9911822 0.9265999 0.8758758 0.8358015 0.80320597 #>  [63,] 1.3170004 1.2154301 1.1330396 1.0673351 1.0151892 0.9732339 0.93816516 #>  [64,] 1.4667400 1.3651862 1.2827973 1.2169603 1.1643846 1.1215277 1.08493151 #>  [65,] 1.6202957 1.5196673 1.4382440 1.3733030 1.3213875 1.2787650 1.24179661 #>  [66,] 1.7755233 1.6765883 1.5969947 1.5339299 1.4837742 1.4425918 1.40653528 #>  [67,] 1.9304063 1.8337277 1.7566501 1.6963033 1.6489184 1.6103506 1.57652014 #>  [68,] 2.0832101 1.9890999 1.9149800 1.8579698 1.8141802 1.7792637 1.74889256 #>  [69,] 2.2326281 2.1411267 2.0701158 2.0167696 1.9771248 1.9466545 1.92078167 #>  [70,] 2.3779028 2.2887908 2.2207347 2.1710460 2.1357533 2.1101932 2.08955703 #>  [71,] 2.5189045 2.4317525 2.3662139 2.3198354 2.2887232 2.2681431 2.25309493 #>  [72,] 2.6561524 2.5704117 2.5067347 2.4630136 2.4355361 2.4195849 2.41003360 #>  [73,] 2.7907661 2.7058976 2.6433163 2.6013764 2.5766651 2.5645905 2.55998906 #>  [74,] 2.9243408 2.8399771 2.7777643 2.7366343 2.7135999 2.7043188 2.70370199 #>  [75,] 3.0587453 2.9748748 2.9125235 2.8713066 2.8487884 2.8410103 2.84308676 #>  [76,] 3.1958519 3.1130095 3.0504328 3.0085064 2.9854628 2.9778610 2.98115836 #>  [77,] 3.3372141 3.2566593 3.1943916 3.1516211 3.1273448 3.1187646 3.12182116 #>  [78,] 3.4837196 3.4075784 3.3469549 3.3038999 3.2782411 3.2679282 3.26951555 #>  [79,] 3.6352521 3.5666004 3.5098901 3.4679794 3.4415513 3.4293770 3.42873492 #>  [80,] 3.7904019 3.7332677 3.6837366 3.6453852 3.6197268 3.6063861 3.60344350 #>  [81,] 3.9462680 3.9055344 3.8674177 3.8360638 3.8137339 3.8008877 3.79644436 #>  [82,] 4.0983868 4.0795883 4.0579570 4.0379986 4.0225800 4.0129198 4.00876227 #>  [83,] 4.2408167 4.2498289 4.2503463 4.2469697 4.2429681 4.2401838 4.23911487 #>  [84,] 4.3663876 4.4090246 4.4376000 4.4564989 4.4691342 4.4777753 4.48354488 #>  [85,] 4.4671073 4.5486543 4.6110129 4.6580126 4.6929065 4.7181408 4.73527370 #>  [86,] 4.5346953 4.6594122 4.7606131 4.8412237 4.9040046 4.9512840 4.98481419 #>  [87,] 4.5611992 4.7318416 4.8757823 4.9947144 5.0905659 5.1652241 5.22035121 #>  [88,] 4.5396403 4.7570424 4.9459949 5.1066776 5.2398653 5.3466751 5.42836792 #>  [89,] 4.4646356 4.7274000 4.9616210 5.1657630 5.3391762 5.4818984 5.59447245 #>  [90,] 4.3329529 4.6372823 4.9147367 5.1619697 5.3767148 5.5576707 5.70436642 #>  [91,]        NA 4.4836628 4.7998926 5.0875316 5.3426107 5.5623093 5.74489669 #>  [92,]        NA        NA 4.6147995 4.9377486 5.2298542 5.4867031 5.70513901 #>  [93,]        NA        NA        NA        NA 5.0351715 5.3253027 5.57746776 #>  [94,]        NA        NA        NA        NA        NA 5.0770087 5.35855878 #>  [95,]        NA        NA        NA        NA        NA        NA         NA #>  [96,]        NA        NA        NA        NA        NA        NA         NA #>  [97,]        NA        NA        NA        NA        NA        NA         NA #>  [98,]        NA        NA        NA        NA        NA        NA         NA #>  [99,]        NA        NA        NA        NA        NA        NA         NA #> [100,]        NA        NA        NA        NA        NA        NA         NA #>             [,29]      [,30]       [,31]      [,32]       [,33]       [,34] #>   [1,]         NA         NA          NA         NA          NA          NA #>   [2,]         NA         NA          NA         NA          NA          NA #>   [3,]         NA         NA          NA         NA          NA          NA #>   [4,]         NA         NA          NA         NA          NA 1.422331648 #>   [5,]         NA         NA          NA 1.24349435 1.226411267 1.215919466 #>   [6,] 1.13986452 1.10401717 1.073640551 1.04911500 1.030673296 1.018426613 #>   [7,] 0.96059078 0.92483229 0.894128289 0.86881992 0.849139864 0.835225344 #>   [8,] 0.79899058 0.76374140 0.733013910 0.70713929 0.686370658 0.670884368 #>   [9,] 0.65879925 0.62443929 0.593947983 0.56766659 0.545883305 0.528824390 #>  [10,] 0.54283272 0.50962068 0.479492973 0.45281808 0.429933970 0.411130395 #>  [11,] 0.45280635 0.42080794 0.390971791 0.36371237 0.339435859 0.318514347 #>  [12,] 0.38922083 0.35826533 0.328418173 0.30016255 0.273996092 0.250397120 #>  [13,] 0.35132455 0.32099905 0.290617935 0.26075957 0.232039844 0.205070235 #>  [14,] 0.33715359 0.30683537 0.275224324 0.24302231 0.210991189 0.179902323 #>  [15,] 0.34364606 0.31256626 0.278931496 0.24359419 0.207487512 0.171565796 #>  [16,] 0.36682528 0.33415321 0.297693648 0.25847227 0.217613238 0.176270271 #>  [17,] 0.40204400 0.36697961 0.326980010 0.28325962 0.237145043 0.189996781 #>  [18,] 0.44427824 0.40614074 0.362055833 0.31343297 0.261802724 0.208729375 #>  [19,] 0.48845380 0.44675618 0.398276518 0.34461532 0.287497966 0.228678879 #>  [20,] 0.52978281 0.48428452 0.431377375 0.37283867 0.310569135 0.246489586 #>  [21,] 0.56408260 0.51481552 0.457737309 0.39477839 0.327986223 0.259415709 #>  [22,] 0.58804728 0.53531324 0.474592934 0.40793855 0.337508403 0.265452806 #>  [23,] 0.59944445 0.54378563 0.480181661 0.41076973 0.337778407 0.263410966 #>  [24,] 0.59721634 0.53936251 0.473798388 0.40270655 0.328343310 0.252921563 #>  [25,] 0.58147478 0.52227391 0.455759799 0.38412079 0.309599389 0.234376664 #>  [26,] 0.55339208 0.49373229 0.427281307 0.35619629 0.282667912 0.208808466 #>  [27,] 0.51500262 0.45573412 0.390282348 0.32074119 0.249217268 0.177723549 #>  [28,] 0.46894008 0.41080569 0.347144178 0.27996078 0.211253115 0.142911957 #>  [29,] 0.41814240 0.36172359 0.300449085 0.23621770 0.170901174 0.106253326 #>  [30,] 0.36555819 0.31124184 0.252730438 0.19180639 0.130206631 0.069541115 #>  [31,] 0.31388602 0.26185432 0.206259429 0.14876455 0.090970096 0.034342021 #>  [32,] 0.26537100 0.21561424 0.162887554 0.10873808 0.054633721 0.001901666 #>  [33,] 0.22167423 0.17402364 0.123955198 0.07290734 0.022223444 0.000000000 #>  [34,] 0.18382015 0.13799582 0.090267595 0.04197464 0.000000000 0.000000000 #>  [35,] 0.15221715 0.10788502 0.062131175 0.01620510 0.000000000 0.000000000 #>  [36,] 0.12673899 0.08356991 0.039437017 0.00000000 0.000000000 0.000000000 #>  [37,] 0.10684904 0.06457349 0.021774305 0.00000000 0.000000000 0.000000000 #>  [38,] 0.09174691 0.05019980 0.008555470 0.00000000 0.000000000 0.000000000 #>  [39,] 0.08051754 0.03966876 0.000000000 0.00000000 0.000000000 0.000000000 #>  [40,] 0.07226534 0.03223364 0.000000000 0.00000000 0.000000000 0.000000000 #>  [41,] 0.06622060 0.02726994 0.000000000 0.00000000 0.000000000 0.000000000 #>  [42,] 0.06181070 0.02432999 0.000000000 0.00000000 0.000000000 0.000000000 #>  [43,] 0.05869422 0.02316277 0.000000000 0.00000000 0.000000000 0.000000000 #>  [44,] 0.05676129 0.02370340 0.000000000 0.00000000 0.000000000 0.000000000 #>  [45,] 0.05610756 0.02604043 0.000000000 0.00000000 0.000000000 0.000000000 #>  [46,] 0.05699180 0.03037142 0.006081458 0.00000000 0.000000000 0.000000000 #>  [47,] 0.05978826 0.03695777 0.016542075 0.00000000 0.000000000 0.000000000 #>  [48,] 0.06494411 0.04608903 0.029679783 0.01520389 0.002166754 0.000000000 #>  [49,] 0.07295008 0.05806408 0.045609014 0.03484204 0.025083870 0.015822376 #>  [50,] 0.08432898 0.07319320 0.064437050 0.05708922 0.050288366 0.043391612 #>  [51,] 0.09964278 0.09182058 0.086300605 0.08189198 0.077559334 0.072534547 #>  [52,] 0.11951460 0.11436267 0.111418915 0.10928889 0.106776869 0.102998918 #>  [53,] 0.14465857 0.14135411 0.140154152 0.13948340 0.138004969 0.134732741 #>  [54,] 0.17590809 0.17349073 0.173067686 0.17291148 0.171568433 0.167967960 #>  [55,] 0.21423214 0.21165820 0.210960093 0.21029157 0.208110756 0.203284250 #>  [56,] 0.26073036 0.25693625 0.254884087 0.25264523 0.248621455 0.241641383 #>  [57,] 0.31660016 0.31057121 0.306122543 0.30128064 0.294424447 0.284371784 #>  [58,] 0.38307326 0.37391355 0.366128146 0.35773499 0.347123595 0.333129367 #>  [59,] 0.46132347 0.44832242 0.436426240 0.42367714 0.408506676 0.389795800 #>  [60,] 0.55235250 0.53504371 0.518487533 0.50077735 0.480414072 0.456350268 #>  [61,] 0.65686473 0.63507292 0.613581719 0.59055453 0.564582844 0.534713018 #>  [62,] 0.77514483 0.74901672 0.722626290 0.69421566 0.662479980 0.626575928 #>  [63,] 0.90695343 0.87696937 0.846046498 0.81250277 0.775140254 0.733234939 #>  [64,] 1.05145611 1.01841945 0.983662564 0.94556388 0.903024451 0.855439437 #>  [65,] 1.20719880 1.17220122 1.134618818 1.09286257 1.045912677 0.993272858 #>  [66,] 1.37213940 1.33650165 1.297366889 1.25313900 1.202845601 1.146077165 #>  [67,] 1.54374090 1.50893022 1.469711358 1.42443177 1.372123786 1.312431679 #>  [68,] 1.71912598 1.68665351 1.648921906 1.60416626 1.551372052 1.490194141 #>  [69,] 1.89528708 1.86659108 1.831910765 1.78931058 1.737671829 1.676608620 #>  [70,] 2.06933975 2.04566300 2.015468552 1.97659467 1.927759774 1.868480836 #>  [71,] 2.23880115 2.22107320 2.196545210 2.16278238 2.118285119 2.062416231 #>  [72,] 2.40186993 2.39060631 2.372556118 2.34497894 2.306111467 2.255109593 #>  [73,] 2.55767883 2.55291037 2.541686891 2.52094976 2.488641193 2.443667376 #>  [74,] 2.70648879 2.70773281 2.703164630 2.68941895 2.664132952 2.625935584 #>  [75,] 2.84979227 2.85607539 2.857459556 2.85031124 2.831976087 2.800798339 #>  [76,] 2.99029664 3.00023449 3.006380232 3.00489800 2.992881582 2.968406548 #>  [77,] 3.13176536 3.14369877 3.153029347 3.15581021 3.148949157 3.130294179 #>  [78,] 3.27870630 3.29088702 3.301596320 3.30688880 3.303575896 3.289343528 #>  [79,] 3.43591293 3.44672457 3.456978239 3.46285698 3.461184470 3.449571670 #>  [80,] 3.60788352 3.61607754 3.624241233 3.62881928 3.626768542 3.615728662 #>  [81,] 3.79816436 3.80308617 3.807958310 3.80961721 3.805278075 3.792722842 #>  [82,] 4.00868145 4.01046026 4.011483592 4.00909701 4.000894744 3.984917012 #>  [83,] 4.23913759 4.23881554 4.236242140 4.22936764 4.216272856 4.195366734 #>  [84,] 4.48655413 4.48613571 4.481124501 4.47014081 4.451838507 4.425092675 #>  [85,] 4.74502726 4.74743873 4.742071692 4.72824498 4.705243812 4.672487009 #>  [86,] 5.00574704 5.01470512 5.011918268 4.99738984 4.971060612 4.932945019 #>  [87,] 5.25729685 5.27709590 5.280530297 5.26822761 5.240769375 5.198786551 #>  [88,] 5.48621840 5.52145192 5.535237530 5.52871827 5.503058746 5.459491581 #>  [89,] 5.67779968 5.73303512 5.761523550 5.76476656 5.744408521 5.702228710 #>  [90,] 5.81702698 5.89645214 5.943913449 5.96106951 5.949894829 5.912616584 #>  [91,] 5.88964057 5.99669672 6.066991475 6.10210236 6.104140730 6.075637362 #>  [92,] 5.88324169 6.02025687 6.116490867 6.17317969 6.192342145 6.176624630 #>  [93,] 5.78840855 5.95624631 6.080416030 6.16154989 6.201322787 6.202272628 #>  [94,] 5.59977600 5.79752419 5.950168695 6.05750035 6.120598166 6.141646167 #>  [95,] 5.31701112 5.54174883 5.721639505 5.85545000 5.943438344 5.987190727 #>  [96,]         NA         NA          NA 5.55497294 5.667895997 5.735730674 #>  [97,]         NA         NA          NA         NA          NA 5.389392177 #>  [98,]         NA         NA          NA         NA          NA          NA #>  [99,]         NA         NA          NA         NA          NA          NA #> [100,]         NA         NA          NA         NA          NA          NA #>              [,35]      [,36]       [,37]       [,38]       [,39]       [,40] #>   [1,]          NA         NA          NA          NA          NA          NA #>   [2,]          NA         NA          NA          NA          NA          NA #>   [3,]          NA         NA 1.653224143 1.673872680 1.700708030 1.733336700 #>   [4,] 1.420499815 1.42545991 1.436969404 1.454716160 1.478342254 1.507468662 #>   [5,] 1.211999084 1.21452646 1.223292153 1.238016136 1.258363560 1.283963967 #>   [6,] 1.012382208 1.01245468 1.018473580 1.030190762 1.047290747 1.069406835 #>   [7,] 0.827123775 0.82479387 0.828105482 0.836841621 0.850705586 0.869335563 #>   [8,] 0.660775600 0.65605156 0.656625719 0.662316244 0.672851277 0.687882735 #>   [9,] 0.516641467 0.50939848 0.507061662 0.509495366 0.516465904 0.527654681 #>  [10,] 0.396629056 0.38656520 0.380973847 0.379783098 0.382816450 0.389804881 #>  [11,] 0.301259301 0.28789796 0.278555607 0.273245988 0.271871528 0.274233845 #>  [12,] 0.229791365 0.21252270 0.198830808 0.188838063 0.182546932 0.179848472 #>  [13,] 0.180417235 0.15856670 0.139896164 0.124657297 0.112970061 0.104828831 #>  [14,] 0.150488030 0.12339878 0.099169332 0.078196259 0.060728420 0.046870769 #>  [15,] 0.136747465 0.10386438 0.073621286 0.046568012 0.023086292 0.003391544 #>  [16,] 0.135560586 0.09650606 0.059985693 0.026702616 0.000000000 0.000000000 #>  [17,] 0.143134057 0.09776779 0.054946291 0.015517384 0.000000000 0.000000000 #>  [18,] 0.155726984 0.10418454 0.055305515 0.010065802 0.000000000 0.000000000 #>  [19,] 0.169849448 0.11255627 0.058135460 0.007667643 0.000000000 0.000000000 #>  [20,] 0.182441908 0.12010160 0.060908250 0.006018780 0.000000000 0.000000000 #>  [21,] 0.191024801 0.12458294 0.061599315 0.003275822 0.000000000 0.000000000 #>  [22,] 0.193806071 0.12439278 0.058755551 0.000000000 0.000000000 0.000000000 #>  [23,] 0.189735823 0.11859267 0.051521586 0.000000000 0.000000000 0.000000000 #>  [24,] 0.178501818 0.10690028 0.039620964 0.000000000 0.000000000 0.000000000 #>  [25,] 0.160466134 0.08962568 0.023294189 0.000000000 0.000000000 0.000000000 #>  [26,] 0.136550551 0.06756454 0.003200936 0.000000000 0.000000000 0.000000000 #>  [27,] 0.108084592 0.04186096 0.000000000 0.000000000 0.000000000 0.000000000 #>  [28,] 0.076634425 0.01385636 0.000000000 0.000000000 0.000000000 0.000000000 #>  [29,] 0.043832298 0.00000000 0.000000000 0.000000000 0.000000000 0.000000000 #>  [30,] 0.011224740 0.00000000 0.000000000 0.000000000 0.000000000 0.000000000 #>  [31,] 0.000000000 0.00000000 0.000000000 0.000000000 0.000000000 0.000000000 #>  [32,] 0.000000000 0.00000000 0.000000000 0.000000000 0.000000000 0.000000000 #>  [33,] 0.000000000 0.00000000 0.000000000 0.000000000 0.000000000 0.000000000 #>  [34,] 0.000000000 0.00000000 0.000000000 0.000000000 0.000000000 0.000000000 #>  [35,] 0.000000000 0.00000000 0.000000000 0.000000000 0.000000000 0.000000000 #>  [36,] 0.000000000 0.00000000 0.000000000 0.000000000 0.000000000 0.000000000 #>  [37,] 0.000000000 0.00000000 0.000000000 0.000000000 0.000000000 0.000000000 #>  [38,] 0.000000000 0.00000000 0.000000000 0.000000000 0.000000000 0.000000000 #>  [39,] 0.000000000 0.00000000 0.000000000 0.000000000 0.000000000 0.000000000 #>  [40,] 0.000000000 0.00000000 0.000000000 0.000000000 0.000000000 0.000000000 #>  [41,] 0.000000000 0.00000000 0.000000000 0.000000000 0.000000000 0.000000000 #>  [42,] 0.000000000 0.00000000 0.000000000 0.000000000 0.000000000 0.000000000 #>  [43,] 0.000000000 0.00000000 0.000000000 0.000000000 0.000000000 0.000000000 #>  [44,] 0.000000000 0.00000000 0.000000000 0.000000000 0.000000000 0.000000000 #>  [45,] 0.000000000 0.00000000 0.000000000 0.000000000 0.000000000 0.000000000 #>  [46,] 0.000000000 0.00000000 0.000000000 0.000000000 0.000000000 0.000000000 #>  [47,] 0.000000000 0.00000000 0.000000000 0.000000000 0.000000000 0.000000000 #>  [48,] 0.000000000 0.00000000 0.000000000 0.000000000 0.000000000 0.000000000 #>  [49,] 0.006806783 0.00000000 0.000000000 0.000000000 0.000000000 0.000000000 #>  [50,] 0.036071471 0.02838390 0.020793802 0.014150062 0.009608665 0.008509551 #>  [51,] 0.066415040 0.05923117 0.051468763 0.044038636 0.038191994 0.035387638 #>  [52,] 0.097481124 0.09022546 0.081729203 0.072949769 0.065213773 0.060076822 #>  [53,] 0.129127875 0.12116229 0.111334989 0.100632966 0.090435783 0.082370350 #>  [54,] 0.161515795 0.15215412 0.140374756 0.127177198 0.113970475 0.102425574 #>  [55,] 0.195175142 0.18369888 0.169333310 0.153074756 0.136339064 0.120814263 #>  [56,] 0.231041544 0.21671691 0.199127688 0.179254286 0.158499310 0.138542911 #>  [57,] 0.270451680 0.25254842 0.231104838 0.207076871 0.181838001 0.157039456 #>  [58,] 0.315095219 0.29290800 0.266997873 0.238292815 0.208126702 0.178106119 #>  [59,] 0.366924138 0.33979742 0.308842262 0.274960768 0.239442902 0.203841214 #>  [60,] 0.428025243 0.39538215 0.358857306 0.319334466 0.278061822 0.236535292 #>  [61,] 0.500465694 0.46184108 0.419301590 0.373725132 0.326326358 0.278548668 #>  [62,] 0.586124085 0.54120088 0.492313171 0.440349328 0.386503945 0.332178077 #>  [63,] 0.686521061 0.63516823 0.579746302 0.521172739 0.460639435 0.399520144 #>  [64,] 0.802663706 0.74497282 0.683016493 0.617760272 0.550412793 0.482338841 #>  [65,] 0.934917167 0.87123376 0.802965157 0.731142278 0.657009914 0.581943534 #>  [66,] 1.082915691 1.01386060 0.939754238 0.861706131 0.781014376 0.699083962 #>  [67,] 1.245523549 1.17199934 1.092800392 1.009121896 0.922327882 0.833868664 #>  [68,] 1.420854285 1.34403198 1.260757416 1.172310506 1.080127252 0.985713969 #>  [69,] 1.606354260 1.52763660 1.441554506 1.349462344 1.252865915 1.153331266 #>  [70,] 1.798953064 1.71991231 1.632496033 1.538112986 1.438327350 1.334760377 #>  [71,] 1.995278820 1.91756941 1.830425382 1.735280390 1.633736180 1.527455792 #>  [72,] 2.191930283 2.11717976 2.031950462 1.937663607 1.835929108 1.728429717 #>  [73,] 2.385790045 2.31547486 2.233721674 2.141896828 2.041582287 1.934451009 #>  [74,] 2.574354607 2.50967052 2.432744617 2.344844423 2.247484113 2.142292156 #>  [75,] 2.756048497 2.69778810 2.626700512 2.543913405 2.450833432 2.349007909 #>  [76,] 2.930482594 2.87893411 2.814238587 2.737350541 2.649533883 2.552220098 #>  [77,] 3.098613252 3.05349479 2.995198294 2.924484075 2.842447169 2.750374876 #>  [78,] 3.262760643 3.22320249 3.170717441 3.105866676 3.029563441 2.942933054 #>  [79,] 3.426453604 3.39103715 3.343186969 3.283278830 3.212047685 3.130453234 #>  [80,] 3.594085001 3.56094111 3.516025656 3.459562149 3.392128918 3.314532986 #>  [81,] 3.770385503 3.73734797 3.693268671 3.638270431 3.572814802 3.497586483 #>  [82,] 3.959752399 3.92455442 3.878991102 3.823151873 3.757437710 3.682457825 #>  [83,] 4.165499138 4.12599399 4.076617850 4.017505546 3.949066728 3.871895828 #>  [84,] 4.389114984 4.34349791 4.288199076 4.223484071 4.149849132 4.067944591 #>  [85,] 4.629636068 4.57664367 4.513749174 4.441435834 4.360368268 4.271328797 #>  [86,] 4.883224263 4.82229114 4.750750642 4.669387498 4.579115817 4.480926864 #>  [87,] 5.143026695 5.07438614 4.993908347 4.902756124 4.802169585 4.693422767 #>  [88,] 5.399349193 5.32407379 5.235204880 5.134349162 5.023141319 4.903205670 #>  [89,] 5.640129658 5.56011563 5.464260033 5.354664562 5.233415950 5.102547331 #>  [90,] 5.851654137 5.76955803 5.668948093 5.552452693 5.422653223 5.282038396 #>  [91,] 6.019431914 5.93856712 5.836189668 5.715460601 5.579478524 5.431218913 #>  [92,] 6.129144634 6.05333893 5.952822150 5.831260618 5.692265746 5.539309803 #>  [93,] 6.167607946 6.10101428 6.006469553 5.888076760 5.749920521 5.595951395 #>  [94,] 6.123721062 6.07056694 5.986372017 5.875560022 5.742606169 5.591884074 #>  [95,] 5.989409551 5.95367220 5.884179617 5.785511807 5.662404104 5.519554286 #>  [96,] 5.760567584 5.74557596 5.694739930 5.612589182 5.503942089 5.373675353 #>  [97,] 5.437964715 5.44595583 5.416893031 5.355022873 5.265032925 5.151791701 #>  [98,]          NA         NA 5.054225712 5.015328478 4.947328097 4.854869449 #>  [99,]          NA         NA          NA          NA          NA          NA #> [100,]          NA         NA          NA          NA          NA          NA #>             [,41]      [,42]      [,43]      [,44]       [,45]       [,46] #>   [1,]         NA         NA         NA         NA          NA          NA #>   [2,] 1.99623004 2.04339980 2.09583744 2.15348351 2.216460276 2.285101068 #>   [3,] 1.77138642 1.81454156 1.86258114 1.91541847 1.973140228 2.036041231 #>   [4,] 1.54172325 1.58077358 1.62436471 1.67236073 1.724787404 1.781872028 #>   [5,] 1.31443628 1.34942065 1.38861699 1.43182852 1.479007390 1.530298382 #>   [6,] 1.09614479 1.12711469 1.16197038 1.20045444 1.242445680 1.288005069 #>   [7,] 0.89232791 0.91926931 0.94977666 0.98354267 1.020383767 1.060286619 #>   [8,] 0.70700946 0.72980935 0.75587917 0.78487959 0.816582405 0.850916165 #>   [9,] 0.54268094 0.56113341 0.58260929 0.60675806 0.633327050 0.662205199 #>  [10,] 0.40040873 0.41424838 0.43094202 0.45014772 0.471607021 0.495186468 #>  [11,] 0.28005434 0.28900369 0.30073811 0.31493999 0.331359510 0.349854098 #>  [12,] 0.18054139 0.18436029 0.19101097 0.20020979 0.211724139 0.225410443 #>  [13,] 0.10011999 0.09864934 0.10017695 0.10445629 0.111274368 0.120489278 #>  [14,] 0.03660081 0.02979584 0.02626827 0.02580559 0.028211314 0.033343139 #>  [15,] 0.00000000 0.00000000 0.00000000 0.00000000 0.000000000 0.000000000 #>  [16,] 0.00000000 0.00000000 0.00000000 0.00000000 0.000000000 0.000000000 #>  [17,] 0.00000000 0.00000000 0.00000000 0.00000000 0.000000000 0.000000000 #>  [18,] 0.00000000 0.00000000 0.00000000 0.00000000 0.000000000 0.000000000 #>  [19,] 0.00000000 0.00000000 0.00000000 0.00000000 0.000000000 0.000000000 #>  [20,] 0.00000000 0.00000000 0.00000000 0.00000000 0.000000000 0.000000000 #>  [21,] 0.00000000 0.00000000 0.00000000 0.00000000 0.000000000 0.000000000 #>  [22,] 0.00000000 0.00000000 0.00000000 0.00000000 0.000000000 0.000000000 #>  [23,] 0.00000000 0.00000000 0.00000000 0.00000000 0.000000000 0.000000000 #>  [24,] 0.00000000 0.00000000 0.00000000 0.00000000 0.000000000 0.000000000 #>  [25,] 0.00000000 0.00000000 0.00000000 0.00000000 0.000000000 0.000000000 #>  [26,] 0.00000000 0.00000000 0.00000000 0.00000000 0.000000000 0.000000000 #>  [27,] 0.00000000 0.00000000 0.00000000 0.00000000 0.000000000 0.000000000 #>  [28,] 0.00000000 0.00000000 0.00000000 0.00000000 0.000000000 0.000000000 #>  [29,] 0.00000000 0.00000000 0.00000000 0.00000000 0.000000000 0.000000000 #>  [30,] 0.00000000 0.00000000 0.00000000 0.00000000 0.000000000 0.000000000 #>  [31,] 0.00000000 0.00000000 0.00000000 0.00000000 0.000000000 0.000000000 #>  [32,] 0.00000000 0.00000000 0.00000000 0.00000000 0.000000000 0.000000000 #>  [33,] 0.00000000 0.00000000 0.00000000 0.00000000 0.000000000 0.000000000 #>  [34,] 0.00000000 0.00000000 0.00000000 0.00000000 0.000000000 0.000000000 #>  [35,] 0.00000000 0.00000000 0.00000000 0.00000000 0.000000000 0.000000000 #>  [36,] 0.00000000 0.00000000 0.00000000 0.00000000 0.000000000 0.000000000 #>  [37,] 0.00000000 0.00000000 0.00000000 0.00000000 0.000000000 0.000000000 #>  [38,] 0.00000000 0.00000000 0.00000000 0.00000000 0.000000000 0.000000000 #>  [39,] 0.00000000 0.00000000 0.00000000 0.00000000 0.000000000 0.000000000 #>  [40,] 0.00000000 0.00000000 0.00000000 0.00000000 0.000000000 0.000000000 #>  [41,] 0.00000000 0.00000000 0.00000000 0.00000000 0.000000000 0.000000000 #>  [42,] 0.00000000 0.00000000 0.00000000 0.00000000 0.000000000 0.000000000 #>  [43,] 0.00000000 0.00000000 0.00000000 0.00000000 0.000000000 0.000000000 #>  [44,] 0.00000000 0.00000000 0.00000000 0.00000000 0.000000000 0.000000000 #>  [45,] 0.00000000 0.00000000 0.00000000 0.00000000 0.000000000 0.000000000 #>  [46,] 0.00000000 0.00000000 0.00000000 0.00000000 0.000000000 0.007072503 #>  [47,] 0.00000000 0.00000000 0.00000000 0.00000000 0.009610937 0.045145122 #>  [48,] 0.00000000 0.00000000 0.00000000 0.01070286 0.042269218 0.079459734 #>  [49,] 0.00000000 0.00000000 0.01381338 0.03880781 0.070671973 0.108534432 #>  [50,] 0.01221874 0.02195214 0.03860046 0.06257565 0.093698341 0.131142108 #>  [51,] 0.03712343 0.04474934 0.05928254 0.08124587 0.110549674 0.146433383 #>  [52,] 0.05914698 0.06388996 0.07543733 0.09441946 0.120843713 0.154034193 #>  [53,] 0.07812935 0.07927185 0.08702760 0.10212732 0.124679088 0.154107237 #>  [54,] 0.09429194 0.09119677 0.09444872 0.10486809 0.122663569 0.147371041 #>  [55,] 0.10827824 0.10039997 0.09854575 0.10361199 0.115903992 0.135075788 #>  [56,] 0.12116454 0.10804920 0.10059905 0.09977121 0.105960395 0.118940410 #>  [57,] 0.13443863 0.11571307 0.10227997 0.09514112 0.094770808 0.101059782 #>  [58,] 0.14994758 0.12530148 0.10558159 0.09181885 0.084555799 0.083793535 #>  [59,] 0.16981844 0.13898313 0.11273074 0.09210762 0.077712830 0.069648663 #>  [60,] 0.19635753 0.15908634 0.12608848 0.09841473 0.076709790 0.061166723 #>  [61,] 0.23193502 0.18798972 0.14804547 0.11315010 0.083984960 0.060823579 #>  [62,] 0.27886166 0.22800866 0.18091760 0.13863005 0.101857774 0.070945858 #>  [63,] 0.33926379 0.28128254 0.22684546 0.17698875 0.132451689 0.093644496 #>  [64,] 0.41496233 0.34966638 0.28769959 0.23009762 0.177627955 0.130762680 #>  [65,] 0.50736031 0.43462997 0.36499277 0.29949206 0.238927610 0.183833634 #>  [66,] 0.61734391 0.53716740 0.45980039 0.38630450 0.317518864 0.254043446 #>  [67,] 0.74520198 0.65772068 0.57269080 0.49120411 0.414148166 0.342195250 #>  [68,] 0.89057023 0.79612228 0.70366936 0.61434504 0.529095365 0.448673424 #>  [69,] 1.05240732 0.95156324 0.85214159 0.75532781 0.662135975 0.573409265 #>  [70,] 1.22901078 1.12259439 1.01690276 0.91318004 0.812516001 0.715852471 #>  [71,] 1.41808018 1.30716861 1.19616161 1.08636432 0.978946534 0.874954938 #>  [72,] 1.61683284 1.50273049 1.38760555 1.27282087 1.159625837 1.049174498 #>  [73,] 1.82217349 1.70635648 1.58851182 1.47005054 1.352295676 1.236506013 #>  [74,] 2.03091280 1.91494331 1.79590477 1.67524075 1.554336007 1.434545553 #>  [75,] 2.24002213 2.12543535 2.00675331 1.88543124 1.762897995 1.640590251 #>  [76,] 2.44690287 2.33507345 2.21819513 2.09771034 1.975069878 1.851772065 #>  [77,] 2.64964063 2.54163983 2.42776670 2.30942532 2.188063862 2.065218166 #>  [78,] 2.84720823 2.74366673 2.63361110 2.51838375 2.399405783 2.278224695 #>  [79,] 3.03957897 2.94057304 2.83463146 2.72301731 2.607103623 2.488424724 #>  [80,] 3.22771495 3.13269438 3.03055701 2.92247781 2.809767476 2.693926619 #>  [81,] 3.41340585 3.32117990 3.22189375 3.11663714 3.006653711 2.893397079 #>  [82,] 3.59895116 3.50774359 3.40974365 3.30597179 3.197611368 3.086065368 #>  [83,] 3.78670332 3.69427948 3.59549396 3.49132685 3.382919969 3.271632899 #>  [84,] 3.97851617 3.88237519 3.78040139 3.67357455 3.563024645 3.450085575 #>  [85,] 4.17516849 4.07278337 3.96511965 3.85320471 3.738194554 3.621423782 #>  [86,] 4.37584892 4.26492877 4.14923837 4.02990411 3.908150190 3.785343628 #>  [87,] 4.57779068 4.45653490 4.33091079 4.20219407 4.071719176 3.940918422 #>  [88,] 4.77612783 4.64344275 4.50664146 4.36719421 4.226583391 4.086336562 #>  [89,] 4.96401077 4.81966539 4.67128224 4.52056345 4.369169664 4.218747301 #>  [90,] 5.13297258 4.97768057 4.81824867 4.65663912 4.494712228 4.334248700 #>  [91,] 5.27349181 5.10891862 4.93992653 4.76875701 4.597482678 4.428025673 #>  [92,] 5.37566553 5.20436913 5.02820409 4.84970156 4.671151481 4.494617794 #>  [93,] 5.42989970 5.25521799 5.07504928 4.89221611 4.709224411 4.528275533 #>  [94,] 5.42754689 5.25344266 5.07306114 4.88950738 4.705495690 4.523357397 #>  [95,] 5.36146646 5.19233372 5.01595814 4.83570398 4.654478232 4.474731644 #>  [96,] 5.22652979 5.06695726 4.89900970 4.72626754 4.551802681 4.378169412 #>  [97,] 5.02012027 4.87460425 4.71945028 4.55838677 4.394605617 4.230739272 #>  [98,] 4.74266322 4.61526828 4.47691779 4.33139191 4.181936153 4.031221335 #>  [99,] 4.39816139 4.29214448 4.17392009 4.04719787 3.915187858 3.780541603 #> [100,]         NA         NA         NA         NA          NA          NA #>             [,47]      [,48]      [,49]       [,50]       [,51]      [,52] #>   [1,]         NA         NA         NA          NA          NA         NA #>   [2,] 2.35996950 2.44186383 2.53180222 2.630985438 2.740734887 2.86240587 #>   [3,] 2.10465060 2.17974425 2.26233906 2.353664722 2.455110670 2.56814745 #>   [4,] 1.84407574 1.91211330 1.98695531 2.069808834 2.162073485 2.26527187 #>   [5,] 1.58607595 1.64696954 1.71387239 1.787929667 1.870503133 1.96311086 #>   [6,] 1.33741558 1.39121105 1.45018960 1.515407747 1.588152391 1.66988939 #>   [7,] 1.10344884 1.15030946 1.20156499 1.258167758 1.321303804 1.39234931 #>   [8,] 0.88800616 0.92820483 0.97210888 1.020560113 1.074627772 1.13557155 #>   [9,] 0.69346133 0.72737332 0.76444502 0.805408236 0.851208132 0.90297139 #>  [10,] 0.52091366 0.54900466 0.57987987 0.614166286 0.652684701 0.69642162 #>  [11,] 0.37042245 0.39323004 0.41862376 0.447133716 0.479461377 0.51645390 #>  [12,] 0.24124663 0.25935618 0.28002153 0.303685246 0.330938304 0.36249575 #>  [13,] 0.13206197 0.14607949 0.16276748 0.182490670 0.205740905 0.23311313 #>  [14,] 0.04114504 0.05167042 0.06509424 0.081712951 0.101931956 0.12624125 #>  [15,] 0.00000000 0.00000000 0.00000000 0.000000000 0.017202074 0.03939615 #>  [16,] 0.00000000 0.00000000 0.00000000 0.000000000 0.000000000 0.00000000 #>  [17,] 0.00000000 0.00000000 0.00000000 0.000000000 0.000000000 0.00000000 #>  [18,] 0.00000000 0.00000000 0.00000000 0.000000000 0.000000000 0.00000000 #>  [19,] 0.00000000 0.00000000 0.00000000 0.000000000 0.000000000 0.00000000 #>  [20,] 0.00000000 0.00000000 0.00000000 0.000000000 0.000000000 0.00000000 #>  [21,] 0.00000000 0.00000000 0.00000000 0.000000000 0.000000000 0.00000000 #>  [22,] 0.00000000 0.00000000 0.00000000 0.000000000 0.000000000 0.00000000 #>  [23,] 0.00000000 0.00000000 0.00000000 0.000000000 0.000000000 0.00000000 #>  [24,] 0.00000000 0.00000000 0.00000000 0.000000000 0.000000000 0.00000000 #>  [25,] 0.00000000 0.00000000 0.00000000 0.000000000 0.000000000 0.00000000 #>  [26,] 0.00000000 0.00000000 0.00000000 0.000000000 0.000000000 0.00000000 #>  [27,] 0.00000000 0.00000000 0.00000000 0.000000000 0.000000000 0.00000000 #>  [28,] 0.00000000 0.00000000 0.00000000 0.000000000 0.000000000 0.00000000 #>  [29,] 0.00000000 0.00000000 0.00000000 0.000000000 0.000000000 0.00000000 #>  [30,] 0.00000000 0.00000000 0.00000000 0.000000000 0.000000000 0.00000000 #>  [31,] 0.00000000 0.00000000 0.00000000 0.000000000 0.000000000 0.00000000 #>  [32,] 0.00000000 0.00000000 0.00000000 0.000000000 0.000000000 0.00000000 #>  [33,] 0.00000000 0.00000000 0.00000000 0.000000000 0.000000000 0.00000000 #>  [34,] 0.00000000 0.00000000 0.00000000 0.000000000 0.000000000 0.00000000 #>  [35,] 0.00000000 0.00000000 0.00000000 0.000000000 0.000000000 0.00000000 #>  [36,] 0.00000000 0.00000000 0.00000000 0.000000000 0.000000000 0.00000000 #>  [37,] 0.00000000 0.00000000 0.00000000 0.000000000 0.000000000 0.00000000 #>  [38,] 0.00000000 0.00000000 0.00000000 0.000000000 0.000000000 0.00000000 #>  [39,] 0.00000000 0.00000000 0.00000000 0.000000000 0.000000000 0.00000000 #>  [40,] 0.00000000 0.00000000 0.00000000 0.000000000 0.000000000 0.00000000 #>  [41,] 0.00000000 0.00000000 0.00000000 0.000000000 0.000000000 0.00000000 #>  [42,] 0.00000000 0.00000000 0.00000000 0.000000000 0.000000000 0.00000000 #>  [43,] 0.00000000 0.00000000 0.00000000 0.000000000 0.008865075 0.02551509 #>  [44,] 0.00000000 0.00000000 0.01584249 0.044028694 0.068537795 0.08789576 #>  [45,] 0.00000000 0.03440071 0.06863127 0.100620903 0.128489595 0.15057369 #>  [46,] 0.04356828 0.08178793 0.11972690 0.155254645 0.186292472 0.21099693 #>  [47,] 0.08448777 0.12579436 0.16690533 0.205514543 0.239365513 0.26645324 #>  [48,] 0.12082173 0.16441950 0.20796869 0.249018861 0.285165820 0.31426950 #>  [49,] 0.15092302 0.19584436 0.24092703 0.283615834 0.321397095 0.35202944 #>  [50,] 0.17344555 0.21859552 0.26417695 0.307575641 0.346213002 0.37778570 #>  [51,] 0.18747751 0.23168930 0.27665656 0.319755667 0.358391439 0.39024137 #>  [52,] 0.19264345 0.23473898 0.27795849 0.319719203 0.357458625 0.38887872 #>  [53,] 0.18916352 0.22801291 0.26838751 0.307793419 0.343748013 0.37401956 #>  [54,] 0.17786405 0.21243736 0.24895684 0.285060432 0.318387674 0.34681069 #>  [55,] 0.16013950 0.18954536 0.22132521 0.253284259 0.283219414 0.30913787 #>  [56,] 0.13787235 0.16137991 0.18768440 0.214784798 0.240661810 0.26348120 #>  [57,] 0.11332208 0.13036477 0.15061301 0.172276292 0.193536126 0.21273202 #>  [58,] 0.08899722 0.09915959 0.11291510 0.128691060 0.144877560 0.15999486 #>  [59,] 0.06752485 0.07051562 0.07746237 0.087009114 0.097754097 0.10839818 #>  [60,] 0.05153006 0.04714644 0.04705576 0.050111023 0.055111704 0.06093348 #>  [61,] 0.04353397 0.03162314 0.02431712 0.020665741 0.019658503 0.02033648 #>  [62,] 0.04587462 0.02629845 0.01161551 0.001058331 0.000000000 0.00000000 #>  [63,] 0.06065023 0.03325872 0.01102677 0.000000000 0.000000000 0.00000000 #>  [64,] 0.08968089 0.05429845 0.02431989 0.000000000 0.000000000 0.00000000 #>  [65,] 0.13448215 0.09090950 0.05296085 0.020345859 0.000000000 0.00000000 #>  [66,] 0.19624402 0.14427614 0.09812346 0.057644036 0.022618027 0.00000000 #>  [67,] 0.27580938 0.21526857 0.16069774 0.112106781 0.069427965 0.03254768 #>  [68,] 0.37364897 0.30442959 0.24128896 0.184397295 0.133849086 0.08968430 #>  [69,] 0.48983251 0.41195280 0.34020367 0.274928346 0.216397949 0.16482205 #>  [70,] 0.62399906 0.53765366 0.45742290 0.383838243 0.317364684 0.25840001 #>  [71,] 0.77533235 0.68093831 0.59256591 0.510950811 0.436769809 0.37062816 #>  [72,] 0.94254825 0.84077668 0.74485084 0.655724818 0.574303604 0.50141745 #>  [73,] 1.12390228 1.01568824 0.91306023 0.817200977 0.729255972 0.65029380 #>  [74,] 1.31722433 1.20374843 1.09552074 0.993956446 0.900447386 0.81630717 #>  [75,] 1.51998547 1.40262312 1.29010613 1.184077829 1.086173549 0.99794979 #>  [76,] 1.72939866 1.60963591 1.49427168 1.385163539 1.284177280 1.19309971 #>  [77,] 1.94255043 1.82186987 1.70512539 1.594364878 1.491660587 1.39900571 #>  [78,] 2.15655538 2.03630024 1.91953747 1.808471738 1.705347130 1.61232810 #>  [79,] 2.36871913 2.24994886 2.13428360 2.024043361 1.921600070 1.82924443 #>  [80,] 2.57668997 2.46004475 2.34621098 2.237577242 2.136592505 2.04562121 #>  [81,] 2.77857564 2.66416976 2.55240870 2.445700890 2.346518155 2.25724208 #>  [82,] 2.97300093 2.86036503 2.75035869 2.645363291 2.547819995 2.46007091 #>  [83,] 3.15908610 3.04717474 2.93804087 2.833997547 2.737406440 2.65051783 #>  [84,] 3.33633577 3.22360978 3.11396895 3.009625344 2.912820609 2.82566887 #>  [85,] 3.50444252 3.38902535 3.27714123 3.170878959 3.072330284 2.98343972 #>  [86,] 3.66302652 3.54292213 3.42690458 3.316927717 3.214915089 3.12262029 #>  [87,] 3.81134915 3.68469687 3.56274562 3.447311620 3.340142626 3.24279163 #>  [88,] 3.94804849 3.81338184 3.68403905 3.561702312 3.447944217 3.34411707 #>  [89,] 4.07094614 3.92741852 3.78979393 3.659626815 3.538320064 3.42703154 #>  [90,] 4.17696402 4.02450763 3.87844185 3.740198949 3.611018893 3.49187410 #>  [91,] 4.26217049 4.10156500 3.94770552 3.801904863 3.665245441 3.53852299 #>  [92,] 4.32195122 4.15479411 3.99457368 3.842482630 3.699448791 3.56609823 #>  [93,] 4.35128008 4.17986819 4.01539268 3.858923751 3.711236106 3.57279179 #>  [94,] 4.34505573 4.17220234 4.00607151 3.847609882 3.697441768 3.55587170 #>  [95,] 4.29847343 4.12729362 3.96238829 3.804584508 3.654363759 3.51188392 #>  [96,] 4.20741636 4.04111276 3.88038333 3.725947394 3.578159344 3.43704900 #>  [97,] 4.06886628 3.91053827 3.75682167 3.608348420 3.465371280 3.32782046 #>  [98,] 3.88133887 3.73382436 3.58970212 3.449543610 3.313533974 3.18154174 #>  [99,] 3.64533403 3.51107946 3.37877422 3.248958004 3.121786914 2.99711190 #> [100,]         NA         NA         NA          NA          NA         NA #>              [,53]      [,54]       [,55]      [,56]      [,57]       [,58] #>   [1,]          NA         NA          NA         NA         NA          NA #>   [2,] 2.997278416 3.14643039 3.310600197 3.49004838 3.68442898 3.892682275 #>   [3,] 2.694224078 2.83464540 2.990436065 3.16219960 3.34998309 3.553158647 #>   [4,] 2.380955473 2.51058930 2.655420927 2.81634176 2.99375007 3.187426467 #>   [5,] 2.067342810 2.18475482 2.316746034 2.46442645 2.62848326 2.809055591 #>   [6,] 1.762189112 1.86663110 1.984692111 2.11762334 2.26632424 2.431221661 #>   [7,] 1.472805757 1.56421570 1.668062669 1.78566030 1.91803696 2.065823381 #>   [8,] 1.204785441 1.28372420 1.373815415 1.47636161 1.59243772 1.722790273 #>   [9,] 0.961957488 1.02949474 1.106903973 1.19541353 1.29607039 1.409652677 #>  [10,] 0.746486423 0.80405553 0.870306206 0.94634361 1.03312513 1.131386656 #>  [11,] 0.559065576 0.60830831 0.665193719 0.73067046 0.80556048 0.890498418 #>  [12,] 0.399160896 0.44178009 0.491191110 0.54816845 0.61336958 0.687285851 #>  [13,] 0.265270906 0.30290374 0.346679379 0.39719487 0.45493024 0.520208815 #>  [14,] 0.155181071 0.18930006 0.229109525 0.27503772 0.32738854 0.386308648 #>  [15,] 0.066200983 0.09804529 0.135304427 0.17825582 0.22704017 0.281632852 #>  [16,] 0.000000000 0.02591501 0.061736406 0.10299409 0.14968724 0.201636544 #>  [17,] 0.000000000 0.00000000 0.004773428 0.04526427 0.09095750 0.141544069 #>  [18,] 0.000000000 0.00000000 0.000000000 0.00118516 0.04657871 0.096661400 #>  [19,] 0.000000000 0.00000000 0.000000000 0.00000000 0.01260296 0.062633344 #>  [20,] 0.000000000 0.00000000 0.000000000 0.00000000 0.00000000 0.035641145 #>  [21,] 0.000000000 0.00000000 0.000000000 0.00000000 0.00000000 0.012537369 #>  [22,] 0.000000000 0.00000000 0.000000000 0.00000000 0.00000000 0.000000000 #>  [23,] 0.000000000 0.00000000 0.000000000 0.00000000 0.00000000 0.000000000 #>  [24,] 0.000000000 0.00000000 0.000000000 0.00000000 0.00000000 0.000000000 #>  [25,] 0.000000000 0.00000000 0.000000000 0.00000000 0.00000000 0.000000000 #>  [26,] 0.000000000 0.00000000 0.000000000 0.00000000 0.00000000 0.000000000 #>  [27,] 0.000000000 0.00000000 0.000000000 0.00000000 0.00000000 0.000000000 #>  [28,] 0.000000000 0.00000000 0.000000000 0.00000000 0.00000000 0.000000000 #>  [29,] 0.000000000 0.00000000 0.000000000 0.00000000 0.00000000 0.000000000 #>  [30,] 0.000000000 0.00000000 0.000000000 0.00000000 0.00000000 0.000000000 #>  [31,] 0.000000000 0.00000000 0.000000000 0.00000000 0.00000000 0.000000000 #>  [32,] 0.000000000 0.00000000 0.000000000 0.00000000 0.00000000 0.000000000 #>  [33,] 0.000000000 0.00000000 0.000000000 0.00000000 0.00000000 0.000000000 #>  [34,] 0.000000000 0.00000000 0.000000000 0.00000000 0.00000000 0.000000000 #>  [35,] 0.000000000 0.00000000 0.000000000 0.00000000 0.00000000 0.000000000 #>  [36,] 0.000000000 0.00000000 0.000000000 0.00000000 0.00000000 0.000000000 #>  [37,] 0.000000000 0.00000000 0.000000000 0.00000000 0.00000000 0.000000000 #>  [38,] 0.000000000 0.00000000 0.000000000 0.00000000 0.00000000 0.000000000 #>  [39,] 0.000000000 0.00000000 0.000000000 0.00000000 0.00000000 0.000000000 #>  [40,] 0.000000000 0.00000000 0.000000000 0.00000000 0.00000000 0.000000000 #>  [41,] 0.000000000 0.00000000 0.000000000 0.00000000 0.00000000 0.000000000 #>  [42,] 0.000000000 0.00000000 0.000000000 0.00000000 0.00000000 0.000000000 #>  [43,] 0.036701422 0.04180000 0.040608517 0.03335247 0.02064685 0.003418875 #>  [44,] 0.100954382 0.10699181 0.105770430 0.09754400 0.08301319 0.063235769 #>  [45,] 0.165574497 0.17267317 0.171596673 0.16262572 0.14654371 0.124534073 #>  [46,] 0.227926368 0.23616948 0.235418669 0.22597836 0.20870718 0.184902587 #>  [47,] 0.285207221 0.29463220 0.294388000 0.28479761 0.26678276 0.241736450 #>  [48,] 0.334651035 0.34524369 0.345677791 0.33628804 0.31804281 0.292405791 #>  [49,] 0.373751746 0.38544182 0.386704580 0.37787818 0.35995751 0.334446830 #>  [50,] 0.400480906 0.41313962 0.415346345 0.40743334 0.39039935 0.365755291 #>  [51,] 0.413474104 0.42691415 0.430131087 0.42344146 0.40782381 0.384760134 #>  [52,] 0.412163404 0.42614143 0.430373064 0.42514935 0.41140477 0.390557198 #>  [53,] 0.396839648 0.41106105 0.416240135 0.41263324 0.40110849 0.382987103 #>  [54,] 0.368637775 0.38276339 0.388744799 0.38679560 0.37769812 0.362649016 #>  [55,] 0.329448690 0.34310262 0.349661786 0.34929052 0.34266997 0.330850435 #>  [56,] 0.281770874 0.29454874 0.301384724 0.30238934 0.29813181 0.289501496 #>  [57,] 0.228522309 0.23999903 0.246741926 0.24880520 0.24664047 0.240969165 #>  [58,] 0.172837115 0.18257371 0.188795399 0.19149984 0.19102044 0.187910878 #>  [59,] 0.117871234 0.12542016 0.130647439 0.13349619 0.13418558 0.133108343 #>  [60,] 0.066637736 0.07154683 0.075275751 0.07771718 0.07898407 0.079320218 #>  [61,] 0.021885874 0.02370143 0.025411898 0.02686574 0.02808081 0.029167938 #>  [62,] 0.000000000 0.00000000 0.000000000 0.00000000 0.00000000 0.000000000 #>  [63,] 0.000000000 0.00000000 0.000000000 0.00000000 0.00000000 0.000000000 #>  [64,] 0.000000000 0.00000000 0.000000000 0.00000000 0.00000000 0.000000000 #>  [65,] 0.000000000 0.00000000 0.000000000 0.00000000 0.00000000 0.000000000 #>  [66,] 0.000000000 0.00000000 0.000000000 0.00000000 0.00000000 0.000000000 #>  [67,] 0.001328409 0.00000000 0.000000000 0.00000000 0.00000000 0.000000000 #>  [68,] 0.051900297 0.02045352 0.000000000 0.00000000 0.00000000 0.000000000 #>  [69,] 0.120350003 0.08306332 0.052960648 0.02993818 0.01376896 0.004085048 #>  [70,] 0.207264710 0.16418381 0.129263319 0.10246489 0.08358260 0.072225679 #>  [71,] 0.313036800 0.26438217 0.224892452 0.19460475 0.17333784 0.160674312 #>  [72,] 0.437785059 0.38396973 0.340333637 0.30699596 0.28380010 0.270294448 #>  [73,] 0.581253887 0.52288733 0.475697609 0.43988809 0.41532268 0.401504634 #>  [74,] 0.742702206 0.68057587 0.630574173 0.59298146 0.56767376 0.554095476 #>  [75,] 0.920797556 0.85584870 0.803885653 0.76526461 0.73986127 0.727045604 #>  [76,] 1.113533718 1.04678642 0.993762436 0.95487457 0.92998211 0.918364378 #>  [77,] 1.318191314 1.25067646 1.197465557 1.15900695 1.13512474 1.124992296 #>  [78,] 1.531359303 1.46401876 1.411380535 1.37390271 1.35135411 1.342789139 #>  [79,] 1.749030445 1.68261374 1.631101728 1.59493313 1.57380164 1.566633707 #>  [80,] 1.966775213 1.90174030 1.851616921 1.81679413 1.79687263 1.790647269 #>  [81,] 2.179986932 2.11641827 2.067588070 2.03380656 2.01456728 2.008536098 #>  [82,] 2.384177334 2.32173489 2.273707515 2.24030099 2.22089276 2.214028693 #>  [83,] 2.575288754 2.51319975 2.465092251 2.43104758 2.41032424 2.401363301 #>  [84,] 2.749979644 2.68708104 2.637665159 2.60167622 2.57825735 2.565765123 #>  [85,] 2.905836751 2.84067005 2.788465083 2.74902434 2.72138528 2.703843805 #>  [86,] 3.041472349 2.97242506 2.915830014 2.87135134 2.83793564 2.813843736 #>  [87,] 3.156478730 3.08195848 3.019410839 2.96837188 2.92771584 2.895693954 #>  [88,] 3.251233502 3.16985385 3.099996448 3.04108470 2.99194088 2.950830569 #>  [89,] 3.326574804 3.23732755 3.159161568 3.09140596 3.03285163 2.981799778 #>  [90,] 3.383390901 3.28577920 3.198781639 3.12165207 3.05316941 2.991688639 #>  [91,] 3.422188894 3.31630046 3.220488459 3.13394948 3.05546772 2.983467147 #>  [92,] 3.442718183 3.32922726 3.225160012 3.12967176 3.04156696 2.959351567 #>  [93,] 3.443723345 3.32382299 3.212542985 3.10901159 3.01206690 2.920308613 #>  [94,] 3.422887406 3.29816698 3.181093963 3.07078325 2.96611954 2.865808223 #>  [95,] 3.377001306 3.24929491 3.128095119 3.01251873 2.90151145 2.793897657 #>  [96,] 3.302361574 3.17359784 3.050055423 2.93087214 2.81507208 2.701614453 #>  [97,] 3.195359645 3.06744049 2.943355172 2.82228719 2.70336063 2.585688032 #>  [98,] 3.053188103 2.92791336 2.805039004 2.68382475 2.56352037 2.443412452 #>  [99,] 2.874557458 2.75359688 2.633621376 2.51400162 2.39414117 2.273521648 #> [100,]          NA         NA          NA         NA         NA          NA #>              [,59]       [,60]       [,61]       [,62]       [,63]      [,64] #>   [1,]          NA          NA          NA          NA          NA         NA #>   [2,] 4.112959991 4.342592871          NA          NA          NA         NA #>   [3,] 3.770333066 3.999295932 4.237014530 4.479680677 4.722810747 4.96139566 #>   [4,] 3.396432649 3.619044081 3.852725232 4.094153724 4.339296184 4.58353445 #>   [5,] 3.005627937 3.216952307 3.441007934 3.675005476 3.915439657 4.15819072 #>   [6,] 2.612163334 2.808335107 3.018210258 3.239537953 3.469375515 3.70416617 #>   [7,] 2.229151249 2.407570951 2.599996072 2.804681306 3.019238625 3.24069419 #>   [8,] 1.867745098 2.027130406 2.200221884 2.385715594 2.581733229 2.78586248 #>   [9,] 1.536589227 1.676891861 1.830105776 1.995282766 2.170981067 2.35529433 #>  [10,] 1.241575520 1.363794561 1.497761499 1.642787134 1.797775064 1.96124471 #>  [11,] 0.985878124 1.091809819 1.208090995 1.334193254 1.469266546 1.61216150 #>  [12,] 0.770201771 0.862165404 0.962972090 1.072162464 1.189034945 1.31267203 #>  [13,] 0.593167538 0.673739774 0.761651991 0.856434351 0.957444078 1.06389954 #>  [14,] 0.451766679 0.523546744 0.601257276 0.684354464 0.772178005 0.86399571 #>  [15,] 0.341829436 0.407247735 0.477347218 0.551464554 0.628862146 0.70878488 #>  [16,] 0.258473536 0.319648647 0.384459037 0.452094729 0.521699260 0.59243907 #>  [17,] 0.196511472 0.255155351 0.316613222 0.379919015 0.444074322 0.50812981 #>  [18,] 0.150804760 0.208173146 0.267760757 0.328452004 0.389101109 0.44862398 #>  [19,] 0.116558024 0.173441434 0.232161606 0.291473586 0.350094658 0.40680433 #>  [20,] 0.089547689 0.146297456 0.204687079 0.263372948 0.320959083 0.37610235 #>  [21,] 0.066281454 0.122864330 0.181040263 0.239404832 0.296482462 0.35083370 #>  [22,] 0.044086877 0.100160788 0.157890819 0.215853129 0.272532563 0.32642881 #>  [23,] 0.021131028 0.076133713 0.132924179 0.190100620 0.246150899 0.29955465 #>  [24,] 0.000000000 0.049619570 0.104810572 0.160609389 0.215548501 0.26812975 #>  [25,] 0.000000000 0.020246388 0.073105515 0.126823235 0.180014162 0.23124258 #>  [26,] 0.000000000 0.000000000 0.038099005 0.089009883 0.139753178 0.18899085 #>  [27,] 0.000000000 0.000000000 0.000634401 0.048065477 0.095680225 0.14226645 #>  [28,] 0.000000000 0.000000000 0.000000000 0.005305616 0.049192650 0.09251379 #>  [29,] 0.000000000 0.000000000 0.000000000 0.000000000 0.001949537 0.04148936 #>  [30,] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.00000000 #>  [31,] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.00000000 #>  [32,] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.00000000 #>  [33,] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.00000000 #>  [34,] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.00000000 #>  [35,] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.00000000 #>  [36,] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.00000000 #>  [37,] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.00000000 #>  [38,] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.00000000 #>  [39,] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.00000000 #>  [40,] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.00000000 #>  [41,] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.00000000 #>  [42,] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.00000000 #>  [43,] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.00000000 #>  [44,] 0.039504317 0.013208677 0.000000000 0.000000000 0.000000000 0.00000000 #>  [45,] 0.098040754 0.068611635 0.037746515 0.006769656 0.000000000 0.00000000 #>  [46,] 0.156144563 0.124120750 0.090457301 0.056577872 0.023607743 0.00000000 #>  [47,] 0.211351090 0.177426920 0.141687599 0.105627537 0.070409559 0.03682274 #>  [48,] 0.261150554 0.226154698 0.189202861 0.151825026 0.115190038 0.08006459 #>  [49,] 0.303163299 0.268020166 0.230820591 0.193090168 0.155968995 0.12017379 #>  [50,] 0.335320123 0.300996873 0.264561287 0.227492224 0.190865235 0.15531974 #>  [51,] 0.356027625 0.323471894 0.288794783 0.253386514 0.218223738 0.18384362 #>  [52,] 0.364299514 0.334374458 0.302366045 0.269537313 0.236735653 0.20437530 #>  [53,] 0.359838806 0.333262719 0.304686644 0.275213955 0.245538664 0.21593740 #>  [54,] 0.343062141 0.320359528 0.295782387 0.270250209 0.244287458 0.21802560 #>  [55,] 0.315065128 0.296534713 0.276293192 0.255061609 0.233187615 0.21065753 #>  [56,] 0.277535253 0.263238300 0.247427387 0.230620678 0.212990727 0.19438598 #>  [57,] 0.232625361 0.222395084 0.210878178 0.198395124 0.184953258 0.17027663 #>  [58,] 0.182804956 0.176275231 0.168714266 0.160258292 0.150765879 0.13985465 #>  [59,] 0.130708056 0.127357489 0.123258924 0.118383917 0.112463091 0.10502796 #>  [60,] 0.078995043 0.078200971 0.076971974 0.075138069 0.072324582 0.06799723 #>  [61,] 0.030242276 0.031338747 0.032347262 0.032980257 0.032779598 0.03116315 #>  [62,] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.00000000 #>  [63,] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.00000000 #>  [64,] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.00000000 #>  [65,] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.00000000 #>  [66,] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.00000000 #>  [67,] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.00000000 #>  [68,] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.00000000 #>  [69,] 0.000366197 0.001938188 0.007982831 0.017560434 0.029644082 0.04316367 #>  [70,] 0.067810593 0.069564748 0.076543146 0.087657897 0.101719243 0.11748566 #>  [71,] 0.155955467 0.158290573 0.166581143 0.179559237 0.195837719 0.21396934 #>  [72,] 0.265729851 0.269075011 0.279049765 0.294174348 0.312831591 0.33333809 #>  [73,] 0.397576722 0.402343786 0.414316722 0.431775074 0.452844017 0.47558055 #>  [74,] 0.551262801 0.557794636 0.571969233 0.591802537 0.615142612 0.63977350 #>  [75,] 0.725689436 0.734207183 0.750627075 0.772687472 0.797950979 0.82392794 #>  [76,] 0.918733656 0.929287182 0.947794712 0.971714578 0.998329011 1.02488833 #>  [77,] 1.127151590 1.139578011 1.159785497 1.184963347 1.212133310 1.23831435 #>  [78,] 1.346575001 1.360470246 1.381748131 1.407354208 1.434084508 1.45876942 #>  [79,] 1.571624869 1.586332480 1.607817051 1.632819459 1.657958200 1.67992956 #>  [80,] 1.796153299 1.810773115 1.831394238 1.854603744 1.876901204 1.89491106 #>  [81,] 2.013607546 2.027024721 2.045551434 2.065680254 2.083856557 2.09669803 #>  [82,] 2.217489535 2.228421889 2.243521227 2.259248868 2.272061734 2.27863331 #>  [83,] 2.401864077 2.408923595 2.419226244 2.429264399 2.435568026 2.43492138 #>  [84,] 2.561852903 2.563615627 2.567781422 2.570930350 2.569718136 2.56108338 #>  [85,] 2.694043351 2.689121392 2.685898346 2.681089198 2.671516257 2.65430261 #>  [86,] 2.796743191 2.783853007 2.772125493 2.758446251 2.739831954 2.71360712 #>  [87,] 2.870028110 2.848050477 2.826874738 2.803581042 2.775396124 2.73985193 #>  [88,] 2.915555181 2.883583916 2.852211715 2.818727048 2.780573138 2.73548830 #>  [89,] 2.936151382 2.893529573 2.851422770 2.807334428 2.758925381 2.70413685 #>  [90,] 2.935225802 2.881569685 2.828409571 2.773467160 2.714620992 2.65001371 #>  [91,] 2.916091098 2.851302780 2.786997961 2.721119985 2.651767781 2.57728917 #>  [92,] 2.881306606 2.805577740 2.730273649 2.653565495 2.573780124 2.48948100 #>  [93,] 2.832165576 2.745974870 2.660066960 2.572850988 2.482894583 2.38899357 #>  [94,] 2.768436990 2.672545175 2.576696757 2.479552690 2.379938366 2.27690267 #>  [95,] 2.688436592 2.583882623 2.479047097 2.372858625 2.264418844 2.15305096 #>  [96,] 2.589444537 2.477545775 2.364991196 2.250992344 2.134943666 2.01646041 #>  [97,] 2.468416666 2.350772928 2.232104052 2.111916174 1.989907556 1.86599568 #>  [98,] 2.322866256 2.201362943 2.078532126 1.954179530 1.828309315 1.70114039 #>  [99,] 2.151740283 2.028540340          NA          NA          NA         NA #> [100,]          NA          NA          NA          NA          NA         NA #>              [,65]       [,66]      [,67]       [,68]       [,69]       [,70] #>   [1,]          NA          NA         NA          NA          NA          NA #>   [2,]          NA          NA         NA          NA          NA          NA #>   [3,]          NA          NA         NA          NA          NA          NA #>   [4,] 4.821836280 5.048960343 5.25968133          NA          NA          NA #>   [5,] 4.398670904 4.632007744 4.85325211 5.057595343 5.240578135          NA #>   [6,] 3.939860325 4.172074463 4.39627769 4.607992413 4.802992807 4.977483723 #>   [7,] 3.465585552 3.690095202 3.91021296 4.121915965 4.321352044 4.505010011 #>   [8,] 2.995233020 3.206625778 3.41661026 3.621701196 3.818522727 4.003965784 #>   [9,] 2.545910580 2.740200017 2.93532814 3.128388013 3.316542523 3.497164935 #>  [10,] 2.131378299 2.306091229 2.48312349 2.660148127 2.834890250 3.005247744 #>  [11,] 1.761469811 1.915581951 2.07276066 2.231227635 2.389259378 2.545286213 #>  [12,] 1.441979298 1.575735642 1.71265335 1.851446256 1.990903826 2.129967911 #>  [13,] 1.174922478 1.289585970 1.40696590 1.526194690 1.646516195 1.767340863 #>  [14,] 0.959052897 1.056622581 1.15605339 1.256813352 1.358529128 1.461021403 #>  [15,] 0.790519520 0.873451057 0.95711160 1.041218908 1.125704112 1.210730184 #>  [16,] 0.663574573 0.734525682 0.80492551 0.874658145 0.943879319 1.013021603 #>  [17,] 0.571268545 0.632882457 0.69263391 0.750496720 0.806774038 0.862094600 #>  [18,] 0.506093198 0.560826079 0.61245607 0.660980111 0.706777909 0.750603475 #>  [19,] 0.460549420 0.510543161 0.55634727 0.597927819 0.635679273 0.670415518 #>  [20,] 0.427625206 0.474624366 0.51656315 0.553336997 0.585304715 0.613282711 #>  [21,] 0.401172671 0.446482875 0.48611851 0.519879576 0.548051826 0.571407075 #>  [22,] 0.376175321 0.420659254 0.45912963 0.491280991 0.517302442 0.537885984 #>  [23,] 0.348900332 0.393006254 0.43103267 0.462572228 0.487707501 0.507028268 #>  [24,] 0.316936606 0.360752949 0.39867624 0.430212266 0.455339854 0.474536962 #>  [25,] 0.279127362 0.322455695 0.36029429 0.392085805 0.417718751 0.437561536 #>  [26,] 0.235414671 0.277852494 0.31537484 0.347390374 0.373718732 0.394631044 #>  [27,] 0.186620705 0.227645386 0.26444853 0.296435943 0.323384774 0.345488595 #>  [28,] 0.134194876 0.173240816 0.20882713 0.240386853 0.267682712 0.290854950 #>  [29,] 0.079956600 0.116479283 0.15032454 0.180978940 0.208217699 0.232153421 #>  [30,] 0.025860055 0.059382842 0.09099037 0.120243451 0.146953036 0.171228491 #>  [31,] 0.000000000 0.003942714 0.03288084 0.060264122 0.085957149 0.110086879 #>  [32,] 0.000000000 0.000000000 0.00000000 0.002985738 0.027198907 0.050682711 #>  [33,] 0.000000000 0.000000000 0.00000000 0.000000000 0.000000000 0.000000000 #>  [34,] 0.000000000 0.000000000 0.00000000 0.000000000 0.000000000 0.000000000 #>  [35,] 0.000000000 0.000000000 0.00000000 0.000000000 0.000000000 0.000000000 #>  [36,] 0.000000000 0.000000000 0.00000000 0.000000000 0.000000000 0.000000000 #>  [37,] 0.000000000 0.000000000 0.00000000 0.000000000 0.000000000 0.000000000 #>  [38,] 0.000000000 0.000000000 0.00000000 0.000000000 0.000000000 0.000000000 #>  [39,] 0.000000000 0.000000000 0.00000000 0.000000000 0.000000000 0.000000000 #>  [40,] 0.000000000 0.000000000 0.00000000 0.000000000 0.000000000 0.000000000 #>  [41,] 0.000000000 0.000000000 0.00000000 0.000000000 0.000000000 0.000000000 #>  [42,] 0.000000000 0.000000000 0.00000000 0.000000000 0.000000000 0.000000000 #>  [43,] 0.000000000 0.000000000 0.00000000 0.000000000 0.000000000 0.000000000 #>  [44,] 0.000000000 0.000000000 0.00000000 0.000000000 0.000000000 0.000000000 #>  [45,] 0.000000000 0.000000000 0.00000000 0.000000000 0.000000000 0.000000000 #>  [46,] 0.000000000 0.000000000 0.00000000 0.000000000 0.000000000 0.000000000 #>  [47,] 0.005300555 0.000000000 0.00000000 0.000000000 0.000000000 0.000000000 #>  [48,] 0.046837349 0.015598042 0.00000000 0.000000000 0.000000000 0.000000000 #>  [49,] 0.086029063 0.053555962 0.02259944 0.000000000 0.000000000 0.000000000 #>  [50,] 0.121098209 0.088144527 0.05624089 0.025158253 0.000000000 0.000000000 #>  [51,] 0.150391522 0.117728471 0.08557621 0.053673801 0.021920358 0.000000000 #>  [52,] 0.172493749 0.140867224 0.10916211 0.077095294 0.044577450 0.011818744 #>  [53,] 0.186334256 0.156422867 0.12582194 0.094236776 0.061600612 0.028175445 #>  [54,] 0.191275631 0.163654926 0.13474439 0.104248443 0.072132021 0.038714690 #>  [55,] 0.187175351 0.162292235 0.13556266 0.106700211 0.075707992 0.042964552 #>  [56,] 0.174414680 0.152574682 0.12840599 0.101639895 0.072320844 0.040883142 #>  [57,] 0.153892908 0.135261207 0.11391852 0.089620048 0.062451050 0.032893702 #>  [58,] 0.126989165 0.111604526 0.09324452 0.071691423 0.047066829 0.019888550 #>  [59,] 0.095497809 0.083296996 0.06798312 0.049365072 0.027592357 0.003202422 #>  [60,] 0.061546133 0.052395204 0.04011906 0.024548724 0.005849455 0.000000000 #>  [61,] 0.027504397 0.021232679 0.01193827 0.000000000 0.000000000 0.000000000 #>  [62,] 0.000000000 0.000000000 0.00000000 0.000000000 0.000000000 0.000000000 #>  [63,] 0.000000000 0.000000000 0.00000000 0.000000000 0.000000000 0.000000000 #>  [64,] 0.000000000 0.000000000 0.00000000 0.000000000 0.000000000 0.000000000 #>  [65,] 0.000000000 0.000000000 0.00000000 0.000000000 0.000000000 0.000000000 #>  [66,] 0.000000000 0.000000000 0.00000000 0.000000000 0.000000000 0.000000000 #>  [67,] 0.000000000 0.000000000 0.00000000 0.000000000 0.000000000 0.000000000 #>  [68,] 0.001327101 0.012234055 0.02169819 0.029136352 0.034159838 0.036596905 #>  [69,] 0.057056540 0.070320885 0.08206765 0.091567165 0.098286972 0.101918463 #>  [70,] 0.133719728 0.149245999 0.16300704 0.174114016 0.181888761 0.185894781 #>  [71,] 0.232510995 0.250089060 0.26546207 0.277577066 0.285616569 0.289033755 #>  [72,] 0.354019872 0.373288033 0.38971009 0.402073258 0.409436529 0.411168941 #>  [73,] 0.498063422 0.518481262 0.53521414 0.546904213 0.552512230 0.551357245 #>  [74,] 0.663521582 0.684357860 0.70049027 0.710441353 0.713107710 0.707798837 #>  [75,] 0.848200685 0.868540516 0.88301050 0.890048829 0.888529012 0.877794983 #>  [76,] 1.048753429 1.067526968 1.07916528 1.082065178 1.075122155 1.057758548 #>  [77,] 1.260682470 1.276714457 1.28430646 1.281861394 1.268341865 1.243288411 #>  [78,] 1.478448686 1.490524813 1.49288512 1.483986294 1.462898946 1.429313244 #>  [79,] 1.695694318 1.702637055 1.69868783 1.682400390 1.652985660 1.610302948 #>  [80,] 1.905576555 1.906320523 1.89516266 1.870788345 1.832569005 1.780538434 #>  [81,] 2.101190737 2.094846648 2.07581293 2.042928944 1.995732775 1.934423448 #>  [82,] 2.276046510 2.261943699 2.23462494 2.193092055 2.137041788 2.066816236 #>  [83,] 2.424547765 2.402248411 2.36648793 2.316425431 2.251896376 2.173354493 #>  [84,] 2.542420100 2.511703108 2.46756008 2.409291195 2.336842615 2.250744106 #>  [85,] 2.627029681 2.587847875 2.53553620 2.469512823 2.389803845 2.296980954 #>  [86,] 2.677545189 2.629964813 2.56977877 2.496498534 2.410202225 2.311476045 #>  [87,] 2.694910135 2.639045444 2.57128627 2.491216562 2.398946170 2.295058987 #>  [88,] 2.681614972 2.617572018 2.54248985 2.456012250 2.358271525 2.249844898 #>  [89,] 2.641285723 2.569128088 2.48689108 2.394276593 2.291442369 2.178966803 #>  [90,] 2.578135567 2.497881110 2.40857932 2.309999993 2.202340705 2.086198967 #>  [91,] 2.496354326 2.408006936 2.31169324 2.207270853 2.095000369 1.975523150 #>  [92,] 2.399532834 2.303147748 2.19991293 2.089800700 1.973163056 1.850712882 #>  [93,] 2.290228255 2.186004480 2.07607877 1.960568094 1.839945200 1.715021325 #>  [94,] 2.169765925 2.058154955 1.94202444 1.821664475 1.697694886 1.571047720 #>  [95,] 2.038338838 1.920155122 1.79867725 1.674391220 1.548083373 1.420821451 #>  [96,] 1.895408288 1.771923556 1.64642252 1.519600229 1.392418659          NA #>  [97,] 1.740336975 1.613338112 1.48565816          NA          NA          NA #>  [98,]          NA          NA         NA          NA          NA          NA #>  [99,]          NA          NA         NA          NA          NA          NA #> [100,]          NA          NA         NA          NA          NA          NA #>              [,71]      [,72]      [,73]      [,74]      [,75]      [,76] #>   [1,]          NA         NA         NA         NA         NA         NA #>   [2,]          NA         NA         NA         NA         NA         NA #>   [3,]          NA         NA         NA         NA         NA         NA #>   [4,]          NA         NA         NA         NA         NA         NA #>   [5,]          NA         NA         NA         NA         NA         NA #>   [6,] 5.128243148 5.25271459         NA         NA         NA         NA #>   [7,] 4.669860029 4.81344861 4.93393685 5.03007681         NA         NA #>   [8,] 4.175322587 4.33038236 4.46747459 4.58545083 4.68360360         NA #>   [9,] 3.667963523 3.82707512 3.97311278 4.10515582 4.22267567 4.32539972 #>  [10,] 3.169402203 3.32590667 3.47373579 3.61228482 3.74130741 3.86078835 #>  [11,] 2.697986194 2.84636314 2.98979599 3.12804589 3.26120832 3.38960185 #>  [12,] 2.267807123 2.40388137 2.53798645 2.67026631 2.80117967 2.93140903 #>  [13,] 1.888299133 2.00928923 2.13051268 2.25248767 2.37602778 2.50217249 #>  [14,] 1.564337091 1.66877805 1.77492342 1.88363932 1.99606541 2.11356528 #>  [15,] 1.296703987 1.38428473 1.47438986 1.56819611 1.66712874 1.77282742 #>  [16,] 1.082788531 1.15414295 1.22829434 1.30668689 1.39098574 1.48305263 #>  [17,] 0.917392078 0.97387487 1.03299406 1.09641551 1.16599760 1.24377038 #>  [18,] 0.793553720 0.83702240 0.88264954 0.93227572 0.98790730 1.05169262 #>  [19,] 0.703332024 0.73594764 0.77003760 0.80757004 0.85065585 0.90151665 #>  [20,] 0.638505039 0.66255729 0.68729653 0.71477142 0.74715570 0.78670405 #>  [21,] 0.591165086 0.60892399 0.62657117 0.64618975 0.66997624 0.70018205 #>  [22,] 0.554193517 0.56778794 0.58053930 0.59452132 0.61191508 0.63493558 #>  [23,] 0.521605998 0.53292918 0.54280898 0.55326974 0.56644165 0.58447331 #>  [24,] 0.488764052 0.49940637 0.50818277 0.51703417 0.52800868 0.54316202 #>  [25,] 0.452455112 0.46366397 0.47279098 0.48166741 0.49223399 0.50643177 #>  [26,] 0.410851418 0.42351742 0.43410292 0.44431250 0.45596168 0.47086103 #>  [27,] 0.363366686 0.37803393 0.39083273 0.40333376 0.41721803 0.43415696 #>  [28,] 0.310436913 0.32733365 0.34276304 0.35816418 0.37508313 0.39505121 #>  [29,] 0.253256412 0.27234083 0.29051462 0.30909588 0.32950352 0.35313559 #>  [30,] 0.193501089 0.21451637 0.23529204 0.25704208 0.28107298 0.30866325 #>  [31,] 0.133068039 0.15560040 0.17863352 0.20329809 0.23080775 0.26234059 #>  [32,] 0.073854219 0.09738838 0.12218856 0.14932431 0.17993857 0.21513156 #>  [33,] 0.017588613 0.04155640 0.06753977 0.09656830 0.12973660 0.16809076 #>  [34,] 0.000000000 0.00000000 0.01607710 0.04633493 0.08138279 0.12223549 #>  [35,] 0.000000000 0.00000000 0.00000000 0.00000000 0.03588368 0.07846024 #>  [36,] 0.000000000 0.00000000 0.00000000 0.00000000 0.00000000 0.03749124 #>  [37,] 0.000000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [38,] 0.000000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [39,] 0.000000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [40,] 0.000000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [41,] 0.000000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [42,] 0.000000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [43,] 0.000000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [44,] 0.000000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [45,] 0.000000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [46,] 0.000000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [47,] 0.000000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [48,] 0.000000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [49,] 0.000000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [50,] 0.000000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [51,] 0.000000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [52,] 0.000000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [53,] 0.000000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [54,] 0.004710530 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [55,] 0.009254937 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [56,] 0.008173081 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [57,] 0.001840694 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [58,] 0.000000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [59,] 0.000000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [60,] 0.000000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [61,] 0.000000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [62,] 0.000000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [63,] 0.000000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [64,] 0.000000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [65,] 0.000000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [66,] 0.000000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [67,] 0.000000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 #>  [68,] 0.036501079 0.03414472 0.02999801 0.02469406 0.01898136 0.01366558 #>  [69,] 0.102390404 0.09986836 0.09473950 0.08758274 0.07912485 0.07018423 #>  [70,] 0.185955326 0.18215707 0.17483843 0.16456210 0.15207208 0.13823680 #>  [71,] 0.287573690 0.28127908 0.27047935 0.25576253 0.23793022 0.21793758 #>  [72,] 0.406972053 0.39688505 0.38127145 0.36078708 0.33633012 0.30897551 #>  [73,] 0.543137769 0.52793312 0.50618443 0.47865562 0.44637576 0.41056603 #>  [74,] 0.694253951 0.67263628 0.64350517 0.60776720 0.56660891 0.52141486 #>  [75,] 0.857670381 0.82844260 0.79082316 0.74588692 0.69499379 0.63969782 #>  [76,] 1.029922192 0.99205750 0.94505205 0.89016275 0.82892644 0.76306065 #>  [77,] 1.206804855 1.15951451 1.10249206 1.03717672 0.96527278 0.88864391 #>  [78,] 1.383509215 1.32629734 1.25893610 1.18303356 1.10044000 1.01313854 #>  [79,] 1.554814644 1.48751188 1.40981950 1.32348870 1.23048499 1.13287830 #>  [80,] 1.715332695 1.63810294 1.55041088 1.45411616 1.35126325 1.24397460 #>  [81,] 1.859788335 1.77310653 1.67603890 1.57051421 1.45861897 1.34249644 #>  [82,] 1.983321253 1.88792470 1.78234554 1.66854297 1.54861235 1.42469243 #>  [83,] 2.081785602 1.97860540 1.86555200 1.74458154 1.61777267 1.48724297 #>  [84,] 2.152022852 2.04210521 1.92271631 1.79578466 1.66335624 1.52752025 #>  [85,] 2.192079456 2.07650756 1.95195549 1.82031023 1.68357911 1.54382389 #>  [86,] 2.201339851 2.08116625 1.95260023 1.81748387 1.67778839 1.53555481 #>  [87,] 2.180548001 2.05674499 1.92525038 1.78786668 1.64653732 1.50329215 #>  [88,] 2.131699534 2.00513230 1.87170848 1.73320217 1.59154011 1.44875076 #>  [89,] 2.057803153 1.92922782 1.79478603 1.65623735 1.51550322 1.37461866 #>  [90,] 1.962533934 1.83262119 1.69800350 1.56043998 1.42185653 1.28429992 #>  [91,] 1.849828392 1.71921241 1.58523291 1.44966102 1.31443421 1.18161280 #>  [92,] 1.723494351 1.59284509 1.46035298 1.32781066 1.19717082 1.07050464 #>  [93,] 1.586918207 1.45703202 1.32699218 1.19861797 1.07387586         NA #>  [94,] 1.442939697 1.31483720 1.18841659 1.06552253         NA         NA #>  [95,] 1.293926657 1.16893910         NA         NA         NA         NA #>  [96,]          NA         NA         NA         NA         NA         NA #>  [97,]          NA         NA         NA         NA         NA         NA #>  [98,]          NA         NA         NA         NA         NA         NA #>  [99,]          NA         NA         NA         NA         NA         NA #> [100,]          NA         NA         NA         NA         NA         NA #>              [,77]       [,78]       [,79]      [,80]       [,81]      [,82] #>   [1,]          NA          NA          NA         NA          NA         NA #>   [2,]          NA          NA          NA         NA          NA         NA #>   [3,]          NA          NA          NA         NA          NA         NA #>   [4,]          NA          NA          NA         NA          NA         NA #>   [5,]          NA          NA          NA         NA          NA         NA #>   [6,]          NA          NA          NA         NA          NA         NA #>   [7,]          NA          NA          NA         NA          NA         NA #>   [8,]          NA          NA          NA         NA          NA         NA #>   [9,] 4.413125707          NA          NA         NA          NA         NA #>  [10,] 3.970756786 4.071057107          NA         NA          NA         NA #>  [11,] 3.513592010 3.633359561 3.748635129 3.85843579          NA         NA #>  [12,] 3.061704767 3.192665449 3.324467250 3.45656992 3.587440938         NA #>  [13,] 2.632057757 2.766720429 2.906840147 3.05243614 3.202552078 3.35497735 #>  [14,] 2.237625907 2.369694500 2.510947678 2.66199973 2.822572447 2.99116636 #>  [15,] 1.887073686 2.011664155 2.148217437 2.29791137 2.461161384 2.63726859 #>  [16,] 1.584897275 1.698586798 1.826096000 1.96908640 2.128613357 2.30477734 #>  [17,] 1.331904693 1.432654110 1.548249472 1.68072723 1.831680677 2.00193734 #>  [18,] 1.125901785 1.212894886 1.315057592 1.43468111 1.573767141 1.73374937 #>  [19,] 0.962468023 1.035906216 1.124278704 1.23001344 1.355381574 1.50227514 #>  [20,] 0.835732187 0.896614077 0.971779302 1.06368589 1.174739887 1.30713531 #>  [21,] 0.739085319 0.788991004 0.852246293 0.93124895 1.028418837 1.14610112 #>  [22,] 0.665791886 0.706683519 0.759825444 0.82748273 0.911986456 1.01569673 #>  [23,] 0.609478159 0.643522386 0.688651800 0.74694357 0.820557385 0.91175182 #>  [24,] 0.564489942 0.593904334 0.633255700 0.68439342 0.749242603 0.82986528 #>  [25,] 0.526121338 0.553045286 0.588841640 0.63510518 0.693480802 0.76576010 #>  [26,] 0.490723710 0.517113756 0.551447260 0.59504872 0.649252549 0.71552564 #>  [27,] 0.455710059 0.483259528 0.517997162 0.56097117 0.613188678 0.67575531 #>  [28,] 0.419474911 0.449557610 0.486271384 0.53039095 0.582591250 0.64359602 #>  [29,] 0.381253181 0.414890499 0.454811365 0.50152808 0.555389386 0.61673097 #>  [30,] 0.340942842 0.378792880 0.422787143 0.47319445 0.530053402 0.59331878 #>  [31,] 0.298915342 0.341281854 0.389848269 0.44466616 0.505489361 0.57191115 #>  [32,] 0.255834617 0.302692665 0.355977788 0.41555693 0.480932825 0.55136782 #>  [33,] 0.212500601 0.263535245 0.321363982 0.38570673 0.455855799 0.53078288 #>  [34,] 0.169727228 0.224381237 0.286299124 0.35509462 0.429895403 0.50943075 #>  [35,] 0.128258761 0.185785379 0.251108956 0.32377898 0.402807368 0.48673478 #>  [36,] 0.088722793 0.148239981 0.216111699 0.29186409 0.374442752 0.46225653 #>  [37,] 0.051614076 0.112157228 0.181601653 0.25948791 0.344742816 0.43570036 #>  [38,] 0.017300744 0.077871630 0.147850167 0.22682417 0.313745002 0.40692607 #>  [39,] 0.000000000 0.045654057 0.115116018 0.19409112 0.281592486 0.37596185 #>  [40,] 0.000000000 0.015729354 0.083657783 0.16156005 0.248540600 0.34301097 #>  [41,] 0.000000000 0.000000000 0.053742390 0.12955812 0.214955163 0.30844727 #>  [42,] 0.000000000 0.000000000 0.025646170 0.09846250 0.181300034 0.27279717 #>  [43,] 0.000000000 0.000000000 0.000000000 0.06868483 0.148113515 0.23670841 #>  [44,] 0.000000000 0.000000000 0.000000000 0.04064730 0.115975328 0.20090754 #>  [45,] 0.000000000 0.000000000 0.000000000 0.01475301 0.085467411 0.16615024 #>  [46,] 0.000000000 0.000000000 0.000000000 0.00000000 0.057132689 0.13316904 #>  [47,] 0.000000000 0.000000000 0.000000000 0.00000000 0.031436206 0.10262342 #>  [48,] 0.000000000 0.000000000 0.000000000 0.00000000 0.008732626 0.07505673 #>  [49,] 0.000000000 0.000000000 0.000000000 0.00000000 0.000000000 0.05086350 #>  [50,] 0.000000000 0.000000000 0.000000000 0.00000000 0.000000000 0.03026954 #>  [51,] 0.000000000 0.000000000 0.000000000 0.00000000 0.000000000 0.01332591 #>  [52,] 0.000000000 0.000000000 0.000000000 0.00000000 0.000000000 0.00000000 #>  [53,] 0.000000000 0.000000000 0.000000000 0.00000000 0.000000000 0.00000000 #>  [54,] 0.000000000 0.000000000 0.000000000 0.00000000 0.000000000 0.00000000 #>  [55,] 0.000000000 0.000000000 0.000000000 0.00000000 0.000000000 0.00000000 #>  [56,] 0.000000000 0.000000000 0.000000000 0.00000000 0.000000000 0.00000000 #>  [57,] 0.000000000 0.000000000 0.000000000 0.00000000 0.000000000 0.00000000 #>  [58,] 0.000000000 0.000000000 0.000000000 0.00000000 0.000000000 0.00000000 #>  [59,] 0.000000000 0.000000000 0.000000000 0.00000000 0.000000000 0.00000000 #>  [60,] 0.000000000 0.000000000 0.000000000 0.00000000 0.000000000 0.00000000 #>  [61,] 0.000000000 0.000000000 0.000000000 0.00000000 0.000000000 0.00000000 #>  [62,] 0.000000000 0.000000000 0.000000000 0.00000000 0.000000000 0.00000000 #>  [63,] 0.000000000 0.000000000 0.000000000 0.00000000 0.000000000 0.00000000 #>  [64,] 0.000000000 0.000000000 0.000000000 0.00000000 0.000000000 0.00000000 #>  [65,] 0.000000000 0.000000000 0.000000000 0.00000000 0.000000000 0.00000000 #>  [66,] 0.000000000 0.000000000 0.000000000 0.00000000 0.000000000 0.00000000 #>  [67,] 0.000000000 0.000000000 0.000000000 0.00000000 0.000000000 0.01008490 #>  [68,] 0.009543821 0.007336207 0.007621723 0.01078685 0.016996222 0.02619304 #>  [69,] 0.061605390 0.054189318 0.048626979 0.04544475 0.044970982 0.04733095 #>  [70,] 0.123981797 0.110217147 0.097767532 0.08731375 0.079354723 0.07419679 #>  [71,] 0.196822018 0.175626407 0.155324848 0.13675997 0.120600454 0.10732493 #>  [72,] 0.279897953 0.250289945 0.221282972 0.19388081 0.168913165 0.14701509 #>  [73,] 0.372555867 0.333695544 0.295273067 0.25844437 0.224184249 0.19326274 #>  [74,] 0.473676853 0.424901244 0.376522765 0.32983299 0.285930284 0.24569490 #>  [75,] 0.581649785 0.522500745 0.463814361 0.40699561 0.353241731 0.30351808 #>  [76,] 0.694361220 0.624603979 0.555457811 0.48841581 0.424749288 0.36548632 #>  [77,] 0.809208053 0.728839807 0.649286643 0.57210469 0.498617589 0.42989942 #>  [78,] 0.923140191 0.832389573 0.742686669 0.65562901 0.572576832 0.49464125 #>  [79,] 1.032741303 0.932060959 0.832667640 0.73618495 0.644001797 0.55726630 #>  [80,] 1.134354829 1.024410143 0.915985860 0.81072429 0.710043743 0.61513777 #>  [81,] 1.224258869 1.105915789 0.989320185 0.87613405 0.767813569 0.66561300 #>  [82,] 1.298886660 1.173200390 1.049495103 0.92946058 0.814605175 0.70626304 #>  [83,] 1.355079483 1.223283889 1.093733561 0.96815897 0.848137664 0.73510350 #>  [84,] 1.390347667 1.253843193 1.119911442 0.99033818 0.866786662 0.75080734 #>  [85,] 1.403105787 1.263442521 1.126778213 0.99496716 0.869771255 0.75286836 #>  [86,] 1.392843911 1.251696818 1.114107524 0.98200816 0.857266073 0.74168867 #>  [87,] 1.360200962 1.219336630 1.082749419 0.95245279 0.830418382 0.71857403 #>  [88,] 1.306920387 1.168158231 1.034572037 0.90825300 0.791265962 0.68563636 #>  [89,] 1.235690639 1.100864951 0.972301933 0.85215837 0.742569048         NA #>  [90,] 1.149898256 1.020828915 0.899292607 0.78748882          NA         NA #>  [91,] 1.053341975 0.931819205          NA         NA          NA         NA #>  [92,] 0.949964093          NA          NA         NA          NA         NA #>  [93,]          NA          NA          NA         NA          NA         NA #>  [94,]          NA          NA          NA         NA          NA         NA #>  [95,]          NA          NA          NA         NA          NA         NA #>  [96,]          NA          NA          NA         NA          NA         NA #>  [97,]          NA          NA          NA         NA          NA         NA #>  [98,]          NA          NA          NA         NA          NA         NA #>  [99,]          NA          NA          NA         NA          NA         NA #> [100,]          NA          NA          NA         NA          NA         NA #>             [,83]      [,84]      [,85]      [,86]      [,87]      [,88] #>   [1,]         NA         NA         NA         NA         NA         NA #>   [2,]         NA         NA         NA         NA         NA         NA #>   [3,]         NA         NA         NA         NA         NA         NA #>   [4,]         NA         NA         NA         NA         NA         NA #>   [5,]         NA         NA         NA         NA         NA         NA #>   [6,]         NA         NA         NA         NA         NA         NA #>   [7,]         NA         NA         NA         NA         NA         NA #>   [8,]         NA         NA         NA         NA         NA         NA #>   [9,]         NA         NA         NA         NA         NA         NA #>  [10,]         NA         NA         NA         NA         NA         NA #>  [11,]         NA         NA         NA         NA         NA         NA #>  [12,]         NA         NA         NA         NA         NA         NA #>  [13,]         NA         NA         NA         NA         NA         NA #>  [14,] 3.16478902         NA         NA         NA         NA         NA #>  [15,] 2.82408510 3.01775961         NA         NA         NA         NA #>  [16,] 2.49635534 2.70046846 2.91235608         NA         NA         NA #>  [17,] 2.19118528 2.39759343 2.61749078 2.84518167         NA         NA #>  [18,] 1.91514038 2.11713548 2.33722863 2.57091442 2.81155878         NA #>  [19,] 1.67189521 1.86436762 2.07832781 2.31054120 2.55564161 2.80607331 #>  [20,] 1.46259854 1.64203923 1.84513468 2.06990169 2.31233313 2.56618939 #>  [21,] 1.28637555 1.45076046 1.63982279 1.85273349 2.08683538 2.33731186 #>  [22,] 1.14088014 1.28947861 1.46276594 1.66091530 1.88253125 2.12422757 #>  [23,] 1.02282855 1.15597216 1.31296835 1.49480724 1.70120996 1.93014825 #>  [24,] 0.92846651 1.04730653 1.18848987 1.35362305 1.54336203 1.75690493 #>  [25,] 0.85394215 0.96021538 1.08682206 1.23578328 1.40848900 1.60519212 #>  [26,] 0.79557419 0.89138973 1.00518940 1.13921612 1.29538766 1.47481670 #>  [27,] 0.75001886 0.83767223 0.94076626 1.06158881 1.20238455 1.36492080 #>  [28,] 0.71434912 0.79616592 0.89081326 1.00046726 1.12751108 1.27416203 #>  [29,] 0.68606573 0.76427460 0.85274658 0.95341205 1.06862190 1.20084705 #>  [30,] 0.66306265 0.73969566 0.82415865 0.91802632 1.02346759 1.14302450 #>  [31,] 0.64356889 0.72038690 0.80281072 0.89197396 0.98973702 1.09854890 #>  [32,] 0.62608545 0.70452638 0.78661596 0.87298594 0.96508624 1.06512999 #>  [33,] 0.60933184 0.69047961 0.77362772 0.85886948 0.94716775 1.04038057 #>  [34,] 0.59221038 0.67678296 0.76204221 0.84752977 0.93367033 1.02187283 #>  [35,] 0.57379141 0.66214623 0.75021886 0.83700786 0.92237363 1.00720802 #>  [36,] 0.55331691 0.64547212 0.73671633 0.82553327 0.91121656 0.99409915 #>  [37,] 0.53021722 0.62588682 0.72033815 0.81158521 0.89837396 0.98046179 #>  [38,] 0.50413292 0.60277339 0.70017958 0.79395400 0.88233279 0.96450457 #>  [39,] 0.47493389 0.57579970 0.67566660 0.77179309 0.86195838 0.94480993 #>  [40,] 0.44272886 0.54493350 0.64657937 0.74465336 0.83654158 0.92039523 #>  [41,] 0.40786033 0.51043952 0.61305445 0.71249342 0.80581990 0.89074701 #>  [42,] 0.37088285 0.47285639 0.57556325 0.67566294 0.76996899 0.85582359 #>  [43,] 0.33252507 0.43295399 0.53486741 0.63485920 0.72956405 0.81602500 #>  [44,] 0.29363835 0.39167441 0.49195429 0.59106033 0.68551435 0.77213274 #>  [45,] 0.25513634 0.35006157 0.44795836 0.54544090 0.63897659 0.72522491 #>  [46,] 0.21793100 0.30918566 0.40407503 0.49927729 0.59125473 0.67657424 #>  [47,] 0.18287062 0.27006872 0.36147431 0.45385085 0.54369496 0.62753808 #>  [48,] 0.15068497 0.23361726 0.32122095 0.41035623 0.49758401 0.57944930 #>  [49,] 0.12194167 0.20056689 0.28420679 0.36982188 0.45405869 0.53351671 #>  [50,] 0.09701666 0.17144232 0.25109977 0.33304769 0.41403265 0.49074185 #>  [51,] 0.07608041 0.14653492 0.22231211 0.30056338 0.37814471 0.45185766 #>  [52,] 0.05909982 0.12589835 0.19798898 0.27260945 0.34673143 0.41729229 #>  [53,] 0.04585495 0.10936157 0.17801713 0.24914051 0.31982423 0.38715906 #>  [54,] 0.03596867 0.09655736 0.16205182 0.22984977 0.29717015 0.36127211 #>  [55,] 0.02894648 0.08696378 0.14955941 0.21421171 0.27827326 0.33918480 #>  [56,] 0.02422346 0.07995514 0.13987190 0.20153929 0.26245286 0.32024701 #>  [57,] 0.02121517 0.07485888 0.13224950 0.19105099 0.24891350 0.30367603 #>  [58,] 0.01936888 0.07101452 0.12594654 0.18194270 0.23682107 0.28863477 #>  [59,] 0.01821221 0.06783070 0.12027637 0.17345920 0.22537928 0.27431116 #>  [60,] 0.01739585 0.06483660 0.11467056 0.16495997 0.21390044 0.25999215 #>  [61,] 0.01672793 0.06172447 0.10872866 0.15597486 0.20186562 0.24512672 #>  [62,] 0.01619763 0.05838024 0.10225474 0.14624544 0.18896953 0.22937324 #>  [63,] 0.01598649 0.05490031 0.09527849 0.13574928 0.17514712 0.21262760 #>  [64,] 0.01646626 0.05159290 0.08805903 0.12470537 0.16058003 0.19503066 #>  [65,] 0.01818306 0.04896376 0.08107122 0.11356047 0.14568282 0.17695471 #>  [66,] 0.02182814 0.04768660 0.07497496 0.10295699 0.13106995 0.15897060 #>  [67,] 0.02819625 0.04855939 0.07056912 0.09368480 0.11750620 0.14179836 #>  [68,] 0.03813299 0.05244860 0.06873244 0.08661954 0.10584389 0.12624518 #>  [69,] 0.05247322 0.06022358 0.07035452 0.08265123 0.09695104 0.11313560 #>  [70,] 0.07197243 0.07268393 0.07626003 0.08260726 0.09163524 0.10323871 #>  [71,] 0.09723363 0.09048285 0.08713026 0.08717414 0.09056816 0.09719796 #>  [72,] 0.12863280 0.11405041 0.10342628 0.09682310 0.09421612 0.09546881 #>  [73,] 0.16624672 0.14352116 0.12531892 0.11174506 0.10278235 0.09826993 #>  [74,] 0.20978849 0.17867200 0.15263179 0.13180125 0.11616688 0.10555310 #>  [75,] 0.25855756 0.21887751 0.18480453 0.15649617 0.13395013 0.11699702 #>  [76,] 0.31141296 0.26309104 0.22088381 0.18497956 0.15540547 0.13202865 #>  [77,] 0.36677904 0.30986028 0.25954968 0.21608313 0.17954461 0.14987420 #>  [78,] 0.42269275 0.35738439 0.29918225 0.24839507 0.20519673 0.16963844 #>  [79,] 0.47689853 0.40361680 0.33797045 0.28037146 0.23111820 0.19040737 #>  [80,] 0.52699178 0.44641183 0.37405848 0.31047820 0.25612466 0.21136456 #>  [81,] 0.57060413 0.48370622 0.40571909 0.33735085 0.27923179 0.23190740 #>  [82,] 0.60561518 0.51371864 0.43153583 0.35995435 0.29978737 0.25174631 #>  [83,] 0.63036752 0.53514389 0.45057165 0.37772122 0.31757441         NA #>  [84,] 0.64385638 0.54731509 0.46249928 0.39064614         NA         NA #>  [85,] 0.64586574 0.55030865 0.46767161         NA         NA         NA #>  [86,] 0.63702793 0.54497306         NA         NA         NA         NA #>  [87,] 0.61879477         NA         NA         NA         NA         NA #>  [88,]         NA         NA         NA         NA         NA         NA #>  [89,]         NA         NA         NA         NA         NA         NA #>  [90,]         NA         NA         NA         NA         NA         NA #>  [91,]         NA         NA         NA         NA         NA         NA #>  [92,]         NA         NA         NA         NA         NA         NA #>  [93,]         NA         NA         NA         NA         NA         NA #>  [94,]         NA         NA         NA         NA         NA         NA #>  [95,]         NA         NA         NA         NA         NA         NA #>  [96,]         NA         NA         NA         NA         NA         NA #>  [97,]         NA         NA         NA         NA         NA         NA #>  [98,]         NA         NA         NA         NA         NA         NA #>  [99,]         NA         NA         NA         NA         NA         NA #> [100,]         NA         NA         NA         NA         NA         NA #>             [,89]      [,90]      [,91]      [,92]      [,93]     [,94] #>   [1,]         NA         NA         NA         NA         NA        NA #>   [2,]         NA         NA         NA         NA         NA        NA #>   [3,]         NA         NA         NA         NA         NA        NA #>   [4,]         NA         NA         NA         NA         NA        NA #>   [5,]         NA         NA         NA         NA         NA        NA #>   [6,]         NA         NA         NA         NA         NA        NA #>   [7,]         NA         NA         NA         NA         NA        NA #>   [8,]         NA         NA         NA         NA         NA        NA #>   [9,]         NA         NA         NA         NA         NA        NA #>  [10,]         NA         NA         NA         NA         NA        NA #>  [11,]         NA         NA         NA         NA         NA        NA #>  [12,]         NA         NA         NA         NA         NA        NA #>  [13,]         NA         NA         NA         NA         NA        NA #>  [14,]         NA         NA         NA         NA         NA        NA #>  [15,]         NA         NA         NA         NA         NA        NA #>  [16,]         NA         NA         NA         NA         NA        NA #>  [17,]         NA         NA         NA         NA         NA        NA #>  [18,]         NA         NA         NA         NA         NA        NA #>  [19,]         NA         NA         NA         NA         NA        NA #>  [20,] 2.82302926         NA         NA         NA         NA        NA #>  [21,] 2.59705083 2.85678296         NA         NA         NA        NA #>  [22,] 2.38034833 2.64292670         NA         NA         NA        NA #>  [23,] 2.17745181 2.43660671 2.69883312         NA         NA        NA #>  [24,] 1.99151690 2.24219302 2.50156296 2.76011077         NA        NA #>  [25,] 1.82448204 2.06284046 2.31439234 2.57094723         NA        NA #>  [26,] 1.67726225 1.90060814 2.14048418 2.39014171 2.64065852        NA #>  [27,] 1.54994356 1.75660772 1.98199532 2.22084334 2.46557947 2.7067064 #>  [28,] 1.44195509 1.63115262 1.84018728 2.06526442 2.30023972 2.5368416 #>  [29,] 1.35220839 1.52389122 1.71554053 1.92476257 2.14686052 2.3748983 #>  [30,] 1.27920383 1.43391831 1.60786070 1.79993058 2.00684809 2.2230678 #>  [31,] 1.22111154 1.35986669 1.51637322 1.69068554 1.88086802 2.0827726 #>  [32,] 1.17583797 1.29998640 1.43980957 1.59635538 1.76892503 1.9547320 #>  [33,] 1.14108967 1.25222095 1.37649130 1.51576564 1.67044695 1.8390372 #>  [34,] 1.11444383 1.21428868 1.32441854 1.44733081 1.58437442 1.7352356 #>  [35,] 1.09343052 1.18377474 1.28136794 1.38915422 1.50925891 1.6424227 #>  [36,] 1.07562747 1.15823467 1.24500144 1.33913825 1.44337035 1.5593441 #>  [37,] 1.05876282 1.13530628 1.21298377 1.29510314 1.38481326 1.4845051 #>  [38,] 1.04081849 1.11282322 1.18310258 1.25490981 1.33164802 1.4162864 #>  [39,] 1.02012442 1.08892093 1.15338318 1.21657950 1.28201082 1.3530599 #>  [40,] 0.99543409 1.06212541 1.12218841 1.17840131 1.23422491 1.2932991 #>  [41,] 0.96597303 1.03141624 1.08829495 1.13901933 1.18689468 1.2356758 #>  [42,] 0.93145491 0.99625753 1.05093910 1.09749186 1.13897564 1.1791365 #>  [43,] 0.89206330 0.95659384 1.00982823 1.05331812 1.08981456 1.1229531 #>  [44,] 0.84840056 0.91281163 0.96511707 1.00643054 1.03915726 1.0667444 #>  [45,] 0.80140888 0.86567021 0.91735198 0.95715439 0.98712438 1.0104665 #>  [46,] 0.75227077 0.81620896 0.86738869 0.90613920 0.93415823 0.9543758 #>  [47,] 0.70229799 0.76563942 0.81629176 0.85426919 0.88094688 0.8989683 #>  [48,] 0.65281835 0.71523181 0.76522492 0.80256119 0.82833301 0.8449014 #>  [49,] 0.60506953 0.66620557 0.71534184 0.75205956 0.77721625 0.7929066 #>  [50,] 0.56010775 0.61963230 0.66768646 0.70373704 0.72845812 0.7437015 #>  [51,] 0.51873765 0.57635832 0.62311031 0.65840964 0.68279742 0.6979094 #>  [52,] 0.48146730 0.53695163 0.58221267 0.61667186 0.64078296 0.6559915 #>  [53,] 0.44849045 0.50167603 0.54530697 0.57885637 0.60272843 0.6182003 #>  [54,] 0.41969561 0.47049278 0.51241446 0.54502007 0.56869180 0.5845536 #>  [55,] 0.39469977 0.44308788 0.48328397 0.51495582 0.53847954 0.5548329 #>  [56,] 0.37290262 0.41892120 0.45743430 0.48822706 0.51167348 0.5286037 #>  [57,] 0.35355589 0.39729209 0.43421408 0.46422078 0.48767645 0.5052539 #>  [58,] 0.33584150 0.37741499 0.41287296 0.44221286 0.46577121 0.4840470 #>  [59,] 0.31895157 0.35849807 0.39263703 0.42143904 0.44518654 0.4641838 #>  [60,] 0.30216375 0.33981800 0.37278165 0.40116490 0.42516412 0.4448662 #>  [61,] 0.28490567 0.32078463 0.35269538 0.38074868 0.40502018 0.4253583 #>  [62,] 0.26680367 0.30099048 0.33193000 0.35969189 0.38419726 0.4050396 #>  [63,] 0.24771232 0.28024156 0.31023313 0.33767434 0.36230227 0.3834471 #>  [64,] 0.22772299 0.25856795 0.28756170 0.31457177 0.33912930 0.3603034 #>  [65,] 0.20715162 0.23621419 0.26407663 0.29045621 0.31466673 0.3355311 #>  [66,] 0.18650752 0.21361154 0.24012050 0.26558073 0.28909003 0.3092535 #>  [67,] 0.16644611 0.19133531 0.21618146 0.24035150 0.26274255 0.2817837 #>  [68,] 0.14771027 0.17005167 0.19284766 0.21529101 0.23610771 0.2536044 #>  [69,] 0.13106477 0.15045892 0.17075688 0.19099676 0.20977607 0.2253415 #>  [70,] 0.11722947 0.13322835 0.15054626 0.16809966 0.18441099 0.1977342 #>  [71,] 0.10681637 0.11895002 0.13280687 0.14722646 0.16071641 0.1716047 #>  [72,] 0.10027590 0.10808814 0.11804744 0.12896951 0.13940945 0.1478297 #>  [73,] 0.09785761 0.10095055 0.10667069 0.11386679 0.12119993 0.1273143 #>  [74,] 0.09958968 0.09767593 0.09896504 0.10239394 0.10677773 0.1109704 #>  [75,] 0.10528101 0.09824121 0.09511295 0.09496836 0.09680764        NA #>  [76,] 0.11454834 0.10248989 0.09521538 0.09196424         NA        NA #>  [77,] 0.12686833 0.11018001 0.09932964 0.09373483         NA        NA #>  [78,] 0.14165173 0.12104714 0.10751549         NA         NA        NA #>  [79,] 0.15833301 0.13487513         NA         NA         NA        NA #>  [80,] 0.17646519 0.15156385         NA         NA         NA        NA #>  [81,] 0.19580615         NA         NA         NA         NA        NA #>  [82,]         NA         NA         NA         NA         NA        NA #>  [83,]         NA         NA         NA         NA         NA        NA #>  [84,]         NA         NA         NA         NA         NA        NA #>  [85,]         NA         NA         NA         NA         NA        NA #>  [86,]         NA         NA         NA         NA         NA        NA #>  [87,]         NA         NA         NA         NA         NA        NA #>  [88,]         NA         NA         NA         NA         NA        NA #>  [89,]         NA         NA         NA         NA         NA        NA #>  [90,]         NA         NA         NA         NA         NA        NA #>  [91,]         NA         NA         NA         NA         NA        NA #>  [92,]         NA         NA         NA         NA         NA        NA #>  [93,]         NA         NA         NA         NA         NA        NA #>  [94,]         NA         NA         NA         NA         NA        NA #>  [95,]         NA         NA         NA         NA         NA        NA #>  [96,]         NA         NA         NA         NA         NA        NA #>  [97,]         NA         NA         NA         NA         NA        NA #>  [98,]         NA         NA         NA         NA         NA        NA #>  [99,]         NA         NA         NA         NA         NA        NA #> [100,]         NA         NA         NA         NA         NA        NA #>            [,95]     [,96]     [,97]     [,98]     [,99] [,100] #>   [1,]        NA        NA        NA        NA        NA     NA #>   [2,]        NA        NA        NA        NA        NA     NA #>   [3,]        NA        NA        NA        NA        NA     NA #>   [4,]        NA        NA        NA        NA        NA     NA #>   [5,]        NA        NA        NA        NA        NA     NA #>   [6,]        NA        NA        NA        NA        NA     NA #>   [7,]        NA        NA        NA        NA        NA     NA #>   [8,]        NA        NA        NA        NA        NA     NA #>   [9,]        NA        NA        NA        NA        NA     NA #>  [10,]        NA        NA        NA        NA        NA     NA #>  [11,]        NA        NA        NA        NA        NA     NA #>  [12,]        NA        NA        NA        NA        NA     NA #>  [13,]        NA        NA        NA        NA        NA     NA #>  [14,]        NA        NA        NA        NA        NA     NA #>  [15,]        NA        NA        NA        NA        NA     NA #>  [16,]        NA        NA        NA        NA        NA     NA #>  [17,]        NA        NA        NA        NA        NA     NA #>  [18,]        NA        NA        NA        NA        NA     NA #>  [19,]        NA        NA        NA        NA        NA     NA #>  [20,]        NA        NA        NA        NA        NA     NA #>  [21,]        NA        NA        NA        NA        NA     NA #>  [22,]        NA        NA        NA        NA        NA     NA #>  [23,]        NA        NA        NA        NA        NA     NA #>  [24,]        NA        NA        NA        NA        NA     NA #>  [25,]        NA        NA        NA        NA        NA     NA #>  [26,]        NA        NA        NA        NA        NA     NA #>  [27,]        NA        NA        NA        NA        NA     NA #>  [28,]        NA        NA        NA        NA        NA     NA #>  [29,] 2.6001155        NA        NA        NA        NA     NA #>  [30,] 2.4410456        NA        NA        NA        NA     NA #>  [31,] 2.2901584        NA        NA        NA        NA     NA #>  [32,] 2.1488800 2.3446832        NA        NA        NA     NA #>  [33,] 2.0179849 2.2018685        NA        NA        NA     NA #>  [34,] 1.8976695 2.0675507 2.2392231        NA        NA     NA #>  [35,] 1.7876359 1.9420631 2.1012678        NA        NA     NA #>  [36,] 1.6871842 1.8253049 1.9705089        NA        NA     NA #>  [37,] 1.5953135 1.7168305 1.8470831 1.9827381        NA     NA #>  [38,] 1.5108282 1.6159443 1.7308387 1.8533378        NA     NA #>  [39,] 1.4324463 1.5217981 1.6214202 1.7302689        NA     NA #>  [40,] 1.3589034 1.4334867 1.5183520 1.6135262        NA     NA #>  [41,] 1.2890485 1.3501359 1.4211173 1.5030029 1.5955326     NA #>  [42,] 1.2219217 1.2709793 1.3292276 1.3985507 1.4796053     NA #>  [43,] 1.1568116 1.1954158 1.2422784 1.3000294 1.3701438     NA #>  [44,] 1.0932861 1.1230475 1.1599878 1.2073431 1.2672894     NA #>  [45,] 1.0311965 1.0536926 1.0822150 1.1204604 1.1711751     NA #>  [46,] 0.9706551 0.9873748 1.0089592 1.0394184 1.0819308     NA #>  [47,] 0.9119887 0.9242917 0.9403386 0.9643105 0.9996776     NA #>  [48,] 0.8556758 0.8647650 0.8765536 0.8952602 0.9245100     NA #>  [49,] 0.8022707 0.8091785 0.8178388 0.8323851 0.8564698     NA #>  [50,] 0.7523260 0.7579120 0.7644078 0.7757547 0.7955163     NA #>  [51,] 0.7063181 0.7112755 0.7163997 0.7253480 0.7414956     NA #>  [52,] 0.6645834 0.6694523 0.6738301 0.6810158 0.6941148     NA #>  [53,] 0.6272715 0.6324553 0.6365542 0.6424522 0.6529233     NA #>  [54,] 0.5943181 0.6001009 0.6042449 0.6091797 0.6173073     NA #>  [55,] 0.5654387 0.5720024 0.5763879 0.5805492 0.5864967     NA #>  [56,] 0.5401443 0.5475824 0.5522953 0.5557570 0.5595875     NA #>  [57,] 0.5177749 0.5261042 0.5311360 0.5338772 0.5355782     NA #>  [58,] 0.4975476 0.5067164 0.5119800 0.5139070 0.5134171     NA #>  [59,] 0.4786146 0.4885094 0.4938540 0.4948231 0.4920601     NA #>  [60,] 0.4601257 0.4705761 0.4758021 0.4756424 0.4705314     NA #>  [61,] 0.4412884 0.4520734 0.4569481 0.4554852        NA     NA #>  [62,] 0.4214240 0.4322797 0.4365543 0.4336336        NA     NA #>  [63,] 0.4000129 0.4106437 0.4140727 0.4095832        NA     NA #>  [64,] 0.3767285 0.3868229 0.3891853 0.3830831        NA     NA #>  [65,] 0.3514578 0.3607087 0.3618317        NA        NA     NA #>  [66,] 0.3243091 0.3324384 0.3322223        NA        NA     NA #>  [67,] 0.2956075 0.3023943 0.3008367        NA        NA     NA #>  [68,] 0.2658797 0.2711902        NA        NA        NA     NA #>  [69,] 0.2358310 0.2396481        NA        NA        NA     NA #>  [70,] 0.2063165        NA        NA        NA        NA     NA #>  [71,] 0.1783082        NA        NA        NA        NA     NA #>  [72,] 0.1528608        NA        NA        NA        NA     NA #>  [73,]        NA        NA        NA        NA        NA     NA #>  [74,]        NA        NA        NA        NA        NA     NA #>  [75,]        NA        NA        NA        NA        NA     NA #>  [76,]        NA        NA        NA        NA        NA     NA #>  [77,]        NA        NA        NA        NA        NA     NA #>  [78,]        NA        NA        NA        NA        NA     NA #>  [79,]        NA        NA        NA        NA        NA     NA #>  [80,]        NA        NA        NA        NA        NA     NA #>  [81,]        NA        NA        NA        NA        NA     NA #>  [82,]        NA        NA        NA        NA        NA     NA #>  [83,]        NA        NA        NA        NA        NA     NA #>  [84,]        NA        NA        NA        NA        NA     NA #>  [85,]        NA        NA        NA        NA        NA     NA #>  [86,]        NA        NA        NA        NA        NA     NA #>  [87,]        NA        NA        NA        NA        NA     NA #>  [88,]        NA        NA        NA        NA        NA     NA #>  [89,]        NA        NA        NA        NA        NA     NA #>  [90,]        NA        NA        NA        NA        NA     NA #>  [91,]        NA        NA        NA        NA        NA     NA #>  [92,]        NA        NA        NA        NA        NA     NA #>  [93,]        NA        NA        NA        NA        NA     NA #>  [94,]        NA        NA        NA        NA        NA     NA #>  [95,]        NA        NA        NA        NA        NA     NA #>  [96,]        NA        NA        NA        NA        NA     NA #>  [97,]        NA        NA        NA        NA        NA     NA #>  [98,]        NA        NA        NA        NA        NA     NA #>  [99,]        NA        NA        NA        NA        NA     NA #> [100,]        NA        NA        NA        NA        NA     NA #>  #> attr(,\"class\") #> [1] \"list\"              \"spherical.density\""},{"path":"https://tobiste.github.io/structr/reference/dist.mle.html","id":null,"dir":"Reference","previous_headings":"","what":"MLE of spherical rotational symmetric distributions — dist.mle","title":"MLE of spherical rotational symmetric distributions — dist.mle","text":"Estimates parameters von Mises-Fisher Kent distribution.","code":""},{"path":"https://tobiste.github.io/structr/reference/dist.mle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MLE of spherical rotational symmetric distributions — dist.mle","text":"","code":"kent_mle(x)  vmf_mle(x)"},{"path":"https://tobiste.github.io/structr/reference/dist.mle.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"MLE of spherical rotational symmetric distributions — dist.mle","text":"Adapted Directional::kent.mle() Directional::vmf.mle()","code":""},{"path":"https://tobiste.github.io/structr/reference/dist.mle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MLE of spherical rotational symmetric distributions — dist.mle","text":"x Object class \"Vec3\", \"Line\" \"Plane\"","code":""},{"path":"https://tobiste.github.io/structr/reference/dist.mle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MLE of spherical rotational symmetric distributions — dist.mle","text":"","code":"x <- rkent(100, mu = Line(120, 50), k = 5, b = 1) kent_mle(x) #> $G #> Line object (n = 3): #>        azimuth   plunge #> mean  126.6684 53.94635 #> major 356.8237 25.00525 #> minor 254.7384 24.17463 #>  #> $param #>      kappa       beta        psi  #>  4.6882933  0.4130065 -0.2594071  #>  #> $logcon #> [1] 4.992055 #>  #> $loglik #> [1] -129.842 #>  vmf_mle(x) #> $loglik #> [1] -130.2801 #>  #> $mu #> Line object (n = 1): #>   azimuth    plunge  #> 126.66841  53.94635  #>  #> $kappa #> [1] 4.637206 #>"},{"path":"https://tobiste.github.io/structr/reference/drillcore_orientation.html","id":null,"dir":"Reference","previous_headings":"","what":"Orientation of structures from drill core orientation angles — drillcore_orientation","title":"Orientation of structures from drill core orientation angles — drillcore_orientation","text":"Calculates orientation plane line internal core angles ( alpha, beta, gamma) oriented drill cores","code":""},{"path":"https://tobiste.github.io/structr/reference/drillcore_orientation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Orientation of structures from drill core orientation angles — drillcore_orientation","text":"","code":"drillcore_orientation(azi, inc, alpha, beta, gamma = NULL)"},{"path":"https://tobiste.github.io/structr/reference/drillcore_orientation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Orientation of structures from drill core orientation angles — drillcore_orientation","text":"azi numeric. Azimuth drill core axis orientation degrees (measured clockwise North). inc numeric. Inclination drill core axis degrees (Note: negative values downward). alpha numeric vector. Alpha angle degrees beta numeric vector. Beta angle degrees gamma numeric. (optional). Gamma angle degrees","code":""},{"path":"https://tobiste.github.io/structr/reference/drillcore_orientation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Orientation of structures from drill core orientation angles — drillcore_orientation","text":"object class \"plane\". gamma specified, \"line\" object returned.","code":""},{"path":"https://tobiste.github.io/structr/reference/drillcore_orientation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Orientation of structures from drill core orientation angles — drillcore_orientation","text":"","code":"azi <- 225 inc <- -45 drillcore_orientation(azi, inc, 60, 320) #> Plane object (n = 1): #> dip_direction           dip  #>      25.00392      70.02959  drillcore_orientation(azi, inc, 45, 220) #> Plane object (n = 1): #> dip_direction           dip  #>     333.24890      34.77544   # multiple alpha-beta measurements plot(Line(azi, -inc), lab = \"core-axis\")  res <- drillcore_orientation(azi, inc, alpha = c(60, 45), beta = c(320, 220)) points(res, col = 2:3) text(res, labels = c(\"A\", \"B\"), col = 2:3, pos = 4)"},{"path":"https://tobiste.github.io/structr/reference/eigen-spherical.html","id":null,"dir":"Reference","previous_headings":"","what":"Eigenvalues and Eigenvectors of a Set of Vectors — eigen-spherical","title":"Eigenvalues and Eigenvectors of a Set of Vectors — eigen-spherical","text":"Decomposition Orientation Tensor Eigenvectors Eigenvalues","code":""},{"path":"https://tobiste.github.io/structr/reference/eigen-spherical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Eigenvalues and Eigenvectors of a Set of Vectors — eigen-spherical","text":"","code":"# S3 method for class 'spherical' eigen(x, scaled = FALSE)  eigen(x, ...)"},{"path":"https://tobiste.github.io/structr/reference/eigen-spherical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Eigenvalues and Eigenvectors of a Set of Vectors — eigen-spherical","text":"x Object class \"Vec3\", \"Line\" \"Plane\" scaled logical. Whether Eigenvectors scaled Eigenvalues (effective x Cartesian coordinates). ... arguments passed functions","code":""},{"path":"https://tobiste.github.io/structr/reference/eigen-spherical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Eigenvalues and Eigenvectors of a Set of Vectors — eigen-spherical","text":"list containing values Eigenvalues vectors Eigenvectors coordinate system x","code":""},{"path":[]},{"path":"https://tobiste.github.io/structr/reference/eigen-spherical.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Eigenvalues and Eigenvectors of a Set of Vectors — eigen-spherical","text":"","code":"set.seed(20250411) mu <- rvmf(n = 1) x <- rfb(100, mu = mu, k = 1, A = diag(c(10, 0, 0))) x_eigen <- eigen(x) x_eigen #> eigen() decomposition #> $values #> [1] 53.71869 41.03461  5.24670 #>  #> $vectors #> Vector (Vec3) object (n = 3): #>              x          y          z #> [1,] 0.7405209 -0.1417393 -0.6569161 #> [2,] 0.6144916  0.5385685  0.5764929 #> [3,] 0.2720827 -0.8305745  0.4859188 #>  plot(x, col = \"grey\") points(mu, labels = \"mu\", col = 4) #> Warning: \"labels\" is not a graphical parameter points(x_eigen$vectors, col = c(1, 2, 3), labels = c(\"E1\", \"E2\", \"E3\")) #> Warning: \"labels\" is not a graphical parameter"},{"path":"https://tobiste.github.io/structr/reference/example_lines.html","id":null,"dir":"Reference","previous_headings":"","what":"Example lines — example_lines","title":"Example lines — example_lines","text":"example data set","code":""},{"path":"https://tobiste.github.io/structr/reference/example_lines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example lines — example_lines","text":"","code":"data('example_lines')"},{"path":"https://tobiste.github.io/structr/reference/example_lines.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example lines — example_lines","text":"object class data.frame","code":""},{"path":"https://tobiste.github.io/structr/reference/example_lines.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example lines — example_lines","text":"","code":"data(\"example_lines\") head(example_lines) #> # A tibble: 6 × 4 #>   trend plunge quality feature_type #>   <dbl>  <dbl>   <dbl> <chr>        #> 1    54     13       3 stretching   #> 2    61     15       3 stretching   #> 3    74     14      NA stretching   #> 4    80     19      NA stretching   #> 5    63     17      NA stretching   #> 6    76     10      NA stretching"},{"path":"https://tobiste.github.io/structr/reference/example_planes.html","id":null,"dir":"Reference","previous_headings":"","what":"Example planes — example_planes","title":"Example planes — example_planes","text":"example data set","code":""},{"path":"https://tobiste.github.io/structr/reference/example_planes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example planes — example_planes","text":"","code":"data('example_planes')"},{"path":"https://tobiste.github.io/structr/reference/example_planes.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example planes — example_planes","text":"object class data.frame","code":""},{"path":"https://tobiste.github.io/structr/reference/example_planes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example planes — example_planes","text":"","code":"data(\"example_planes\") head(example_planes) #> # A tibble: 6 × 4 #>   dipdir   dip quality feature_type #>    <dbl> <dbl>   <dbl> <chr>        #> 1    142    52       3 foliation    #> 2    135    43       3 foliation    #> 3    148    42       3 foliation    #> 4    150    46       3 foliation    #> 5    139    51       3 foliation    #> 6    158    51       3 foliation"},{"path":"https://tobiste.github.io/structr/reference/fabric_indexes.html","id":null,"dir":"Reference","previous_headings":"","what":"Fabric intensity and shape indices — fabric_indexes","title":"Fabric intensity and shape indices — fabric_indexes","text":"Fabric intensity shape indices","code":""},{"path":"https://tobiste.github.io/structr/reference/fabric_indexes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fabric intensity and shape indices — fabric_indexes","text":"","code":"fabric_indexes(x)"},{"path":"https://tobiste.github.io/structr/reference/fabric_indexes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fabric intensity and shape indices — fabric_indexes","text":"x object class \"Vec3\", \"Line\", \"Plane\".","code":""},{"path":"https://tobiste.github.io/structr/reference/fabric_indexes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fabric intensity and shape indices — fabric_indexes","text":"numeric vector containing fabric shape intensity indices: P Point (Vollmer 1990). Range: (0, 1) G Girdle (Vollmer 1990). Range: (0, 1) R Random (Vollmer 1990). Range: (0, 1) B cylindricity (Vollmer 1990). Range: (0, 1) C cylindricity Fabric strength (Woodcock 1977). Rrange: (0, Inf) cylindricity Fabric intensity (Lisle 1985). Range: (0, 5) D \"distance\" uniformity, linear R P, R G (Vollmer 2020). Range: (0, 1). End members : uniform D = 0, girdle D = 0.5, cluster D = 1. 99% level test uniformity sample size 300 D = 0.1.","code":""},{"path":[]},{"path":"https://tobiste.github.io/structr/reference/fabric_indexes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fabric intensity and shape indices — fabric_indexes","text":"","code":"set.seed(1) mu <- Line(120, 50) x <- rvmf(100, mu = mu, k = 1) fabric_indexes(x) #>          P          G          R          B          C          I          D  #> 0.06422311 0.04487228 0.89090461 0.10909539 0.25604683 2.45025303 0.07790319"},{"path":"https://tobiste.github.io/structr/reference/fault-tensor.html","id":null,"dir":"Reference","previous_headings":"","what":"Fault displacement tensor — fault-tensor","title":"Fault displacement tensor — fault-tensor","text":"Creates fault displacement tensor displacement components. dip direction know, tensor rotated geographic reference frame.","code":""},{"path":"https://tobiste.github.io/structr/reference/fault-tensor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fault displacement tensor — fault-tensor","text":"","code":"fault_tensor(h, s, v, dip_direction = NULL)  fault_tensor_decomposition(ftensor, dip_direction = NULL)"},{"path":"https://tobiste.github.io/structr/reference/fault-tensor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fault displacement tensor — fault-tensor","text":"h, s, v numeric. heave, strike-slip, vertical throw displacement dip_direction (optional) dip direction degrees. ftensor Fault displacement tensor. 3x3 matrix. NULL, fault tensor given fault displacement coordinates. Otherwise, tensor geographic reference frame.","code":""},{"path":"https://tobiste.github.io/structr/reference/fault-tensor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fault displacement tensor — fault-tensor","text":"fault_tensor() returns 3x3 matrix class \"ftensor\" containing fault displacement tensor. fault_tensor_analysis() returns list containing principal fault displacement tensor fault orientation.","code":""},{"path":"https://tobiste.github.io/structr/reference/fault-tensor.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fault displacement tensor — fault-tensor","text":"x axis tensor = heave, y = strike slip, z = vertical throw (positive thrusting, negative normal faulting) principal fault displacement tensor. can rotated fault plane orientation retrieve slip components rake. fault displacement tensor gives displacements directions following properties: square root tensor's trace (.e. sum diagonal elements) equals net slip fault plane. determinant tensor relates volumetric strain : det(F) - 1, (fault_tensor_decomposition()) retrieves principal fault displacement tensor using Singular Value Decomposition Matrix fault orientation dip direction known. orientation net-slip vector lineation component fault orientation.","code":""},{"path":"https://tobiste.github.io/structr/reference/fault-tensor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fault displacement tensor — fault-tensor","text":"","code":"A_princ <- fault_tensor(s = 2, v = -5, h = 3) print(A_princ) #>      [,1] [,2] [,3] #> [1,]    3    0    0 #> [2,]    0    2    0 #> [3,]    0    0   -5 #> attr(,\"class\") #> [1] \"matrix\"  \"array\"   \"ftensor\" det(A_princ) #> [1] -30  A_geo <- fault_tensor(s = 2, v = -5, h = 3, dip_direction = 45) print(A_geo) #>         [,1]      [,2] [,3] #> [1,] 2.12132  1.414214    0 #> [2,] 2.12132 -1.414214    0 #> [3,] 0.00000  0.000000   -5 #> attr(,\"class\") #> [1] \"matrix\"  \"array\"   \"ftensor\" det(A_geo) #> [1] 30  fault_tensor_decomposition(A_geo, dip_direction = 45) #> $displacements #>           dip    delta     rake verticalthrow horizontalthrow heave  dipslip #> [1,] 300.9638 56.30993 71.06818            -5        3.605551     3 5.830952 #>      strikeslip  netslip #> [1,]          2 6.164414 #>  #> $fault #> Fault object (n = 1): #> dip_direction           dip       azimuth        plunge         sense  #>      45.00000     300.96376     258.69007      54.20424      -1.00000  #>  #> $strain_tensor #>      [,1] [,2] [,3] #> [1,]  3.0 -1.5 -1.5 #> [2,] -1.0  1.0 -1.0 #> [3,]  2.5  2.5 15.0 #>  #> $volumetric_strain #> [1] 19 #>  #> $shear_strain #> [1] 5.196152 #>"},{"path":"https://tobiste.github.io/structr/reference/fault_analysis.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple fault analysis — fault_analysis","title":"Simple fault analysis — fault_analysis","text":"Calculates PT-axes, kinematic plane (M), dihedra separation plane (d)","code":""},{"path":"https://tobiste.github.io/structr/reference/fault_analysis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple fault analysis — fault_analysis","text":"","code":"fault_analysis(x, ptangle = 90)"},{"path":"https://tobiste.github.io/structr/reference/fault_analysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple fault analysis — fault_analysis","text":"x object class \"Fault\" ptangle numeric. angle P T axes degrees (90° default).","code":""},{"path":"https://tobiste.github.io/structr/reference/fault_analysis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simple fault analysis — fault_analysis","text":"list","code":""},{"path":"https://tobiste.github.io/structr/reference/fault_analysis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simple fault analysis — fault_analysis","text":"","code":"f <- Fault(c(120, 120, 100), c(60, 60, 50), c(110, 25, 30), c(58, 9, 23), c(1, -1, 1)) fault_analysis(f) #> $p #> Line object (n = 3): #>       azimuth   plunge #> [1,] 314.9694 75.19695 #> [2,] 248.4032 15.30354 #> [3,] 342.4517 46.65113 #>  #> $t #> Line object (n = 3): #>       azimuth   plunge #> [1,] 116.2068 14.04837 #> [2,] 345.9417 25.61490 #> [3,] 241.3308 10.31892 #>  #> $m #> Plane object (n = 3): #>      dip_direction      dip #> [1,]      27.35344 85.42739 #> [2,]     310.64119 30.43222 #> [3,]     322.06010 48.49732 #>  #> $d #> Plane object (n = 3): #>      dip_direction      dip #> [1,]      289.7677 31.20915 #> [2,]      208.8622 83.16168 #> [3,]      210.2233 67.19865 #>"},{"path":"https://tobiste.github.io/structr/reference/fault_displacements.html","id":null,"dir":"Reference","previous_headings":"","what":"Fault displacement components — fault_displacements","title":"Fault displacement components — fault_displacements","text":"Calculate fault displacement (least three) components fault displacement system","code":""},{"path":"https://tobiste.github.io/structr/reference/fault_displacements.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fault displacement components — fault_displacements","text":"","code":"fault_displacements(   dip = NULL,   delta = NULL,   rake = NULL,   verticalthrow = NULL,   dipslip = NULL,   heave = NULL,   netslip = NULL,   horizontalthrow = NULL,   strikeslip = NULL )"},{"path":"https://tobiste.github.io/structr/reference/fault_displacements.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fault displacement components — fault_displacements","text":"dip fault's dip angle (degrees) delta angle horizontal displacement vector fault's strike (degrees) rake (degrees) verticalthrow vertical throw dipslip dip slip component heave apparent horizontal offset perpendicular strike netslip offset fault plane parallel fault's motion direction horizontalthrow apparent horizontal offset parallel fault's motion direction strikeslip strike-slip component","code":""},{"path":"https://tobiste.github.io/structr/reference/fault_displacements.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fault displacement components — fault_displacements","text":"array","code":""},{"path":"https://tobiste.github.io/structr/reference/fault_displacements.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fault displacement components — fault_displacements","text":"see vignette description fault displacement components","code":""},{"path":"https://tobiste.github.io/structr/reference/fault_displacements.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fault displacement components — fault_displacements","text":"","code":"if (FALSE) { # \\dontrun{ fault_displacements(strikeslip = 2, verticalthrow = -5, heave = 3) } # }"},{"path":"https://tobiste.github.io/structr/reference/fault_from_rake.html","id":null,"dir":"Reference","previous_headings":"","what":"Fault from plane and rake — Fault_from_rake","title":"Fault from plane and rake — Fault_from_rake","text":"Fault plane rake","code":""},{"path":"https://tobiste.github.io/structr/reference/fault_from_rake.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fault from plane and rake — Fault_from_rake","text":"","code":"Fault_from_rake(p, rake, ...)"},{"path":"https://tobiste.github.io/structr/reference/fault_from_rake.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fault from plane and rake — Fault_from_rake","text":"p object class \"Plane\" rake Angle degrees range  −180° 180° ... optional arguments passed Fault()","code":""},{"path":"https://tobiste.github.io/structr/reference/fault_from_rake.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fault from plane and rake — Fault_from_rake","text":"\"Fault\" object","code":""},{"path":"https://tobiste.github.io/structr/reference/fault_from_rake.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fault from plane and rake — Fault_from_rake","text":"Rake used describe direction fault motion respect strike (measured anticlockwise horizontal, positive; values −180° 180°): left-lateral strike slip: rake near 0° right-lateral strike slip: rake near 180° normal: rake near −90° reverse/thrust: rake near +90°","code":""},{"path":"https://tobiste.github.io/structr/reference/fault_from_rake.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fault from plane and rake — Fault_from_rake","text":"","code":"Fault_from_rake(Plane(c(120, 120, 100), c(60, 60, 50)), c(84.7202, -10, 30)) #> Fault object (n = 3): #>      dip_direction dip   azimuth    plunge sense #> [1,]           120  60 109.52858 59.581591     1 #> [2,]           120  60 204.96163  8.649165    -1 #> [3,]           100  50  30.36057 22.521012     1"},{"path":"https://tobiste.github.io/structr/reference/fisher_ftest.html","id":null,"dir":"Reference","previous_headings":"","what":"Test of mean orientations — fisher_ftest","title":"Test of mean orientations — fisher_ftest","text":"Test null-hypothesis samples drawn Fisher population.","code":""},{"path":"https://tobiste.github.io/structr/reference/fisher_ftest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test of mean orientations — fisher_ftest","text":"","code":"fisher_ftest(x, y, alpha = 0.05, na.rm = TRUE)"},{"path":"https://tobiste.github.io/structr/reference/fisher_ftest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test of mean orientations — fisher_ftest","text":"x, y objects class \"Vec3\", \"Line\", \"Plane\". alpha numeric. Significance level confidence angle (default 0.05 95% confidence angle). na.rm logical. Whether NA values removed computation proceeds.","code":""},{"path":"https://tobiste.github.io/structr/reference/fisher_ftest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test of mean orientations — fisher_ftest","text":"list indicating F-statistic p-value.","code":""},{"path":"https://tobiste.github.io/structr/reference/fisher_ftest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test of mean orientations — fisher_ftest","text":"","code":"set.seed(20250411) x <- rvmf(100, mu = Line(120, 50), k = 20) y <- rvmf(100, mu = Line(180, 45), k = 20)  stereoplot() stereo_point(x, col = 1) stereo_point(y, col = 2)   fisher_ftest(x, y) #> Reject null-hypothesis #>    F stat   p-value  #> 264.17684   3.01851"},{"path":"https://tobiste.github.io/structr/reference/fisher_statistics.html","id":null,"dir":"Reference","previous_headings":"","what":"Fisher's statistics — fisher_statistics","title":"Fisher's statistics — fisher_statistics","text":"Estimates concentration parameter, angular standard deviation, confidence limit.","code":""},{"path":"https://tobiste.github.io/structr/reference/fisher_statistics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fisher's statistics — fisher_statistics","text":"","code":"fisher_statistics(x, w = NULL, alpha = 0.05, na.rm = TRUE)"},{"path":"https://tobiste.github.io/structr/reference/fisher_statistics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fisher's statistics — fisher_statistics","text":"x object class \"Vec3\", \"Line\", \"Plane\". w numeric. Optional weights observation. alpha numeric. Significance level confidence angle (default 0.05 95% confidence angle). na.rm logical. Whether NA values removed computation proceeds.","code":""},{"path":"https://tobiste.github.io/structr/reference/fisher_statistics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fisher's statistics — fisher_statistics","text":"list, \"k\" estimated concentration parameter \\(\\kappa\\) von Mises-Fisher distribution \"csd\" estimated angular standard deviation enclosing 63% orientation data. Angle degrees x spherical object, raidan otherwise. \"a95\" Confidence limit given p. Angle degrees x spherical object, raidan otherwise.","code":""},{"path":"https://tobiste.github.io/structr/reference/fisher_statistics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fisher's statistics — fisher_statistics","text":"","code":"set.seed(20250411) x <- rvmf(100, mu = Line(120, 50), k = 5) fisher_statistics(x) #> $k #> [1] 4.416173 #>  #> $csd #> [1] 38.54446 #>  #> $csd_2s #> [1] 66.62006 #>  #> $alpha #> [1] 7.640117 #>"},{"path":"https://tobiste.github.io/structr/reference/ggMohr.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Mohr Circle in ggplots — ggMohr","title":"Plot Mohr Circle in ggplots — ggMohr","text":"Plot Mohr Circle ggplots","code":""},{"path":"https://tobiste.github.io/structr/reference/ggMohr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Mohr Circle in ggplots — ggMohr","text":"","code":"ggMohr(   sigma1,   sigma2,   sigma3,   coulomb = c(70, 0.6),   sliding = 0.81,   units = \"MPa\",   fill = \"gray\",   alpha = 0.5 )"},{"path":"https://tobiste.github.io/structr/reference/ggMohr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Mohr Circle in ggplots — ggMohr","text":"sigma1, sigma2, sigma3 numeric. Magnitudes major, intermediate, minor principal stresses coulomb numeric 2 element vector. Coulomb criterion containing cohesion coefficient sliding: (c(70, 0.6)) sliding Sliding criteria (0.81 default) units units sigma1, sigma2, sigma3 (\"MPa\" default). fill fill color Mohr circle alpha opacity Mohr circle","code":""},{"path":"https://tobiste.github.io/structr/reference/ggMohr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Mohr Circle in ggplots — ggMohr","text":"","code":"ggMohr(1025, 400, 250) #> Warning: is.na() applied to non-(list or vector) of type 'expression' #> Warning: is.na() applied to non-(list or vector) of type 'expression' #> Warning: is.na() applied to non-(list or vector) of type 'expression' #> Warning: is.na() applied to non-(list or vector) of type 'expression'"},{"path":"https://tobiste.github.io/structr/reference/ggframe.html","id":null,"dir":"Reference","previous_headings":"","what":"Stereoplot Perimeter — ggframe","title":"Stereoplot Perimeter — ggframe","text":"Adds frame stereographic projection","code":""},{"path":"https://tobiste.github.io/structr/reference/ggframe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stereoplot Perimeter — ggframe","text":"","code":"ggframe(n = 10000, color = \"black\", fill = NA, lwd = 1, ...)"},{"path":"https://tobiste.github.io/structr/reference/ggframe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stereoplot Perimeter — ggframe","text":"n integer. Resolution line. color, fill, lwd Graphical parameters ... optional graphical parameters passed ggplot2::geom_polygon()","code":""},{"path":"https://tobiste.github.io/structr/reference/ggstereo.html","id":null,"dir":"Reference","previous_headings":"","what":"Stereonet using ggplot — ggstereo","title":"Stereonet using ggplot — ggstereo","text":"Stereonet using ggplot","code":""},{"path":"https://tobiste.github.io/structr/reference/ggstereo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stereonet using ggplot — ggstereo","text":"","code":"ggstereo(   data = NULL,   mapping = aes(),   earea = TRUE,   centercross = TRUE,   grid = FALSE,   grid.spacing = 10,   grid.rot = 0,   ... )"},{"path":"https://tobiste.github.io/structr/reference/ggstereo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stereonet using ggplot — ggstereo","text":"data Default dataset use plot. already data.frame, converted one ggplot2::fortify(). specified, must supplied layer added plot. mapping Default list aesthetic mappings use plot. specified, must supplied layer added plot. earea logical. Whether projection equal-area (\"Schmidt net\") (TRUE, default), equal-angle (\"Wulff net\") (FALSE). centercross logical. Whether center cross added. grid logical. Whether gid added. grid.spacing numeric. Grid spacing degree grid.rot numeric. Angle (degrees) rotate grid. ... argument passed ggplot2::geom_polygon()","code":""},{"path":"https://tobiste.github.io/structr/reference/ggstereo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stereonet using ggplot — ggstereo","text":"ggplot","code":""},{"path":"https://tobiste.github.io/structr/reference/ggstereo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stereonet using ggplot — ggstereo","text":"","code":"if (require(\"mapproj\")) {   test_data <- rbind(     rvmf(100, mu = Line(90, 45), k = 10),     rvmf(50, mu = Line(0, 0), k = 20)   )    ggstereo(grid = TRUE) +     ggplot2::geom_point(data = gg(test_data), ggplot2::aes(x = x, y = y))    ggstereo(earea = FALSE, centercross = TRUE) +     ggplot2::geom_point(data = gg(test_data), ggplot2::aes(x = x, y = y)) } #> Loading required package: mapproj #> Loading required package: maps"},{"path":"https://tobiste.github.io/structr/reference/ggstereocontour.html","id":null,"dir":"Reference","previous_headings":"","what":"Stereonet contouring using ggplot — ggstereocontour","title":"Stereonet contouring using ggplot — ggstereocontour","text":"Stereonet contouring using ggplot","code":""},{"path":"https://tobiste.github.io/structr/reference/ggstereocontour.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stereonet contouring using ggplot — ggstereocontour","text":"","code":"geom_contour_stereo(   data,   ngrid = 200,   hw = NULL,   optimal_bw = c(\"cross\", \"rot\"),   norm = FALSE,   threshold = 0,   ... )  geom_contourf_stereo(   data,   ngrid = 200,   hw = NULL,   optimal_bw = c(\"cross\", \"rot\"),   norm = FALSE,   smooth = FALSE,   threshold = 0,   ... )"},{"path":"https://tobiste.github.io/structr/reference/ggstereocontour.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stereonet contouring using ggplot — ggstereocontour","text":"data Default dataset use plot. already data.frame, converted one ggplot2::fortify(). specified, must supplied layer added plot. ngrid integer. Resolution density calculation. hw numeric. Kernel bandwidth degree. optimal_bw character. Calculates optimal kernel bandwidth using cross-validation algorithm ('cross') rule--thumb ('rot') suggested Garcia-Portugues (2013). Ignored hw specified. norm logical. densities normalized? threshold numeric. Cut-low densities. ... arguments passed ggplot2::geom_contour(), ggplot2::geom_contour_filled(), ggplot2::geom_tile() smooth logical. Whether ggplot2::geom_tile() used plotting.","code":""},{"path":"https://tobiste.github.io/structr/reference/ggstereocontour.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stereonet contouring using ggplot — ggstereocontour","text":"ggplot","code":""},{"path":"https://tobiste.github.io/structr/reference/ggstereocontour.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Stereonet contouring using ggplot — ggstereocontour","text":"Garcia Portugues, E. (2013). Exact risk improvement bandwidth selectors kernel density estimation directional data. Electronic Journal Statistics, 7, 1655-1685.","code":""},{"path":"https://tobiste.github.io/structr/reference/ggstereocontour.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stereonet contouring using ggplot — ggstereocontour","text":"","code":"if (require(\"mapproj\")) {   test_data <- rbind(     rvmf(100, mu = Line(90, 45), k = 10),     rvmf(50, mu = Line(0, 0), k = 20)   )    ggstereo() +     geom_contourf_stereo(gg(test_data)) +     ggplot2::scale_fill_viridis_d(option = \"A\") +     # guides(fill = guide_colorsteps(barheight = unit(8, \"cm\"), show.limits = TRUE)) +     geom_contour_stereo(gg(test_data), color = \"grey\") +     ggplot2::geom_point(data = gg(test_data), ggplot2::aes(x = x, y = y), color = \"lightgrey\") +     ggframe()    ggstereo() +     geom_contourf_stereo(gg(test_data), norm = TRUE, bins = 50, threshold = .1) +     ggplot2::scale_fill_viridis_d(option = \"A\") } #> Warning: Contour data has duplicated x, y coordinates. #> ℹ 19800 duplicated rows have been dropped. #> Warning: Removed 11224 rows containing non-finite outside the scale range #> (`stat_contour_filled()`)."},{"path":"https://tobiste.github.io/structr/reference/gradient.html","id":null,"dir":"Reference","previous_headings":"","what":"Velocity gradient and Deformation gradient tensors — gradient","title":"Velocity gradient and Deformation gradient tensors — gradient","text":"Calculates velocity gradient tensor matrix logarithm  deformation gradient tensor divided given time, deformation gradient tensor accumulated time.","code":""},{"path":"https://tobiste.github.io/structr/reference/gradient.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Velocity gradient and Deformation gradient tensors — gradient","text":"","code":"velgrad_from_defgrad(R, time = 1)  defgrad_from_velgrad(V, time = 1, steps = 1)"},{"path":"https://tobiste.github.io/structr/reference/gradient.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Velocity gradient and Deformation gradient tensors — gradient","text":"R 3x3 matrix. Deformation gradient tensor. time numeric. Total time (default 1) V 3x3 matrix. Velocity gradient tensor. steps numeric. Time increments (default 1)","code":""},{"path":"https://tobiste.github.io/structr/reference/gradient.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Velocity gradient and Deformation gradient tensors — gradient","text":"3x3 matrix. steps > 1, list matrices returned.","code":""},{"path":"https://tobiste.github.io/structr/reference/gradient.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Velocity gradient and Deformation gradient tensors — gradient","text":"","code":"D <- defgrad_from_comp(xx = 2, xy = 1, zz = 0.5) L <- velgrad_from_defgrad(D, time = 10) L #>            [,1]       [,2]        [,3] #> [1,] 0.06931472 0.06931472  0.00000000 #> [2,] 0.00000000 0.00000000  0.00000000 #> [3,] 0.00000000 0.00000000 -0.06931472 defgrad_from_velgrad(L, time = 10, steps = 2) #> $`0` #>      [,1] [,2] [,3] #> [1,]    1    0    0 #> [2,]    0    1    0 #> [3,]    0    0    1 #> attr(,\"class\") #> [1] \"defgrad\" #>  #> $`2` #>          [,1]      [,2]      [,3] #> [1,] 1.148698 0.1486984 0.0000000 #> [2,] 0.000000 1.0000000 0.0000000 #> [3,] 0.000000 0.0000000 0.8705506 #> attr(,\"class\") #> [1] \"defgrad\" #>  #> $`4` #>          [,1]      [,2]      [,3] #> [1,] 1.319508 0.3195079 0.0000000 #> [2,] 0.000000 1.0000000 0.0000000 #> [3,] 0.000000 0.0000000 0.7578583 #> attr(,\"class\") #> [1] \"defgrad\" #>  #> $`6` #>          [,1]      [,2]     [,3] #> [1,] 1.515717 0.5157166 0.000000 #> [2,] 0.000000 1.0000000 0.000000 #> [3,] 0.000000 0.0000000 0.659754 #> attr(,\"class\") #> [1] \"defgrad\" #>  #> $`8` #>          [,1]      [,2]      [,3] #> [1,] 1.741101 0.7411011 0.0000000 #> [2,] 0.000000 1.0000000 0.0000000 #> [3,] 0.000000 0.0000000 0.5743492 #> attr(,\"class\") #> [1] \"defgrad\" #>  #> $`10` #>      [,1] [,2] [,3] #> [1,]    2    1  0.0 #> [2,]    0    1  0.0 #> [3,]    0    0  0.5 #> attr(,\"class\") #> [1] \"defgrad\" #>"},{"path":"https://tobiste.github.io/structr/reference/gray_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Example data from Gray et al. 1980 to find best small and great circle — gray_example","title":"Example data from Gray et al. 1980 to find best small and great circle — gray_example","text":"example data set","code":""},{"path":"https://tobiste.github.io/structr/reference/gray_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example data from Gray et al. 1980 to find best small and great circle — gray_example","text":"","code":"data('gray_example')"},{"path":"https://tobiste.github.io/structr/reference/gray_example.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example data from Gray et al. 1980 to find best small and great circle — gray_example","text":"object class data.frame","code":""},{"path":"https://tobiste.github.io/structr/reference/gray_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example data from Gray et al. 1980 to find best small and great circle — gray_example","text":"","code":"data(\"gray_example\") head(gray_example) #>   Strike Dip DipDir Facing     Type #> 1    142  58      W      L Cleavage #> 2    155  63      W      L Cleavage #> 3    166  82      W      L Cleavage #> 4    177  83      E      U Cleavage #> 5      9  68      E      U Cleavage #> 6     11  60      E      U Cleavage"},{"path":"https://tobiste.github.io/structr/reference/head-sphere.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the First or Last Parts of an Object — head-sphere","title":"Return the First or Last Parts of an Object — head-sphere","text":"Returns first last parts vector.","code":""},{"path":"https://tobiste.github.io/structr/reference/head-sphere.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the First or Last Parts of an Object — head-sphere","text":"","code":"head(x, n = 6L, ...)  tail(x, n = 6L, ...)  # S3 method for class 'spherical' head(x, n = 6L, ...)  # S3 method for class 'spherical' tail(x, n = 6L, ...)"},{"path":"https://tobiste.github.io/structr/reference/head-sphere.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the First or Last Parts of an Object — head-sphere","text":"x objects class \"Vec3\", \"Line\", \"Plane\", \"Pair\", \"Fault n integer vector length dim(x) (1,     non-dimensioned objects).  logical silently coerced     integer.  Values specify indices     selected corresponding dimension (along length)     object. positive value n[] includes first/last     n[] indices dimension, negative value     excludes last/first abs(n[]), including remaining     indices. NA non-specified values (length(n) <       length(dim(x))) select indices dimension. Must     contain least one non-missing value. ... arguments passed methods.","code":""},{"path":"https://tobiste.github.io/structr/reference/head-sphere.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return the First or Last Parts of an Object — head-sphere","text":"","code":"x <- rvmf(n = 10) head(x) #> Vector (Vec3) object (n = 6): #>              x           y          z #> [1,] 0.9307843 -0.01296615 -0.3653388 #> [2,] 0.8989307  0.12067458 -0.4211428 #> [3,] 0.8467819 -0.21375259  0.4871039 #> [4,] 0.6564684 -0.12517527  0.7438954 #> [5,] 0.9804523 -0.01043877 -0.1964796 #> [6,] 0.8138278 -0.13245998 -0.5658079 tail(x) #> Vector (Vec3) object (n = 6): #>              x           y          z #> [1,] 0.9804523 -0.01043877 -0.1964796 #> [2,] 0.8138278 -0.13245998 -0.5658079 #> [3,] 0.8560463  0.31518244  0.4096885 #> [4,] 0.9137032 -0.10559061  0.3924247 #> [5,] 0.9016009 -0.17649539  0.3949244 #> [6,] 0.7732423 -0.34899708  0.5294312"},{"path":"https://tobiste.github.io/structr/reference/inertia.html","id":null,"dir":"Reference","previous_headings":"","what":"Inertia tensor — inertia","title":"Inertia tensor — inertia","text":"Inertia tensor","code":""},{"path":"https://tobiste.github.io/structr/reference/inertia.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inertia tensor — inertia","text":"","code":"# S3 method for class 'spherical' inertia_tensor(x, w = NULL)  inertia_tensor(x, w = NULL)"},{"path":"https://tobiste.github.io/structr/reference/inertia.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inertia tensor — inertia","text":"x Object class \"Vec3\", \"Line\" \"Plane\" w numeric. weightings","code":""},{"path":"https://tobiste.github.io/structr/reference/inertia.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inertia tensor — inertia","text":"3 x 3 matrix","code":""},{"path":"https://tobiste.github.io/structr/reference/inertia.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Inertia tensor — inertia","text":"$$D = n - (x_i, y_i, z_i) (x_i, y_i, z_i)^T$$","code":""},{"path":[]},{"path":"https://tobiste.github.io/structr/reference/inertia.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inertia tensor — inertia","text":"","code":"set.seed(20250411) x <- rfb(100, mu = Line(120, 50), k = 1, A = diag(c(10, 0, 0))) inertia_tensor(x) #>           [,1]      [,2]      [,3] #> [1,]  90.29766 110.15643 105.23670 #> [2,] 110.15643  62.12422 101.80521 #> [3,] 105.23670 101.80521  47.57813"},{"path":"https://tobiste.github.io/structr/reference/lines.spherical.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Lines to a Plot — lines.spherical","title":"Add Lines to a Plot — lines.spherical","text":"Add Lines Plot","code":""},{"path":"https://tobiste.github.io/structr/reference/lines.spherical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Lines to a Plot — lines.spherical","text":"","code":"# S3 method for class 'spherical' lines(x, ...)"},{"path":"https://tobiste.github.io/structr/reference/lines.spherical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Lines to a Plot — lines.spherical","text":"x objects class \"Vec3\", \"Line\", \"Plane\", \"Pair\", \"Fault\". ... arguments passed graphics::lines()","code":""},{"path":"https://tobiste.github.io/structr/reference/lines.spherical.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Lines to a Plot — lines.spherical","text":"","code":"stereoplot() lines(rvmf(n = 5), d = runif(5, 0, 90), col = 1:5)"},{"path":"https://tobiste.github.io/structr/reference/ortensor.html","id":null,"dir":"Reference","previous_headings":"","what":"Orientation tensor — ortensor","title":"Orientation tensor — ortensor","text":"3D orientation tensor, characterize data distribution using eigenvalue method. See (Watson 1966, Scheidegger 1965).","code":""},{"path":"https://tobiste.github.io/structr/reference/ortensor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Orientation tensor — ortensor","text":"","code":"# S3 method for class 'spherical' ortensor(x, norm = TRUE, w = NULL)  ortensor(x, norm = TRUE, w = NULL)"},{"path":"https://tobiste.github.io/structr/reference/ortensor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Orientation tensor — ortensor","text":"x Object class \"Vec3\", \"Line\" \"Plane\" norm logical. Whether tensor normalized . w numeric. weightings","code":""},{"path":"https://tobiste.github.io/structr/reference/ortensor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Orientation tensor — ortensor","text":"matrix","code":""},{"path":"https://tobiste.github.io/structr/reference/ortensor.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Orientation tensor — ortensor","text":"normalized orientation tensor given $$D = \\frac{1}{n} (x_i, y_i, z_i) (x_i, y_i, z_i)^T$$ n = 1","code":""},{"path":[]},{"path":"https://tobiste.github.io/structr/reference/ortensor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Orientation tensor — ortensor","text":"","code":"set.seed(20250411) x <- rfb(100, mu = Line(120, 50), k = 1, A = diag(c(10, 0, 0))) ortensor(x) #>             [,1]        [,2]        [,3] #> [1,]  0.09093134 -0.10176191 -0.06927709 #> [2,] -0.10176191  0.37321792 -0.01738073 #> [3,] -0.06927709 -0.01738073  0.53585074"},{"path":"https://tobiste.github.io/structr/reference/pair_correct.html","id":null,"dir":"Reference","previous_headings":"","what":"Orthogonalization of plane and line measurement — pair_correct","title":"Orthogonalization of plane and line measurement — pair_correct","text":"line plane  rotated opposite directions half angle slip plane normal vector vector pperpendicular .","code":""},{"path":"https://tobiste.github.io/structr/reference/pair_correct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Orthogonalization of plane and line measurement — pair_correct","text":"","code":"misfit_pair(x)  correct_pair(x)"},{"path":"https://tobiste.github.io/structr/reference/pair_correct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Orthogonalization of plane and line measurement — pair_correct","text":"x object class \"Pair\" \"Fault\"","code":""},{"path":"https://tobiste.github.io/structr/reference/pair_correct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Orthogonalization of plane and line measurement — pair_correct","text":"misfit_pair returns list orthogonalized plane line measurements (3d vectors) misfit angles (radians). correct_pair returns orthogonalized vectors.","code":""},{"path":"https://tobiste.github.io/structr/reference/pair_correct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Orthogonalization of plane and line measurement — pair_correct","text":"","code":"p <- Pair(120, 60, 110, 58, correction = FALSE) misfit_pair(p) #> $fvec #> Vector (Vec3) object (n = 1): #>          x          y          z  #>  0.4306074 -0.7432627  0.5119940  #>  #> $lvec #> Vector (Vec3) object (n = 1): #>          x          y          z  #> -0.1752467  0.4876291  0.8552815  #>  #> $misfit #> [1] 0.02793105 #>   correct_pair(p) #> Pair object (n = 1): #> dip_direction           dip       azimuth        plunge  #>     120.08575      59.20326     109.76769      58.79085"},{"path":"https://tobiste.github.io/structr/reference/plot.spherical.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot spherical objects — plot.spherical","title":"Plot spherical objects — plot.spherical","text":"Plot spherical objects","code":""},{"path":"https://tobiste.github.io/structr/reference/plot.spherical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot spherical objects — plot.spherical","text":"","code":"# S3 method for class 'spherical' plot(x, upper.hem = FALSE, earea = TRUE, grid.params = list(), ...)"},{"path":"https://tobiste.github.io/structr/reference/plot.spherical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot spherical objects — plot.spherical","text":"x objects class \"Vec3\", \"Line\", \"Plane\", \"Pair\", \"Fault\". upper.hem logical. Whether projection shown upper hemisphere (TRUE) lower hemisphere (FALSE, default). earea logical. Projection, either TRUE Lambert equal-area projection (default), FALSE meridional stereographic projection. grid.params list. ... parameters passed stereo_point(), stereo_smallcircle(), stereo_greatcircle(), stereo_fault()","code":""},{"path":"https://tobiste.github.io/structr/reference/plot.spherical.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot spherical objects — plot.spherical","text":"","code":"plot(Line(c(90, 80), c(10, 75)), lab = c(\"L1\", \"L2\"))  plot(Plane(120, 30), col = \"red\")"},{"path":"https://tobiste.github.io/structr/reference/points.spherical.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Points to a Plot — points.spherical","title":"Add Points to a Plot — points.spherical","text":"Add Points Plot","code":""},{"path":"https://tobiste.github.io/structr/reference/points.spherical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Points to a Plot — points.spherical","text":"","code":"# S3 method for class 'spherical' points(x, upper.hem = FALSE, earea = TRUE, ...)"},{"path":"https://tobiste.github.io/structr/reference/points.spherical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Points to a Plot — points.spherical","text":"x objects class \"Vec3\", \"Line\", \"Plane\", \"Pair\", \"Fault\". upper.hem logical. Whether projection shown upper hemisphere (TRUE) lower hemisphere (FALSE, default). earea logical. Projection, either TRUE Lambert equal-area projection (default), FALSE meridional stereographic projection. ... arguments passed graphics::points()","code":""},{"path":"https://tobiste.github.io/structr/reference/points.spherical.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Points to a Plot — points.spherical","text":"","code":"stereoplot() points(rvmf(n = 100))  points(Plane(120, 30), col = \"red\")"},{"path":"https://tobiste.github.io/structr/reference/prepare-ggplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare points and lines for ggplot — prepare-ggplot","title":"Prepare points and lines for ggplot — prepare-ggplot","text":"Prepare points lines ggplot","code":""},{"path":"https://tobiste.github.io/structr/reference/prepare-ggplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare points and lines for ggplot — prepare-ggplot","text":"","code":"gg(x, ...)  ggl(x, ..., d = 90, n = 1000)"},{"path":"https://tobiste.github.io/structr/reference/prepare-ggplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare points and lines for ggplot — prepare-ggplot","text":"x objects class \"Vec3\", \"Line\", \"Plane\", \"Pair\", \"Fault\". ... <data-masking> Name-value pairs. name gives name column output. value can : vector length 1, recycled correct length. vector length current group (whole data frame ungrouped). NULL, remove column. data frame tibble, create multiple columns output. d numeric. Cone angle (small circle radius) degrees. 90 (default) produces great circles. n integer. Resolution line.","code":""},{"path":"https://tobiste.github.io/structr/reference/prepare-ggplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare points and lines for ggplot — prepare-ggplot","text":"data.frame","code":""},{"path":"https://tobiste.github.io/structr/reference/prepare-ggplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare points and lines for ggplot — prepare-ggplot","text":"","code":"if (require(\"mapproj\")) {   x <- Plane(120, 85)   ggstereo() +     ggplot2::geom_point(data = gg(x), ggplot2::aes(x, y), color = \"red\") +     ggplot2::geom_path(data = ggl(x), ggplot2::aes(x, y), color = \"red\")    x2 <- Line(120, 5)   ggstereo() +     ggplot2::geom_point(data = gg(x2), ggplot2::aes(x, y), color = \"darkgreen\") +     ggplot2::geom_path(       data = ggl(x2, d = 8),       ggplot2::aes(x, y, group = group), color = \"darkgreen\"     )    x3 <- Plane(137, 71)   ggstereo() +     ggplot2::geom_point(data = gg(x3), ggplot2::aes(x, y), color = \"darkgreen\") +     ggplot2::geom_path(       data = ggl(x3, d = 90),       ggplot2::aes(x, y, group = group), color = \"darkgreen\", lwd = 1     ) +     ggplot2::geom_path(       data = ggl(x3, d = 90 + 11),       ggplot2::aes(x, y, group = group, color = \"sde <90\")     ) +     ggplot2::geom_path(       data = ggl(x3, d = 90 - 11),       ggplot2::aes(x, y, group = group, color = \"sde >90\")     ) }"},{"path":"https://tobiste.github.io/structr/reference/rfb.html","id":null,"dir":"Reference","previous_headings":"","what":"Spherical Fisher-Bingham distribution — rfb","title":"Spherical Fisher-Bingham distribution — rfb","text":"Simulation random values spherical Fisher-Bingham distribution.","code":""},{"path":"https://tobiste.github.io/structr/reference/rfb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spherical Fisher-Bingham distribution — rfb","text":"","code":"rfb(n = 100, mu = Vec3(1, 0, 0), k = 5, A)"},{"path":"https://tobiste.github.io/structr/reference/rfb.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Spherical Fisher-Bingham distribution — rfb","text":"Adapted Directional::rfb()","code":""},{"path":"https://tobiste.github.io/structr/reference/rfb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spherical Fisher-Bingham distribution — rfb","text":"n integer. number random samples generated mu object class \"Vec3\", \"Line\" \"Plane\" k numeric. concentration parameter (\\(\\kappa\\)) symmetric matrix","code":""},{"path":[]},{"path":"https://tobiste.github.io/structr/reference/rfb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spherical Fisher-Bingham distribution — rfb","text":"","code":"set.seed(20250411) x <- rfb(100, mu = Line(120, 50), k = 5, A = diag(c(-1, 0, 1))) plot(x)"},{"path":"https://tobiste.github.io/structr/reference/rhr.html","id":null,"dir":"Reference","previous_headings":"","what":"Converts strike into dip direction using right-hand rule — rhr","title":"Converts strike into dip direction using right-hand rule — rhr","text":"Converts strike dip direction using right-hand rule","code":""},{"path":"https://tobiste.github.io/structr/reference/rhr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converts strike into dip direction using right-hand rule — rhr","text":"","code":"rhr2dd(strike)  dd2rhr(dipdirection)"},{"path":"https://tobiste.github.io/structr/reference/rhr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converts strike into dip direction using right-hand rule — rhr","text":"strike strike direction degrees dipdirection strike direction degrees","code":""},{"path":"https://tobiste.github.io/structr/reference/rkent.html","id":null,"dir":"Reference","previous_headings":"","what":"Kent distribution — rkent","title":"Kent distribution — rkent","text":"Simulation random values spherical Kent distribution.","code":""},{"path":"https://tobiste.github.io/structr/reference/rkent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Kent distribution — rkent","text":"","code":"rkent(n = 100, mu = Vec3(1, 0, 0), k = 5, b)"},{"path":"https://tobiste.github.io/structr/reference/rkent.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Kent distribution — rkent","text":"Adapted Directional::rkent()","code":""},{"path":"https://tobiste.github.io/structr/reference/rkent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Kent distribution — rkent","text":"n integer. number random samples generated mu Mean orientation. object class description \"Vec3()\", \"Line()\", \"Plane\" k numeric. concentration parameter (\\(\\kappa\\)) b numeric. \\(\\beta\\) (ellipticity): \\(0 \\leq \\beta < \\kappa\\)","code":""},{"path":[]},{"path":"https://tobiste.github.io/structr/reference/rkent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Kent distribution — rkent","text":"","code":"set.seed(20250411) x <- rkent(100, mu = Line(120, 50), k = 5, b = 1) plot(x)"},{"path":"https://tobiste.github.io/structr/reference/runif.spherical.html","id":null,"dir":"Reference","previous_headings":"","what":"Uniformly distributed vectors — runif.spherical","title":"Uniformly distributed vectors — runif.spherical","text":"Create uniformly distributed vectors using algorithm Spherical Fibonacci Spiral points sphere algorithm (John Burkardt) Golden Section Spiral points sphere.","code":""},{"path":"https://tobiste.github.io/structr/reference/runif.spherical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uniformly distributed vectors — runif.spherical","text":"","code":"runif.spherical(   n = 100,   class = c(\"Vec3\", \"Line\", \"Plane\"),   method = c(\"gss\", \"sfs\", \"rotasym\") )"},{"path":"https://tobiste.github.io/structr/reference/runif.spherical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uniformly distributed vectors — runif.spherical","text":"n integer. number random samples generated class character. Coordinate class output vectors. method character. algorithm generating uniformly distributed vectors. Either \"sfs\" \"Spherical Fibonacci Spiral points sphere\", \"gss\" \"Golden Section Spiral points sphere\", algorithm rotasym::r_unif_sphere() rotasym package.","code":""},{"path":"https://tobiste.github.io/structr/reference/runif.spherical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uniformly distributed vectors — runif.spherical","text":"object class specified \"class\" argument","code":""},{"path":"https://tobiste.github.io/structr/reference/runif.spherical.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Uniformly distributed vectors — runif.spherical","text":"\"sfs\" algorithm John Burkardt (http://people.sc.fsu.edu/~jburkardt/), \"gss  http://www.softimageblog.com/archives/115","code":""},{"path":[]},{"path":"https://tobiste.github.io/structr/reference/runif.spherical.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Uniformly distributed vectors — runif.spherical","text":"","code":"set.seed(20250411) x1 <- runif.spherical(n = 100, \"Line\", method = \"sfs\") plot(x1)   x2 <- runif.spherical(n = 100, \"Line\", method = \"gss\") plot(x2)  x3 <- runif.spherical(n = 100, \"Line\", method = \"rotasym\") plot(x3)"},{"path":"https://tobiste.github.io/structr/reference/sigma13.html","id":null,"dir":"Reference","previous_headings":"","what":"Principle stresses — sigma13","title":"Principle stresses — sigma13","text":"calculates magnitudes directions principal stresses S1 S2","code":""},{"path":"https://tobiste.github.io/structr/reference/sigma13.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Principle stresses — sigma13","text":"","code":"sigma13(sigmaX, sigmaZ, tauXZ)"},{"path":"https://tobiste.github.io/structr/reference/sigma13.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Principle stresses — sigma13","text":"sigmaX numeric. Magnitude normal stress acting horizontal direction sigmaZ numeric. Magnitude normal stress acting vertical direction tauXZ numeric. Magnitude shear stress acting plane \"sigmaX\"","code":""},{"path":"https://tobiste.github.io/structr/reference/sigma13.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Principle stresses — sigma13","text":"four-element list containing \"sigma1\" magnitude major principal stress \"sigma3\" magnitude minor principal stress \"theta1\" direction major principal stress (degrees) \"theta3\" direction minor principal stress (degrees)","code":""},{"path":"https://tobiste.github.io/structr/reference/sigma13.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Principle stresses — sigma13","text":"Kyle Elmy Jim Kaklamanos","code":""},{"path":"https://tobiste.github.io/structr/reference/sigma13.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Principle stresses — sigma13","text":"","code":"sigma13(sigmaX = 80, sigmaZ = 120, tauXZ = 20) #> $sigma1 #> [1] 128.2843 #>  #> $sigma3 #> [1] 71.71573 #>  #> $theta1 #> [1] 22.5 #>  #> $theta3 #> [1] 112.5 #>"},{"path":"https://tobiste.github.io/structr/reference/sigmaTrans.html","id":null,"dir":"Reference","previous_headings":"","what":"Stress transformation — sigmaTrans","title":"Stress transformation — sigmaTrans","text":"calculates magnitudes normal stress shear stress","code":""},{"path":"https://tobiste.github.io/structr/reference/sigmaTrans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stress transformation — sigmaTrans","text":"","code":"sigmaTrans(   theta,   sigmaX = NA,   sigmaZ = NA,   tauXZ = NA,   sigma1 = NA,   sigma3 = NA )"},{"path":"https://tobiste.github.io/structr/reference/sigmaTrans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stress transformation — sigmaTrans","text":"theta numeric. Angles (degrees); defaults 0-180 increments 1 sigmaX numeric. Magnitude normal stress acting horizontal direction sigmaZ numeric. Magnitude normal stress acting vertical direction tauXZ numeric. Magnitude shear stress acting plane \"sigmaX\" sigma1 numeric. Magnitude major principal stress sigma3 numeric. Magnitude minor principal stress","code":""},{"path":"https://tobiste.github.io/structr/reference/sigmaTrans.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stress transformation — sigmaTrans","text":"two-element list containing \"sigma\" normal stress inclined plane \"tau\" shear stress inclined plane","code":""},{"path":"https://tobiste.github.io/structr/reference/sigmaTrans.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Stress transformation — sigmaTrans","text":"addition theta, One following two sets data must entered: \"sigmaX\", \"sigmaZ\", \"tauXZ\" \"sigma1\", \"sigma3\" theta entered conjunction \"sigmaX\", \"sigmaZ\", \"tauXZ\", interpreted angle inclination horizontal.  theta entered conjunction principal stresses, interpreted angle inclination major principal plane.","code":""},{"path":"https://tobiste.github.io/structr/reference/sigmaTrans.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Stress transformation — sigmaTrans","text":"Kyle Elmy Jim Kaklamanos","code":""},{"path":"https://tobiste.github.io/structr/reference/sigmaTrans.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stress transformation — sigmaTrans","text":"","code":"sigmaTrans(sigmaX = 80, sigmaZ = 120, tauXZ = 20, theta = 78) #> $sigma #> [1] 89.86382 #>  #> $tau #> [1] 26.40564 #>"},{"path":"https://tobiste.github.io/structr/reference/simongomez.html","id":null,"dir":"Reference","previous_headings":"","what":"Example data set — simongomez","title":"Example data set — simongomez","text":"example data set","code":""},{"path":"https://tobiste.github.io/structr/reference/simongomez.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example data set — simongomez","text":"","code":"data('simongomez')"},{"path":"https://tobiste.github.io/structr/reference/simongomez.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example data set — simongomez","text":"object class data.frame","code":""},{"path":"https://tobiste.github.io/structr/reference/simongomez.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example data set — simongomez","text":"","code":"data(\"simongomez\") head(simongomez) #>   id Strike Dip Dip_direction Rake Direction sense dipdir ve #> 1  1     40  63             W   13         N     S    130 -1 #> 2  2    163  86             W    3         S     D    253  1 #> 3  3     37  84             W   14         N     S    127 -1 #> 4  4     25  83             E   11         N     S    115 -1 #> 5  5     38  85             E    7         N     S    128 -1 #> 6  6    148  72             W   16         S     D    238  1"},{"path":"https://tobiste.github.io/structr/reference/split_trailing_letters.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse measurement and direction strings — split_trailing_letters","title":"Parse measurement and direction strings — split_trailing_letters","text":"Parse measurement direction strings","code":""},{"path":"https://tobiste.github.io/structr/reference/split_trailing_letters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse measurement and direction strings — split_trailing_letters","text":"","code":"split_trailing_letters(x)"},{"path":"https://tobiste.github.io/structr/reference/split_trailing_letters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse measurement and direction strings — split_trailing_letters","text":"x character number","code":""},{"path":"https://tobiste.github.io/structr/reference/split_trailing_letters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse measurement and direction strings — split_trailing_letters","text":"list","code":""},{"path":"https://tobiste.github.io/structr/reference/split_trailing_letters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse measurement and direction strings — split_trailing_letters","text":"","code":"test <- c(\"45NW\", \"4SE\") split_trailing_letters(test) #> $measurement #> 45NW  4SE  #>   45    4  #>  #> $direction #> 45NW  4SE  #> \"NW\" \"SE\"  #>"},{"path":"https://tobiste.github.io/structr/reference/stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Statistical estimators of the distribution of a set of vectors — stats","title":"Statistical estimators of the distribution of a set of vectors — stats","text":"Statistical estimators distribution set vectors","code":""},{"path":"https://tobiste.github.io/structr/reference/stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Statistical estimators of the distribution of a set of vectors — stats","text":"","code":"# S3 method for class 'spherical' mean(x, w = NULL, na.rm = TRUE)  mean(x, ...)  sd(x, ...)  # S3 method for class 'spherical' sd(x, w = NULL, na.rm = TRUE)  var(x, ...)  # S3 method for class 'spherical' var(x, w = NULL, na.rm = TRUE)  confidence_angle(x, w = NULL, alpha = 0.05, na.rm = TRUE)  rdegree(x, w = NULL, na.rm = FALSE)  sd_error(x, w = NULL, na.rm = FALSE)  delta(x, w = NULL, na.rm = TRUE)  estimate_k(x, w = NULL, na.rm = FALSE)"},{"path":"https://tobiste.github.io/structr/reference/stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Statistical estimators of the distribution of a set of vectors — stats","text":"x object class \"Vec3\", \"Line\", \"Plane\". w numeric. Optional weights observation. na.rm logical. Whether NA values removed computation proceeds. ... arguments passed function call alpha numeric. Significance level confidence angle (default 0.05 95% confidence angle).","code":""},{"path":"https://tobiste.github.io/structr/reference/stats.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Statistical estimators of the distribution of a set of vectors — stats","text":"mean returns spherical mean set vectors (object class x). var returns spherical variance (numeric), based resultant length (Mardia 1972). delta returns cone angle containing ~63% data (degree x \"Plane\" \"Line\", radians otherwise). enough large sample approaches angular standard deviation (\"csd\") Fisher statistics. rdegree returns degree preferred orientation vectors, range: (0, 1). sd_error returns spherical standard error (numeric). number data less 25, print additional message, output value might good estimator. confidence_angle returns semi-vertical angle \\(q\\) mean \\(\\mu\\) (degree x \"Plane\" \"Line\", radians otherwise). \\(100(1-\\alpha)\\%\\) confidence interval given \\(\\mu \\pm q\\). estimate_k returns estimated concentration von Mises-Fisher distribution \\(\\kappa\\) (Sra, 2011).","code":""},{"path":"https://tobiste.github.io/structr/reference/stats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Statistical estimators of the distribution of a set of vectors — stats","text":"","code":"set.seed(20250411) x <- rvmf(100, mu = Line(120, 50), k = 5) mean(x) #> Line object (n = 1): #>   azimuth    plunge  #> 115.21007  52.67744  var(x) #> [1] 0.224176 delta(x) #> [1] 39.1202 rdegree(x) #> [1] 0.551648 sd_error(x) #> [1] 4.01451 confidence_angle(x) #> [1] 6.965534 estimate_k(x) #> [1] 4.673486  #' weights: x2 <- Line(c(0, 0), c(0, 90)) mean(x2) #> Line object (n = 1): #> azimuth  plunge  #>       0      45  mean(x2, w = c(1, 2)) #> Line object (n = 1): #>  azimuth   plunge  #>  0.00000 63.43495  var(x2) #> [1] 0.2928932 var(x2, w = c(1, 2)) #> [1] 0.254644"},{"path":"https://tobiste.github.io/structr/reference/stereo_cones.html","id":null,"dir":"Reference","previous_headings":"","what":"Stereographic projection of cones — stereo_cones","title":"Stereographic projection of cones — stereo_cones","text":"Visualization smallcircles greatcircles stereographic projection.","code":""},{"path":"https://tobiste.github.io/structr/reference/stereo_cones.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stereographic projection of cones — stereo_cones","text":"","code":"stereo_smallcircle(   x,   d = 90,   col = 1,   N = 1000,   upper.hem = FALSE,   earea = TRUE,   lty = 1,   lwd = 1,   BALL.radius = 1,   ... )  stereo_greatcircle(x, ...)"},{"path":"https://tobiste.github.io/structr/reference/stereo_cones.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stereographic projection of cones — stereo_cones","text":"x object class \"Vec3\", \"Line\", \"Plane\", \"Pair\", \"Fault\". d numeric. conical angle degrees. col, lty, lwd color, line type, line width parameters N integer. number points calculate upper.hem logical. Whether projection shown upper hemisphere (TRUE) lower hemisphere (FALSE, default). earea logical TRUE Lambert equal-area projection (also \"Schmidt net\"; default), FALSE meridional stereographic projection (also \"Wulff net\" \"Stereonet\"). BALL.radius numeric size sphere ... optional graphical parameters","code":""},{"path":"https://tobiste.github.io/structr/reference/stereo_cones.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stereographic projection of cones — stereo_cones","text":"","code":"stereoplot() stereo_point(Line(90, 5), lab = \"L\") stereo_smallcircle(Line(90, 5), d = 10) stereo_point(Plane(120, 30), lab = \"P\", col = \"red\") stereo_greatcircle(Plane(120, 30), col = \"red\")   stereoplot() stereo_point(Line(c(129, 90), c(30, 5)), lab = c(\"L1\", \"L2\")) stereo_smallcircle(Line(c(129, 90), c(30, 5)), d = c(10, 5), col = 1:2, lty = 1:2, lwd = 1:2)"},{"path":"https://tobiste.github.io/structr/reference/stereo_contour.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot spherical densities in a stereonet — stereo_contour","title":"Plot spherical densities in a stereonet — stereo_contour","text":"Kamb counts densities sphere. contour plots contour lines, contourf displays contour plot areas contours filled, image creates dense grid colored rectangles.","code":""},{"path":"https://tobiste.github.io/structr/reference/stereo_contour.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot spherical densities in a stereonet — stereo_contour","text":"","code":"# S3 method for class 'spherical' contour(   x,   add = FALSE,   density.params = list(),   nlevels = 10L,   col.palette = viridis::viridis,   col = NULL,   col.params = list(),   ... )  contourf(   x,   add = FALSE,   density.params = list(),   nlevels = 10L,   col.palette = viridis::viridis,   col.params = list() )  # S3 method for class 'spherical' image(   x,   add = FALSE,   density.params = list(),   nlevels = 10L,   col.palette = viridis::viridis,   col.params = list(),   ... )"},{"path":"https://tobiste.github.io/structr/reference/stereo_contour.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot spherical densities in a stereonet — stereo_contour","text":"x object class \"Vec3\", \"Line\", \"Plane\" 'spherical.density' (plotting ). add logical. Whether contours added existing plot. density.params list parameters passed density.spherical nlevels integer. Number contour levels plotting col.palette color palette function used assign colors plot. col colour(s) contour lines drawn. NULL, lines color based col.palette. col.params list. Arguments passed col.palette ... optional parameters passed graphics::image() graphics::contour().","code":""},{"path":"https://tobiste.github.io/structr/reference/stereo_contour.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot spherical densities in a stereonet — stereo_contour","text":"list containing stereographic x coordinates grid, counts, density.","code":""},{"path":[]},{"path":"https://tobiste.github.io/structr/reference/stereo_contour.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot spherical densities in a stereonet — stereo_contour","text":"","code":"set.seed(20250411) x <- rfb(100, mu = Line(120, 10), k = 5, A = diag(c(-1, 0, 1)))  contour(x)   contourf(x,   col.params = list(direction = -1, begin = .05, end = .95, alpha = .75) ) stereo_point(x, col = \"black\", pch = 21)   image(x) stereo_point(x, col = \"lightgrey\", pch = 21)    # complete example: par(mfrow = c(1, 2)) wp <- 6 / ifelse(is.na(example_planes$quality), 6, example_planes$quality) my_planes <- Plane(example_planes$dipdir, example_planes$dip) fabric_p <- or_shape_params(my_planes)$Vollmer[\"D\"] my_planes_eig <- eigen(my_planes)  stereoplot(guides = TRUE, col = \"grey96\") points(my_planes, col = \"grey\", pch = 16, cex = .5) contour(my_planes, add = TRUE, weights = wp) points(my_planes_eig$vectors[3, ], col = \"black\", pch = 16) lines(my_planes_eig$vectors[3, ], d = 90, col = \"black\", pch = 16) title(   main = \"Planes\",   sub = paste0(     \"N: \", nrow(my_planes), \" | Fabric strength: \", round(fabric_p, 2),     \"\\nLambert equal area, lower hemisphere projection\"   ) )  my_lines <- Line(example_lines$trend, example_lines$plunge) wl <- 6 / ifelse(is.na(example_lines$quality), 6, example_lines$quality) fabric_l <- or_shape_params(my_lines)$Vollmer[\"D\"]  stereoplot(guides = TRUE, col = \"grey96\") points(my_lines, col = \"grey\", pch = 16, cex = .5) contour(my_lines, add = TRUE, weights = wl) points(mean(my_lines, w = wl), col = \"black\", pch = 16) title(   main = \"Lines\",   sub = paste0(     \"N: \", nrow(my_lines), \" | Fabric strength: \", round(fabric_l, 2),     \"\\nLambert equal area, lower hemisphere projection\"   ) )"},{"path":"https://tobiste.github.io/structr/reference/stereo_coords.html","id":null,"dir":"Reference","previous_headings":"","what":"Stereographic projection — stereo_coords","title":"Stereographic projection — stereo_coords","text":"Transformation spherical coordinates stereographic projection","code":""},{"path":"https://tobiste.github.io/structr/reference/stereo_coords.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stereographic projection — stereo_coords","text":"","code":"stereo_coords(az, inc, upper.hem = FALSE, earea = TRUE, r = 1)"},{"path":"https://tobiste.github.io/structr/reference/stereo_coords.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stereographic projection — stereo_coords","text":"az, inc numeric vectors. Azimuth Inclination degrees. upper.hem logical. Whether projection shown upper hemisphere (TRUE) lower hemisphere (FALSE, default). earea logical TRUE Lambert equal-area projection (also \"Schmidt net\"; default), FALSE meridional stereographic projection (also \"Wulff net\" \"Stereonet\"). r numeric. Radius circle. Default 1 unit circle.","code":""},{"path":"https://tobiste.github.io/structr/reference/stereo_coords.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stereographic projection — stereo_coords","text":"two-column vector transformed coordinates","code":""},{"path":"https://tobiste.github.io/structr/reference/stereo_coords.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stereographic projection — stereo_coords","text":"","code":"stereo_coords(90, 10) #>            x            y #> inc 0.909039 5.566258e-17 stereo_coords(90, 10, earea = TRUE, upper.hem = TRUE) #>             x             y #> inc -0.909039 -1.669877e-16"},{"path":"https://tobiste.github.io/structr/reference/stereo_fault.html","id":null,"dir":"Reference","previous_headings":"","what":"Stereographic projection of faults — stereo_fault","title":"Stereographic projection of faults — stereo_fault","text":"Visualization faults (planes lines) stereographic projection.","code":""},{"path":"https://tobiste.github.io/structr/reference/stereo_fault.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stereographic projection of faults — stereo_fault","text":"","code":"stereo_fault(   x,   hoeppner = FALSE,   greatcirles = TRUE,   pch = 16,   col = 1,   lwd = 1,   lty = 1,   lab = NULL,   cex = 1,   text.pos = 4,   upper.hem = FALSE,   earea = TRUE,   ... )"},{"path":"https://tobiste.github.io/structr/reference/stereo_fault.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stereographic projection of faults — stereo_fault","text":"x Object class \"Fault\" hoeppner logical. TRUE Hoeppner plot greatcirles logical. Whether greatcircles displayed (TRUE, default) poles planes (FALSE) pch, col, lwd, lty plotting parameters planes lines lab character. text labels cex character expansion labels text.pos position labels upper.hem logical. Whether projection shown upper hemisphere (TRUE) lower hemisphere (FALSE, default). earea logical TRUE Lambert equal-area projection (also \"Schmidt net\"; default), FALSE meridional stereographic projection (also \"Wulff net\" \"Stereonet\"). ... optional graphical parameters","code":""},{"path":"https://tobiste.github.io/structr/reference/stereo_fault.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Stereographic projection of faults — stereo_fault","text":"\"plane\" objects displayed pole plane.","code":""},{"path":"https://tobiste.github.io/structr/reference/stereo_fault.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stereographic projection of faults — stereo_fault","text":"","code":"faults <- Fault(   c(0, 90, 180, 270),   c(80, 45, 80, 45),   c(0, 170, 180, 315),   c(80, 10, 80, 36),   c(1, -1, 0, 1) ) stereoplot() stereo_fault(faults, col = 1:4) # stereo_fault(faults, col =1:4, hoeppner = TRUE) legend(\"bottomright\", c(\"normal\", \"thrust\", \"unknown\", \"normal\"), fill = 1:4)"},{"path":"https://tobiste.github.io/structr/reference/stereo_point.html","id":null,"dir":"Reference","previous_headings":"","what":"Stereographic projection of lines and planes — stereo_point","title":"Stereographic projection of lines and planes — stereo_point","text":"Visualization lines, planes stereographic projection.","code":""},{"path":"https://tobiste.github.io/structr/reference/stereo_point.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stereographic projection of lines and planes — stereo_point","text":"","code":"stereo_point(   x,   col = 1,   pch = 20,   lab = NULL,   text.pos = 4,   cex = 1,   upper.hem = FALSE,   earea = TRUE,   ... )"},{"path":"https://tobiste.github.io/structr/reference/stereo_point.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stereographic projection of lines and planes — stereo_point","text":"x object class \"Vec3\", \"Line\", \"Plane\". \"Pair\", \"Fault\" col color pch plotting character lab character. text labels text.pos position labels cex character expansion labels upper.hem logical. Whether projection shown upper hemisphere (TRUE) lower hemisphere (FALSE, default). earea logical TRUE Lambert equal-area projection (also \"Schmidt net\"; default), FALSE meridional stereographic projection (also \"Wulff net\" \"Stereonet\"). ... optional graphical parameters","code":""},{"path":"https://tobiste.github.io/structr/reference/stereo_point.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Stereographic projection of lines and planes — stereo_point","text":"\"Plane\" \"Fault\" objects displayed pole plane ().","code":""},{"path":"https://tobiste.github.io/structr/reference/stereo_point.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stereographic projection of lines and planes — stereo_point","text":"","code":"stereoplot() stereo_point(Line(c(90, 80), c(10, 75)), lab = c(\"L1\", \"L2\")) stereo_point(Plane(120, 30), lab = \"P\", col = \"red\")"},{"path":"https://tobiste.github.io/structr/reference/stereoplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Stereographic projection — stereoplot","title":"Stereographic projection — stereoplot","text":"Initialize plot equal-area stereographic projections (Wulff) Lambert Equal-Area projections (Schmidt).","code":""},{"path":"https://tobiste.github.io/structr/reference/stereoplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stereographic projection — stereoplot","text":"","code":"stereoplot(   earea = TRUE,   guides = TRUE,   d = 10,   col = grDevices::gray(0.9),   lwd = 1,   lty = 1,   border.col = \"black\",   title = NULL,   sub = NULL,   origin.text = \"N\",   labels = FALSE,   ladj = 0.04,   centercross = TRUE,   ticks = NULL,   radius = 1 )"},{"path":"https://tobiste.github.io/structr/reference/stereoplot.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Stereographic projection — stereoplot","text":"Adapted RFOC package","code":""},{"path":"https://tobiste.github.io/structr/reference/stereoplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stereographic projection — stereoplot","text":"earea logical. Projection, either TRUE Lambert equal-area projection (default), FALSE meridional stereographic projection. guides logical. Whether guides added plot (TRUE default) d integer. Angle distance guides. Default: 10 col color guide lines lwd linewidth guide lines lty linetype guide lines border.col color primitive circle (frame), center-cross ticks stereo plot title, sub character. Title subtitle plot origin.text character. Text origin stereoplot. labels can either logical value specifying whether (numerical) annotations made next tickmarks, character expression vector labels placed next tickpoints. ladj adjustment labels away origin stereoplot circle. essentially amount added radius length ticks. centercross logical. Whether center cross added (TRUE default) ticks integer. Angle ticks. NULL (default), ticks drawn. radius numeric. Radius circle","code":""},{"path":"https://tobiste.github.io/structr/reference/stereoplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stereographic projection — stereoplot","text":"","code":"stereoplot(ticks = 30, title = \"title\", sub = \"subtitle\", border.col = \"purple\", labels = TRUE)"},{"path":"https://tobiste.github.io/structr/reference/stereoplot_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Stereoplot frame — stereoplot_frame","title":"Stereoplot frame — stereoplot_frame","text":"Adds (primitive) circle given radius existing plot","code":""},{"path":"https://tobiste.github.io/structr/reference/stereoplot_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stereoplot frame — stereoplot_frame","text":"","code":"stereoplot_frame(ndiv = 144, radius = 1, ...)"},{"path":"https://tobiste.github.io/structr/reference/stereoplot_frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stereoplot frame — stereoplot_frame","text":"ndiv integer. Resolution circle's line radius numeric. Radius circle ... optional arguments passed graphics::lines()","code":""},{"path":[]},{"path":"https://tobiste.github.io/structr/reference/stereoplot_frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stereoplot frame — stereoplot_frame","text":"","code":"plot(c(-1, 1), c(-1, 1), type = \"n\", asp = 1) stereoplot_frame(col = 'red', lwd = 3)"},{"path":"https://tobiste.github.io/structr/reference/stereoplot_guides.html","id":null,"dir":"Reference","previous_headings":"","what":"Stereoplot gridlines — stereoplot_guides","title":"Stereoplot gridlines — stereoplot_guides","text":"Adds equal-area equal-angle projection gridlines existing stereoplot.","code":""},{"path":"https://tobiste.github.io/structr/reference/stereoplot_guides.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stereoplot gridlines — stereoplot_guides","text":"","code":"stereoplot_guides(d = 10, earea = TRUE, radius = 1, ...)"},{"path":"https://tobiste.github.io/structr/reference/stereoplot_guides.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stereoplot gridlines — stereoplot_guides","text":"d angle grid lines earea logical. Projection, either TRUE Lambert equal-area projection (default), FALSE meridional stereographic projection. radius numeric. Radius circle ... optional arguments passed graphics::lines()","code":""},{"path":[]},{"path":"https://tobiste.github.io/structr/reference/stereoplot_guides.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stereoplot gridlines — stereoplot_guides","text":"","code":"plot(c(-1, 1), c(-1, 1), type = \"n\", asp = 1) stereoplot_guides(d = 5, earea = FALSE, col = 'green', rotation = 20)   plot(c(-1, 1), c(-1, 1), type = \"n\", asp = 1) stereoplot_guides(d = 15, earea = TRUE, col = 'orange', rotation = 90)"},{"path":"https://tobiste.github.io/structr/reference/stereoplot_ticks.html","id":null,"dir":"Reference","previous_headings":"","what":"Stereoplot tickmarks — stereoplot_ticks","title":"Stereoplot tickmarks — stereoplot_ticks","text":"Adds stereoplot rickmarks existing plot","code":""},{"path":"https://tobiste.github.io/structr/reference/stereoplot_ticks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stereoplot tickmarks — stereoplot_ticks","text":"","code":"stereoplot_ticks(   length = 0.02,   angle = 10,   labels = FALSE,   ladj = 2 * length,   radius = 1,   rotation = 0,   ... )"},{"path":"https://tobiste.github.io/structr/reference/stereoplot_ticks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stereoplot tickmarks — stereoplot_ticks","text":"length numeric. Length ticks fraction radius angle numeric. Division angle degrees labels can either logical value specifying whether (numerical) annotations made next tickmarks, character expression vector labels placed next tickpoints. ladj adjustment labels away origin stereoplot circle. essentially amount added radius length ticks. radius numeric. Radius circle rotation numeric. Rotation (positive counter-clockwise) tickmarks labels ... optional arguments passed graphics::segments() graphics::text()","code":""},{"path":[]},{"path":"https://tobiste.github.io/structr/reference/stereoplot_ticks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stereoplot tickmarks — stereoplot_ticks","text":"","code":"plot(c(-1, 1), c(-1, 1), type = \"n\", asp = 1) stereoplot_frame() stereoplot_ticks(length = 0.05, angle = 45, col = 'blue', lwd = 2, labels = TRUE)"},{"path":"https://tobiste.github.io/structr/reference/strabo.html","id":null,"dir":"Reference","previous_headings":"","what":"Import orientation data from StraboSpot — strabo","title":"Import orientation data from StraboSpot — strabo","text":"Reads XLS format export field book data, JSON project file, txt export StraboMobile data strabospot.org/my_data creates list metadata, line plane orientations.","code":""},{"path":"https://tobiste.github.io/structr/reference/strabo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import orientation data from StraboSpot — strabo","text":"","code":"read_strabo_xls(file, tag_cols = FALSE, sf = TRUE)  read_strabo_mobile(file, sf = TRUE)  read_strabo_JSON(file, sf = TRUE)"},{"path":"https://tobiste.github.io/structr/reference/strabo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import orientation data from StraboSpot — strabo","text":"file name file data read . tag_cols logical. Whether Tag columns summarized single column (may lead duplicate rows). sf logical. Whether output spatial \"sf\" object using Longitude Latitude columns.","code":""},{"path":"https://tobiste.github.io/structr/reference/strabo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import orientation data from StraboSpot — strabo","text":"list containing following objects: data \"tbl_df\" object. Metadata. spots \"tbl_df\" object \"sf\" sf == TRUE. Locations spot descriptions. tags \"tbl_df\" object. Tags descriptsions. planar Plane elements. row IDs data. linear Line elements. row IDs data.","code":""},{"path":"https://tobiste.github.io/structr/reference/strabo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import orientation data from StraboSpot — strabo","text":"","code":"if (FALSE) { # \\dontrun{ # import from excel file read_strabo_xls(\"path/to/my/file.xlsx\")  # import from text file read_strabo_mobile(\"path/to/my/file.txt\")  # import from .json file read_strabo_JSON(\"path/to/my/file.json\") } # }"},{"path":"https://tobiste.github.io/structr/reference/strain_shape.html","id":null,"dir":"Reference","previous_headings":"","what":"Principal Stretches, Strain and Shape Parameters based on the Orientation Tensor. — strain_shape","title":"Principal Stretches, Strain and Shape Parameters based on the Orientation Tensor. — strain_shape","text":"Principal Stretches, Strain Shape Parameters based Orientation Tensor.","code":""},{"path":"https://tobiste.github.io/structr/reference/strain_shape.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Principal Stretches, Strain and Shape Parameters based on the Orientation Tensor. — strain_shape","text":"","code":"principal_stretch(x)  principal_strain(x)  or_shape_params(x)"},{"path":"https://tobiste.github.io/structr/reference/strain_shape.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Principal Stretches, Strain and Shape Parameters based on the Orientation Tensor. — strain_shape","text":"x Object class \"Vec3\", \"Line\" \"Plane\"","code":""},{"path":"https://tobiste.github.io/structr/reference/strain_shape.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Principal Stretches, Strain and Shape Parameters based on the Orientation Tensor. — strain_shape","text":"list","code":""},{"path":"https://tobiste.github.io/structr/reference/strain_shape.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Principal Stretches, Strain and Shape Parameters based on the Orientation Tensor. — strain_shape","text":"stretch_ratios Sqrt eigenvalue ratios strain_ratios Log stretch ratios Ramsay strain symmetry (Ramsay, 1983) Woodcock Woodcock shape Flinn Flinn strain intensity Vollmer Point, Girdle, Random, Cylindricity (B), Uniform Distance (D) Indices (Vollmer 1990; 2020). D measure \"distance\" uniformity, linear R P, R G. End members : uniform D = 0, girdle D = 0.5, cluster D = 1. 99% level test uniformity sample size 300 D = 0.1. Nadai natural octahedral unit strain shear (Nadai, 1963) Lisle_intensity Intensity index (Lisle, 1985) Waterson_intensity strain intensity (Watterson, 1968) lode Lode parameter (Lode, 1926) kind Descriptive type ellipsoid MAD maximum angular deviation (Kirschvink, 1980) US Uniformity statistic Mardia (1972)","code":""},{"path":"https://tobiste.github.io/structr/reference/strain_shape.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Principal Stretches, Strain and Shape Parameters based on the Orientation Tensor. — strain_shape","text":"Flinn, Derek.(1963): \"statistical analysis fabric diagrams.\" Geological Journal 3.2: 247-253. Kirschvink, J. (1980): least-squares line plane analysis palaeomagnetic data. Geophysical Journal International, 62(3), 699-718. Lisle, Richard J.  (1985): \"use orientation tensor description statistical testing fabrics.\" Journal Structural Geology 7.1: 115-117. Lode, Walter (1926): \"Versuche über den Einfluß der mittleren Hauptspannung auf das Fließen der Metalle Eisen, Kupfer und Nickel“ (\"Experiments influence mean principal stress flow metals iron, copper nickel\"], Zeitschrift für Physik, vol. 36 (November), pp. 913–939, DOI: 10.1007/BF01400222 Mardia, Kantilal Varichand. (1975): \"Statistics directional data.\" Journal Royal Statistical Society Series B: Statistical Methodology 37.3: 349-371. Nadai, ., Hodge, P. G., Jr. (1963): \"Theory Flow Fracture Solids, vol. II.\" ASME. J. Appl. Mech. December 1963; 30(4): 640. https://doi.org/10.1115/1.3636654 Ramsay, John G. (1967): \"Folding fracturing rocks.\" Mc Graw Hill Book Company 568. Vollmer, Frederick W. (1990): \"application eigenvalue methods structural domain analysis.\" Geological Society America Bulletin 102.6: 786-791. Vollmer, Frederick W. (2020): \"Representing Progressive Fabric Paths Triangular Plot Using Fabric Density Index Crystal Axes Eigenvector Barycenters.\" Geological Society America Abstracts. Vol. 52. Watterson, Juan. (1968): \"Homogeneous deformation gneisses Vesterland, south-west Greenland\". . 78. CA Reitzel. Woodcock, N. H.  (1977): \"Specification fabric shapes using eigenvalue method.\" Geological Society America Bulletin 88.9: 1231-1236.","code":""},{"path":[]},{"path":"https://tobiste.github.io/structr/reference/strain_shape.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Principal Stretches, Strain and Shape Parameters based on the Orientation Tensor. — strain_shape","text":"","code":"set.seed(1) mu <- Line(120, 50) x <- rvmf(100, mu = mu, k = 20) principal_stretch(x) #>       S1       S2       S3  #> 9.511749 2.220799 2.143520  principal_strain(x) #>        e1        e2        e3  #> 2.2525278 0.7978670 0.7624492  or_shape_params(x) #> $stretch_ratios #>   Rxy.S1   Ryz.S2   Rxz.S1  #> 4.283031 1.036052 4.437444  #>  #> $strain_ratios #>     e12.e1     e13.e1     e23.e2  #> 1.45466083 1.49007857 0.03541774  #>  #> $Vollmer #>          P          G          R          B          C          I          D  #> 0.85541428 0.00674541 0.13784031 0.86215969 2.98015714 2.45061732 0.85710561  #>  #> $Flinn #> intensity.S1  symmetry.S1  #>     3.283228    91.062705  #>  #> $Ramsay #> intensity.e1  symmetry.e1  #>     2.117293    41.071535  #>  #> $Woodcock #> strength.e1    shape.e1  #>    1.490079   41.071535  #>  #> $Watterson_intensity #>       S1  #> 4.319083  #>  #> $Lisle_intensity #> [1] 3.67315 #>  #> $Nadai #>  goct.e1  eoct.e1  #> 1.388465 1.202446  #>  #> $Lode #>         e1  #> -0.9524619  #>  #> $kind #> [1] \"L\" #>  #> $MAD_approx #> [1] 17.97803 #>  #> $MAD #> [1] 17.97803 #>  #> $US #> [1] 367.315 #>"},{"path":"https://tobiste.github.io/structr/reference/structr.html","id":null,"dir":"Reference","previous_headings":"","what":"library(structr) — structr","title":"library(structr) — structr","text":"Free open-source R package analyzing visualizing orientation stress data structural geology.","code":""},{"path":"https://tobiste.github.io/structr/reference/structr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"library(structr) — structr","text":"list documented functions may viewed typing help(package='structr').","code":""},{"path":[]},{"path":"https://tobiste.github.io/structr/reference/structr.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"library(structr) — structr","text":"Maintainer: Tobias Stephan tobias.stephan1@yahoo.com (ORCID)","code":""},{"path":"https://tobiste.github.io/structr/reference/tauMax.html","id":null,"dir":"Reference","previous_headings":"","what":"Maximum in-plane shear stress — tauMax","title":"Maximum in-plane shear stress — tauMax","text":"calculates magnitude direction maximum -plane shear stress","code":""},{"path":"https://tobiste.github.io/structr/reference/tauMax.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Maximum in-plane shear stress — tauMax","text":"","code":"tauMax(sigmaX, sigmaZ, tauXZ)"},{"path":"https://tobiste.github.io/structr/reference/tauMax.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Maximum in-plane shear stress — tauMax","text":"sigmaX numeric. Magnitude normal stress acting horizontal direction sigmaZ numeric. Magnitude normal stress acting vertical direction tauXZ numeric. Magnitude shear stress acting plane \"sigmaX\"","code":""},{"path":"https://tobiste.github.io/structr/reference/tauMax.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Maximum in-plane shear stress — tauMax","text":"two-element list containing \"tauMax\" maximum -plane shear stress \"theta\" angle maximum -plane shear stress (degrees)","code":""},{"path":"https://tobiste.github.io/structr/reference/tauMax.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Maximum in-plane shear stress — tauMax","text":"Kyle Elmy Jim Kaklamanos","code":""},{"path":"https://tobiste.github.io/structr/reference/tauMax.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Maximum in-plane shear stress — tauMax","text":"","code":"tauMax(sigmaX = 80, sigmaZ = 120, tauXZ = 20) #> $tauMax #> [1] 28.28427 #>  #> $theta #> [1] 67.5 #>"},{"path":"https://tobiste.github.io/structr/reference/text.spherical.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Points to a Plot — text.spherical","title":"Add Points to a Plot — text.spherical","text":"Add Points Plot","code":""},{"path":"https://tobiste.github.io/structr/reference/text.spherical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Points to a Plot — text.spherical","text":"","code":"# S3 method for class 'spherical' text(x, labels = seq_along(x[, 1]), upper.hem = FALSE, earea = TRUE, ...)"},{"path":"https://tobiste.github.io/structr/reference/text.spherical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Points to a Plot — text.spherical","text":"x objects class \"Vec3\", \"Line\", \"Plane\", \"Pair\", \"Fault\". labels character vector expression specifying     text written.  attempt made coerce     language objects (names calls) expressions, vectors     classed objects character vectors .character.     labels longer x     y, coordinates recycled length labels. upper.hem logical. Whether projection shown upper hemisphere (TRUE) lower hemisphere (FALSE, default). earea logical. Projection, either TRUE Lambert equal-area projection (default), FALSE meridional stereographic projection. ... arguments passed graphics::text()","code":""},{"path":"https://tobiste.github.io/structr/reference/text.spherical.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Points to a Plot — text.spherical","text":"","code":"stereoplot() points(Line(c(90, 80), c(10, 75)), col = 1:2) text(Line(c(90, 80), c(10, 75)), labels = c(\"L1\", \"L2\"), col = 1:2, pos = 3)"},{"path":"https://tobiste.github.io/structr/reference/vecmath.html","id":null,"dir":"Reference","previous_headings":"","what":"Vector math operations — vecmath","title":"Vector math operations — vecmath","text":"Vector math operations","code":""},{"path":"https://tobiste.github.io/structr/reference/vecmath.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vector math operations — vecmath","text":"","code":"vector_length(x)  crossprod(x, ...)  # S3 method for class 'spherical' crossprod(x, y = NULL)  # S3 method for class 'spherical' x %*% y  rotate(x, ...)  # S3 method for class 'spherical' rotate(x, rotaxis, rotangle)  angle(x, y)  # S3 method for class 'spherical' angle(x, y)  project(x, y)  # S3 method for class 'spherical' project(x, y)  reject(x, y)  # Default S3 method reject(x, y)  transform_linear(x, A, norm = FALSE)"},{"path":"https://tobiste.github.io/structr/reference/vecmath.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vector math operations — vecmath","text":"x, y objects class \"Vec3\", \"Line\", \"Plane\". ... arguments passed function call rotaxis Axis rotation given object class \"Vec3\", \"Line\", \"Plane\". rotangle Angle rotation radians \"Vec3\" objects degrees \"Line\" \"Plane\" objects. numeric 3x3 matrix. Transformation matrix. norm logical. TRUE, transformed vectors normalized unit length.","code":""},{"path":"https://tobiste.github.io/structr/reference/vecmath.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vector math operations — vecmath","text":"objects class x, .e. one \"Vec3\", \"Line\", \"Plane\". vector_length() %*% return real number. angle() returns numeric angle (degrees, unless x class \"Vec3\").","code":""},{"path":"https://tobiste.github.io/structr/reference/vecmath.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Vector math operations — vecmath","text":"vector_length length vector crossprod cross-product two vectors, .e. vector perpendicular 2 vectors. y = NULL taken sam,e vector x. %*% dot product two vectors rotate rotation vector specified vector specified angle angle angle two vectors project projection one vector onto (changes vector length second vector, unless unit vectors) transform_linear Linear transformation vector 3x3 matrix","code":""},{"path":"https://tobiste.github.io/structr/reference/vecmath.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vector math operations — vecmath","text":"","code":"vec1 <- Vec3(1, 0, 0) vec2 <- Vec3(0, 0, 1)  vector_length(vec1) # lenght of a vector #> [1] 1 crossprod(vec1, vec2) # cross product #> Vector (Vec3) object (n = 1): #>  x  y  z  #>  0 -1  0  vec1 %*% vec2 # dot product #> [1] 0 rotate(vec1, vec2, pi / 2) # rotation #> Vector (Vec3) object (n = 1): #>            x            y            z  #> 2.220446e-16 1.000000e+00 0.000000e+00  angle(vec1, vec2) # angle between vectors #> [1] 1.570796 project(vec1, vec2) # projection of a vector #> Vector (Vec3) object (n = 1): #> x y z  #> 0 0 0  transform_linear(vec1, matrix(runif(9), 3, 3)) # linear transformation #> Vector (Vec3) object (n = 1): #>          x          y          z  #> 0.48974231 0.01134019 0.25860230"},{"path":"https://tobiste.github.io/structr/reference/vel_rate.html","id":null,"dir":"Reference","previous_headings":"","what":"Rate and spin of velocity gradient tensor — vel_rate","title":"Rate and spin of velocity gradient tensor — vel_rate","text":"Rate spin velocity gradient tensor","code":""},{"path":"https://tobiste.github.io/structr/reference/vel_rate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rate and spin of velocity gradient tensor — vel_rate","text":"","code":"velgrad_rate(x)  velgrad_spin(x)"},{"path":"https://tobiste.github.io/structr/reference/vel_rate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rate and spin of velocity gradient tensor — vel_rate","text":"x 3x3 matrix. Velocity gradient tensor.","code":""},{"path":"https://tobiste.github.io/structr/reference/vel_rate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rate and spin of velocity gradient tensor — vel_rate","text":"3x3 matrix","code":""},{"path":"https://tobiste.github.io/structr/reference/vel_rate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rate and spin of velocity gradient tensor — vel_rate","text":"","code":"R <- defgrad_from_comp(xx = 2, xy = 1, zz = 0.5) L <- velgrad_from_defgrad(R, time = 10) velgrad_rate(L) #>            [,1]       [,2]        [,3] #> [1,] 0.06931472 0.03465736  0.00000000 #> [2,] 0.03465736 0.00000000  0.00000000 #> [3,] 0.00000000 0.00000000 -0.06931472 velgrad_spin(L) #>             [,1]       [,2] [,3] #> [1,]  0.00000000 0.03465736    0 #> [2,] -0.03465736 0.00000000    0 #> [3,]  0.00000000 0.00000000    0"},{"path":"https://tobiste.github.io/structr/reference/vonmises-fisher.html","id":null,"dir":"Reference","previous_headings":"","what":"von Mises-Fisher Distribution — vonmises-fisher","title":"von Mises-Fisher Distribution — vonmises-fisher","text":"Density random generation spherical normal distribution mean kappa.","code":""},{"path":"https://tobiste.github.io/structr/reference/vonmises-fisher.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"von Mises-Fisher Distribution — vonmises-fisher","text":"","code":"rvmf(n = 100, mu = Vec3(1, 0, 0), k = 5)  dvmf(x, mu, k = 5)"},{"path":"https://tobiste.github.io/structr/reference/vonmises-fisher.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"von Mises-Fisher Distribution — vonmises-fisher","text":"Adapted fom rotasym::r_vMF() rotasym::d_vMF()","code":""},{"path":"https://tobiste.github.io/structr/reference/vonmises-fisher.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"von Mises-Fisher Distribution — vonmises-fisher","text":"n integer. number random samples generated k numeric. concentration parameter (\\(\\kappa\\)) von Mises-Fisher distribution x, mu object class \"Vec3\", \"Line\" \"Plane\"","code":""},{"path":[]},{"path":"https://tobiste.github.io/structr/reference/vonmises-fisher.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"von Mises-Fisher Distribution — vonmises-fisher","text":"","code":"set.seed(20250411) x <- rvmf(100, mu = Line(120, 50), k = 5) dvmf(x, mu = Line(120, 50)) #>                [,1] #>   [1,] 0.3539638684 #>   [2,] 0.3456838512 #>   [3,] 0.3298219243 #>   [4,] 0.2878725467 #>   [5,] 0.3416723702 #>   [6,] 0.3087497280 #>   [7,] 0.5029607511 #>   [8,] 0.6655797562 #>   [9,] 0.7907738489 #>  [10,] 0.0037954383 #>  [11,] 0.6941862756 #>  [12,] 0.2215063746 #>  [13,] 0.6595268453 #>  [14,] 0.0005060201 #>  [15,] 0.7195109535 #>  [16,] 0.0733917426 #>  [17,] 0.6958226791 #>  [18,] 0.6722856633 #>  [19,] 0.6780233707 #>  [20,] 0.3776313507 #>  [21,] 0.6946564573 #>  [22,] 0.5766307194 #>  [23,] 0.7759395592 #>  [24,] 0.7901589106 #>  [25,] 0.6272959464 #>  [26,] 0.4489849106 #>  [27,] 0.6963171147 #>  [28,] 0.2077329205 #>  [29,] 0.4884814860 #>  [30,] 0.3942015612 #>  [31,] 0.7024778981 #>  [32,] 0.0009551707 #>  [33,] 0.7484831155 #>  [34,] 0.6860774055 #>  [35,] 0.0991952887 #>  [36,] 0.5446196691 #>  [37,] 0.2645460130 #>  [38,] 0.4137899293 #>  [39,] 0.2787976931 #>  [40,] 0.0008812961 #>  [41,] 0.3279258107 #>  [42,] 0.0575149554 #>  [43,] 0.3095756565 #>  [44,] 0.6331699361 #>  [45,] 0.5687413756 #>  [46,] 0.3877695235 #>  [47,] 0.7037452677 #>  [48,] 0.6272525066 #>  [49,] 0.4839627489 #>  [50,] 0.0074576675 #>  [51,] 0.0703558313 #>  [52,] 0.2590478470 #>  [53,] 0.1393608634 #>  [54,] 0.6407961152 #>  [55,] 0.1680944634 #>  [56,] 0.1146974769 #>  [57,] 0.6714866658 #>  [58,] 0.3713923453 #>  [59,] 0.3256224108 #>  [60,] 0.2225528050 #>  [61,] 0.7945046115 #>  [62,] 0.0302259400 #>  [63,] 0.7334812584 #>  [64,] 0.7544944369 #>  [65,] 0.6794339163 #>  [66,] 0.7217814257 #>  [67,] 0.0848180617 #>  [68,] 0.7887117130 #>  [69,] 0.0003715124 #>  [70,] 0.3587100009 #>  [71,] 0.4406101476 #>  [72,] 0.1213333354 #>  [73,] 0.6950889621 #>  [74,] 0.4436411860 #>  [75,] 0.5731018054 #>  [76,] 0.1131717267 #>  [77,] 0.3333639706 #>  [78,] 0.4203673749 #>  [79,] 0.7774430701 #>  [80,] 0.3796139755 #>  [81,] 0.2822486781 #>  [82,] 0.1697738070 #>  [83,] 0.1937737433 #>  [84,] 0.7613930727 #>  [85,] 0.6273298854 #>  [86,] 0.2486908813 #>  [87,] 0.4865129857 #>  [88,] 0.6431243513 #>  [89,] 0.5875447305 #>  [90,] 0.3346200855 #>  [91,] 0.5347723283 #>  [92,] 0.0008189982 #>  [93,] 0.4533583635 #>  [94,] 0.4058711922 #>  [95,] 0.4600893515 #>  [96,] 0.4565435898 #>  [97,] 0.6740864570 #>  [98,] 0.1553085088 #>  [99,] 0.2685622708 #> [100,] 0.4133662866 plot(x)"},{"path":"https://tobiste.github.io/structr/reference/vslerp.html","id":null,"dir":"Reference","previous_headings":"","what":"Spherical Linear Interpolation (Slerp) — vslerp","title":"Spherical Linear Interpolation (Slerp) — vslerp","text":"Returns spherical linear interpolation points two vectors","code":""},{"path":"https://tobiste.github.io/structr/reference/vslerp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spherical Linear Interpolation (Slerp) — vslerp","text":"","code":"vslerp(x, y, t, na.rm = TRUE)"},{"path":"https://tobiste.github.io/structr/reference/vslerp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spherical Linear Interpolation (Slerp) — vslerp","text":"x, y objects class \"Vec3\", \"Line\", \"Plane\". t numeric. interpolation factor (t = [0, 1]). na.rm logical. Whether NA values removed computation proceeds.","code":""},{"path":"https://tobiste.github.io/structr/reference/vslerp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Spherical Linear Interpolation (Slerp) — vslerp","text":"Slerp path spherical geometry equivalent path along line segment plane; great circle spherical geodesic.","code":""},{"path":"https://tobiste.github.io/structr/reference/vslerp.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Spherical Linear Interpolation (Slerp) — vslerp","text":"non-unit vectors interpolation uniform.","code":""}]
